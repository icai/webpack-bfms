mini = {
    components: {},
    uids: {},
    ux: {},
    doc: document,
    window: window,
    isReady: false,
    createTime: new Date(),
    byClass: function(cls, el) {

        if (typeof el == "string") el = mini.byId(el);
        return jQuery("." + cls, el)[0];
    },
    getComponents: function() {
        var cs = [];
        for (var id in mini.components) {
            var c = mini.components[id];
            if (c.isControl) {
                cs.push(c);
            }
        }
        return cs;
    },
    get: function(id) {
        if (!id) return null;
        if (mini.isControl(id)) return id;
        if (typeof id == "string") {
            if (id.charAt(0) == '#') id = id.substr(1);
        }
        if (typeof id == "string") return mini.components[id];
        else {
            var control = mini.uids[id.uid];
            if (control && control.el == id) return control;
        }
        return null;
    },
    getbyUID: function(uid) {
        return mini.uids[uid];
    },
    findControls: function(fn, scope) {
        if (!fn) return [];
        scope = scope || mini;
        var controls = [];
        var uids = mini.uids;
        for (var uid in uids) {
            var control = uids[uid];
            var ret = fn.call(scope, control);
            if (ret === true || ret === 1) {
                controls.push(control);
                if (ret === 1) break;
            }
        }
        return controls;
    },
    getChildControls: function(parent) {
        var pel = parent.el ? parent.el : parent;
        var controls = mini.findControls(function(control) {
            if (!control.el || parent == control) return false;
            if (mini.isAncestor(pel, control.el) && control.within) return true;
            return false;
        });
        return controls;
    },
    emptyFn: function() {},


    createNameControls: function(obj, pre) {
        if (!obj || !obj.el) return;
        if (!pre) pre = "_";
        var el = obj.el;
        var controls = mini.findControls(function(control) {
            if (!control.el || !control.name) return false;
            if (mini.isAncestor(el, control.el)) return true;
            return false;
        });

        for (var i = 0, l = controls.length; i < l; i++) {
            var c = controls[i];
            var name = pre + c.name;
            if (pre === true) {
                name = c.name[0].toUpperCase() + c.name.substring(1, c.name.length);
            }
            obj[name] = c;
        }

    },
    getsByName: function(name, parentNode) {
        return mini.getsbyName(name, parentNode);
    },
    getsbyName: function(name, parentNode) {
        var isControl = mini.isControl(parentNode);
        var parentControl = parentNode;
        if (parentNode && isControl) {
            parentNode = parentNode.el;
        }
        parentNode = mini.byId(parentNode);
        parentNode = parentNode || document.body;
        var controls = mini.findControls(function(control) {
            if (!control.el) return false;
            if (control.name == name && mini.isAncestor(parentNode, control.el)) return true;
            return false;
        }, this);

        if (isControl && controls.length == 0 && parentControl && parentControl.getbyName) {
            var obj = parentControl.getbyName(name);
            if (obj) controls.push(obj);
        }

        return controls;
    },
    getbyName: function(name, parentNode) {
        return mini.getsbyName(name, parentNode)[0];
    },
    getByName: function(name, parentNode) {
        return mini.getbyName(name, parentNode);
    },
    getParams: function(url) {
        if (!url) url = location.href;
        url = url.split("?")[1];
        var params = {};
        if (url) {
            var us = url.split("&");
            for (var i = 0, l = us.length; i < l; i++) {
                var ps = us[i].split("=");

                try {
                    params[decodeURIComponent(ps[0])] = decodeURIComponent(ps[1]); // match $.param
                } catch (ex) {


                }
            }
        }
        return params;
    },
    //param: $.param,
    reg: function(cmp) {
        this.components[cmp.id] = cmp;
        this.uids[cmp.uid] = cmp;

    },
    unreg: function(cmp) {
        delete mini.components[cmp.id];
        delete mini.uids[cmp.uid];



    },

    classes: {},
    uiClasses: {},
    getClass: function(className) {
        if (!className) return null;
        return this.classes[className.toLowerCase()];
    },
    getClassByUICls: function(uiCls) {

        return this.uiClasses[uiCls.toLowerCase()];
    },


    idPre: "mini-",
    idIndex: 1,
    newId: function(idPre) {
        return (idPre || this.idPre) + this.idIndex++;
    },

    copyTo: function(to, from) {
        if (to && from) {
            for (var p in from) {
                to[p] = from[p];
            }
        }
        return to;
    },
    copyIf: function(to, from) {
        if (to && from) {
            for (var p in from) {
                if (mini.isNull(to[p])) {
                    to[p] = from[p];
                }
            }
        }
        return to;
    },
    createDelegate: function(fn, scope) {
        if (!fn) return function() {};
        return function() {
            return fn.apply(scope, arguments);
        }
    },

    isControl: function(obj) {
        return !!(obj && obj.isControl);
    },
    isEmptyObject: function (obj) {
        if (obj == null) return true;
        for (var key in obj) if (obj.hasOwnProperty(key)) return false;
        return true;
    },
    isElement: function(obj) {
        return obj && obj.appendChild;
    },
    isDate: function(value) {
        return !!(value && value.getFullYear);
    },
    isArray: function(value) {
        return !!(value && !!value.unshift);
    },
    isString: function(value) {
        return typeof value === 'string';
    },
    isNull: function(value) {
        return value === null || value === undefined;
    },
    isObject: function(obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
    },
    isPlainObject: function(obj){
        return jQuery.isPlainObject(obj);
    },
    isUndefined: function(obj) {
        return obj === void 0;
    },
    isNumber: function(value) {
        return !isNaN(value) && typeof value == 'number';
    },
    isEquals: function(a, b) {

        if (a !== 0 && b !== 0) {
            if ((mini.isNull(a) || a == "") && (mini.isNull(b) || b == "")) return true;
        }

        if (a && b && a.getFullYear && b.getFullYear) return a.getTime() === b.getTime();

        if (typeof a == 'object' && typeof b == 'object') {
            return a === b;
        }

        return String(a) === String(b);
    },
    forEach: function(array, method, scope) {
        var list = array.clone();
        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            if (method.call(scope, o, i, array) === false) break;
        }
    },
    defaults: function(obj, defaults) {
        if (typeof obj !== 'object') {
            if (typeof obj === 'undefined') {
                return defaults;
            } else {
                return obj;
            }
        } else {
            var defaultObjs = [].slice.call(arguments, 1);
            for (var i = defaultObjs.length - 1; i >= 0; i--) {
                var defo = defaultObjs[i];
                for (var j in defo) {
                    if (obj[j] === undefined) {
                        obj[j] = defo[j];
                    }
                }
            }

            return obj;
        }
        // _.defaults
    },
    values: function(obj) {
        if (mini.isArray(obj)) {
            return obj;
        } else {
            var tmp = [];
            $.map(obj, function(val, key) {
                tmp.push(val);
            });
            return tmp;
        }
    },
    merge: function(coll, newColl, id) {
        coll = mini.clone(coll);
        newColl = newColl || [];
        id = id || 'id';
        var exColl = [];
        for (var i = 0; i < newColl.length; i++) {
            var idValue = newColl[i][id];
            var finded = false;
            for (var j = 0; j < coll.length; j++) {
                if (idValue == coll[j][id]) {
                    coll[j] = $.extend(true, {}, coll[j], newColl[i]);
                    finded = true;
                }
            }
            if (!finded) {
                exColl.push(newColl[i]);
            }
        }
        return coll.concat(exColl);
    },
    sort: function(array, fn, scope) {
        scope = scope || array;


        function sort(array, func) {
            var i = 0,
                len = array.length,
                j, d;
            for (; i < len; i++) {
                for (j = i; j < len; j++) {
                    var a = array[i],
                        b = array[j];
                    var r = func(a, b);
                    if (r > 0) {

                        array.removeAt(j);
                        array.insert(i, b);

                    }
                }
            }
            return array;
        }

        sort(array, fn);
    },


    elWarp: document.createElement("div")


};


if (typeof mini_debugger == "undefined") {
    mini_debugger = true;
}
if (typeof mini_useShims == "undefined") {
    mini_useShims = false;
}
if (typeof mini_ajaxAsyncInvoke == "undefined") {
    mini_ajaxAsyncInvoke = true;
}


if (typeof mini_searchField == "undefined") {
    mini_searchField = "key";
}








mini_regClass = function(clazz, className) {
    className = className.toLowerCase();
    if (!mini.classes[className]) {
        mini.classes[className] = clazz;
        clazz.prototype.type = className;
    }
    var uiCls = clazz.prototype.uiCls;
    if (!mini.isNull(uiCls) && !mini.uiClasses[uiCls]) {
        mini.uiClasses[uiCls] = clazz;
    }
}
mini_extend = function(newClass, sp, overrides) {
    if (typeof sp != 'function') return this;

    var sb = newClass,
        sbp = sb.prototype,
        spp = sp.prototype;
    if (sb.superclass == spp) return;
    sb.superclass = spp;
    sb.superclass.constructor = sp;

    for (var p in spp) {
        sbp[p] = spp[p];
    }
    if (overrides) {
        for (var p in overrides) {
            sbp[p] = overrides[p];
        }
    }
    return sb;
}

function rel_method(target, source, methods) {
    if (typeof methods == 'string') {
        methods = [methods];
    }
    mini.forEach(methods, function(method, index) {
        if (typeof source[method] == 'function') {
            target[method] = function() {
                return source[method].apply(source, arguments);
            }
        }
    })
}



var bindAll = function(obj) {
    var i, length = arguments.length,
        key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
        key = arguments[i];
        obj[key] = obj[key] && obj[key].bind(obj);
    }
    return obj;
};


var extendMethod = function(to, from, methodName, upScope) {
    // if the method is defined on from ...
    if (!mini.isUndefined(from[methodName])) {
        var old = to[methodName];
        if (old)
            // ... we create a new function on to
            to[methodName] = function() {
                // wherein we first call the method which exists on `to`
                var oldReturn = old.apply(this, arguments);
                // and then call the method on `from`
                var newReturn = from[methodName].apply(this, arguments);
                // and then return the expected result,
                // i.e. what the method on `to` returns
                //$.isFunction(upScope)  && upScope.apply(this, arguments);
                if (mini.isObject(newReturn)) { // only check the mixin obj
                    return mini.copyTo(oldReturn, newReturn); // special for serialize return data method
                }
                return oldReturn;
            };
        else
            to[methodName] = from[methodName];
    }
}


var viewMixin = function(to) {
    var mixins = [].slice.call(arguments, 1) // slice(1)
    if (mixins.length) {
        mini.forEach(mixins, function(from, key) {
            // we add those methods which exists on `from` but not on `to` to the latter
            // we then extend `to`'s `initialize`
            //mini.extendMethod(to, from, "initialize");
            mini.copyTo(to, from);
        })
    }
};

function flashChecker() {
    var hasFlash = 0; //是否安装了flash
    var flashVersion = 0; //flash版本
    if (document.all) {
        var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
        if (swf) {
            hasFlash = 1;
            VSwf = swf.GetVariable("$version");
            flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
        }
    } else {
        if (navigator.plugins && navigator.plugins.length > 0) {
            var swf = navigator.plugins["Shockwave Flash"];
            if (swf) {
                hasFlash = 1;
                var words = swf.description.split(" ");
                for (var i = 0; i < words.length; ++i) {
                    if (isNaN(parseInt(words[i]))) continue;
                    flashVersion = parseInt(words[i]);
                }
            }
        }
    }
    return {
        f: hasFlash,
        v: flashVersion
    };
}

function bytesToSize(bytes) {
    if (bytes === 0) return '0 B';
    var k = 1024,
        sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
       i = Math.floor(Math.log(bytes) / Math.log(k));

    return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
}


mini.copyTo(mini, {
    extend: mini_extend,
    extendMethod: extendMethod,
    viewMixin: viewMixin,
    regClass: mini_regClass,
    relMethod: rel_method,
    bindAll: bindAll,
    flashChecker: flashChecker,
    bytesToSize: bytesToSize,
    debug: false
});


mini.namespace = function(names) {
    if (typeof names != "string") return;
    names = names.split(".");
    var parent = window;
    for (var i = 0, l = names.length; i < l; i++) {
        var name = names[i];
        var obj = parent[name];
        if (!obj) {
            obj = parent[name] = {};
        }
        parent = obj;
    }
}


mini.result = function(obj, name) {
    if (typeof obj[name] == 'function') {
        return obj[name].call(obj);
    } else {
        return obj[name];
    }
}

mini._BindCallbacks = [];
mini._BindEvents = function(fn, scope) {
    mini._BindCallbacks.push([fn, scope]);
    if (!mini._EventTimer) {
        mini._EventTimer = setTimeout(function() {
            mini._FireBindEvents();
        }, 50);
    }
}
mini._FireBindEvents = function() {
    for (var i = 0, l = mini._BindCallbacks.length; i < l; i++) {
        var e = mini._BindCallbacks[i];
        e[0].call(e[1]);
    }
    mini._BindCallbacks = [];
    mini._EventTimer = null;
}

mini._getFunctoin = function(fnName) {
    if (typeof fnName != "string") return null;
    // '$proper["proper_1"].onActionParamRenderer'  ==> "$proper.proper_1.onActionParamRenderer"
    var names = fnName.replace(/\[(["'])([a-zA-Z0-9\$_]+)\1\]/g, ".$2").split(".");
    var fn = null;
    for (var i = 0, l = names.length; i < l; i++) {
        var name = names[i];
        if (!fn) fn = window[name];
        else fn = fn[name];
        if (!fn) break;
    }
    return fn;
}

mini._getMap = function(name, obj) {
    if (!name || !obj) return null;
    var v = obj[name];
    if (v !== undefined) return v;
    var index = name.indexOf(".");
    if (index == -1 && name.indexOf("[") == -1) return obj[name];
    if (index == (name.length - 1)) return obj[name];
    var s = "obj." + name;
    try {
        v = eval(s);
    } catch (e) {
        return null;
    }
    return v;
}
mini._setMap = function(name, value, obj) {
    if (!obj) return;
    if (typeof name != "string") return;

    var names = name.split(".");

    function createArray(obj, name, num, defaultValue) {
        var arr = obj[name];
        if (!arr) {
            arr = obj[name] = [];
        }
        for (var i = 0; i <= num; i++) {
            var arrObj = arr[i];
            if (!arrObj) {
                if (defaultValue === null || defaultValue === undefined) {
                    arrObj = arr[i] = {};
                } else {
                    arrObj = arr[i] = defaultValue;
                }
            }
        }
        return obj[name][num];
    }

    var obj2 = null;
    for (var i = 0, l = names.length; i <= l - 1; i++) {
        var name = names[i];

        if (i == l - 1) {
            if (name.indexOf(']') == -1) {
                obj[name] = value;
            } else {

                var as = name.split("[");
                var n1 = as[0],
                    n2 = parseInt(as[1]);
                createArray(obj, n1, n2, "");
                obj[n1][n2] = value;
            }

            break;
        }

        if (name.indexOf(']') == -1) {

            obj2 = obj[name];
            if (i <= l - 2 && obj2 == null) {
                obj[name] = obj2 = {};
            }
            obj = obj2;
        } else {

            var as = name.split("[");
            var n1 = as[0],
                n2 = parseInt(as[1]);
            obj = createArray(obj, n1, n2);

        }

    }
    return value;
}





mini.pick = function(obj, arr) {
    obj || (obj = {});
    if (mini.isArray(obj)) {
        var results = [];
        for (var j = 0; j < obj.length; j++) {
            var result = {};
            var item = obj[j];
            for (var i = arr.length - 1; i >= 0; i--) {
                var alias = arr[i].split(':');
                if (alias.length == 2) {
                    if (item[alias[0]] !== undefined) {
                        result[alias[1]] = item[alias[0]];
                    }
                } else {
                    if (item[arr[i]]) {
                        result[arr[i]] = item[arr[i]];
                    }
                }
            }
            results.push(result);
        }
        return results;
    } else {
        var result = {};
        for (var i = arr.length - 1; i >= 0; i--) {
            var alias = arr[i].split(':');
            if (alias.length == 2) {
                if (obj[alias[0]] !== undefined) {
                    result[alias[1]] = obj[alias[0]];
                }
            } else {
                if (obj[arr[i]] !== undefined) {
                    result[arr[i]] = obj[arr[i]];
                }
            }
        }
        return result;
    }
}

mini.pluck = function(arr, key) {
    return arr.map(function(item) {
        return item[key];
    })
}


mini.renameKeys = function(obj, prefix, remove) {
    remove === undefined && (remove = true);
    var re = {};
    if (typeof prefix == 'function') {
        for (var i in obj) {
            var nkey = prefix(i, obj[i], obj);
            re[nkey] = obj[i];
        }
    } else {
        if (remove) {
            for (var i in obj) {
                re[i.replace(prefix, '')] = obj[i];
            }
        } else {
            for (var i in obj) {
                re[prefix + i] = obj[i];
            }
        }
    }
    return re;
}




mini.now = Date.now || function() {
    return new Date().getTime();
}
// Delays a function for the given number of milliseconds, and then calls
// it with the arguments supplied.
// mini.delay = function(func, wait) {
//     var args = slice.call(arguments, 2);
//     return setTimeout(function() {
//         return func.apply(null, args);
//     }, wait);
// };
mini.delay = function(func, wait) {
    var timer;
    return function() {
        var args = [].slice.call(arguments, 0);
        if (timer) {
            clearTimeout(timer)
        };
        timer = setTimeout(function() {
            return func.apply(null, args);
        }, wait);
    }
}
// Returns a function, that, when invoked, will only be triggered at most once
// during a given window of time. Normally, the throttled function will run
// as much as it can, without ever going more than once per `wait` duration;
// but if you'd like to disable the execution on the leading edge, pass
// `{leading: false}`. To disable execution on the trailing edge, ditto.
mini.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
        previous = options.leading === false ? 0 : mini.now();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
    };
    return function() {
        var now = mini.now();
        if (!previous && options.leading === false) previous = now;
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
            if (timeout) {
                clearTimeout(timeout);
                timeout = null;
            }
            previous = now;
            result = func.apply(context, args);
            if (!timeout) context = args = null;
        } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
        }
        return result;
    };
};
// Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds. If `immediate` is passed, trigger the function on the
// leading edge, instead of the trailing.
mini.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;
    var later = function() {
        var last = mini.now() - timestamp;
        if (last < wait && last >= 0) {
            timeout = setTimeout(later, wait - last);
        } else {
            timeout = null;
            if (!immediate) {
                result = func.apply(context, args);
                if (!timeout) context = args = null;
            }
        }
    };
    return function() {
        context = this;
        args = arguments;
        timestamp = mini.now();
        var callNow = immediate && !timeout;
        if (!timeout) timeout = setTimeout(later, wait);
        if (callNow) {
            result = func.apply(context, args);
            context = args = null;
        }
        return result;
    };
};





mini.getAndCreate = function(id) {
    if (!id) return null;
    if (typeof id == "string") return mini.components[id];

    if (typeof id == "object") {
        if (mini.isControl(id)) {
            return id;
        } else if (mini.isElement(id)) {
            return mini.uids[id.uid];
        } else {
            return mini.create(id);
        }
    }
    return null;
};
mini.create = function(uiConfig) {
    if (!uiConfig) return null;
    if (mini.get(uiConfig.id) === uiConfig) return uiConfig;
    var clazz = this.getClass(uiConfig.type);
    if (!clazz) return null;
    var ui = new clazz();
    ui.set(uiConfig);
    return ui;
}

var eventSplitter = /\s+/;
mini.Component = function() {
    this._events = {};

    this.uid = mini.newId(this._idPre);
    this._id = this.uid;
    if (!this.id) {
        this.id = this.uid;
    }
    mini.reg(this);


}
mini.Component.prototype = {
    isControl: true,
    id: null,
    _idPre: "mini-",
    _idSet: false,
    _canFire: true,









    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }
        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var renderTo = kv.renderTo || kv.render;
        delete kv.renderTo;
        delete kv.render;

        for (var key in kv) {
            if (key.toLowerCase().indexOf('on') == 0) {
                if (this["_$" + key]) continue;
                var fn = kv[key];
                this.on(key.substring(2, key.length).toLowerCase(), fn);
                delete kv[key];
            }
        }



        for (var key in kv) {
            var v = kv[key];
            var n = 'set' + key.charAt(0).toUpperCase() + key.substring(1, key.length);
            var setter = this[n];

            if (setter) {
                setter.call(this, v);
            } else {
                this[key] = v;
            }
        }

        if (renderTo && this.render) {
            this.render(renderTo);
        }

        this._allowLayout = _allowLayout;
        if (this.doLayout) this.doLayout();

        return this;
    },

    fire: function(type, event) {
        this._events || (this._events = {});
        if (this._canFire == false) return;
        type = type.toLowerCase();
        var handlers = this._events[type];
        if (handlers) {
            if (!event) event = {};
            if (event && event != this) {
                event.source = event.sender = this;
                if (!event.type) {
                    event.type = type;
                }
            }

            for (var i = 0, l = handlers.length; i < l; i++) {
                var listener = handlers[i];
                if (listener) {
                    listener[0].apply(listener[1], [event]);
                }
            }
        }
    },
    on: function(type, fn, scope) {
        this._events || (this._events = {});

        if (typeof fn == "string") {

            var f = mini._getFunctoin(fn);
            if (!f) {

                var id = mini.newId("__str_");
                window[id] = fn;

                eval("fn = function(e){var s = " + id + ";var fn = mini._getFunctoin(s); if(fn) {fn.call(this, e)}else{eval(s);}}");
            } else {
                fn = f;
            }
        }

        if (typeof fn != 'function' || !type) return false;
        type = type.toLowerCase();
        var names = type.split(eventSplitter);
        mini.forEach(names, function(type, index, arr) {
            var event = this._events[type];
            if (!event) {
                event = this._events[type] = [];
            }
            scope = scope || this;
            if (!this.findListener(type, fn, scope)) {
                event.push([fn, scope]);
            }
        }, this);
        return this;
    },
    un: function(type, fn, scope) {
        this._events || (this._events = {});
        type = type.toLowerCase();
        var names = type.split(eventSplitter);
        mini.forEach(names, function(type, index, arr) {
            var event = this._events[type];
            if (event) {
                if (fn) {
                    scope = scope || this;
                    var listener = this.findListener(type, fn, scope);
                    if (listener) {
                        event.remove(listener);
                    }
                } else {
                    delete this._events[type];
                }
            }
        }, this);
        return this;
    },
    findListener: function(type, fn, scope) {
        this._events || (this._events = {});
        type = type.toLowerCase();
        scope = scope || this;
        var handlers = this._events[type];
        if (handlers) {
            for (var i = 0, l = handlers.length; i < l; i++) {
                var listener = handlers[i];
                if (listener[0] === fn && listener[1] === scope) return listener;
            }
        }
    },



    setId: function(id) {
        if (!id) throw new Error("id not null");
        if (this._idSet) throw new Error("id just set only one");
        mini["unreg"](this);
        this.id = id;
        if (this.el) this.el.id = id;
        if (this._valueEl) this._valueEl.id = id + "$value";
        if (this._textEl) this._textEl.id = id + "$text";
        this._idSet = true;
        mini.reg(this);
    },
    getId: function() {
        return this.id;
    },
    destroy: function() {
        mini["unreg"](this);
        this.fire("destroy");

    }
}




mini.Control = function(el) {

    mini.Control.superclass.constructor.apply(this, arguments);

    this._create();
    this.el.uid = this.uid;

    this._initEvents();



    if (this._clearBorder) {
        this.el.style.borderWidth = "0";
    }
    this.addCls(this.uiCls);
    this.setWidth(this.width);
    this.setHeight(this.height);

    this.el.style.display = this.visible ? this._displayStyle : "none";

    if (el) mini.applyTo.call(this, el);
}
mini.extend(mini.Control, mini.Component, {
    jsName: null,
    recid: "",
    width: "",
    height: "",

    visible: true,
    readOnly: false,
    enabled: true,

    tooltip: "",

    _readOnlyCls: "mini-readonly",
    _disabledCls: "mini-disabled",

    _create: function() {
        this.el = document.createElement("div");
    },
    _initEvents: function() {},
    within: function(e) {

        if (mini.isAncestor(this.el, e.target)) return true;
        return false;
    },

    name: "",
    setName: function(value) {
        this.name = value;

    },
    getName: function() {
        return this.name;
    },
    setRecid: function(value) {
        this.recid = value;

    },
    getRecid: function() {
        return this.recid;
    },
    isMaxHeight: function() {
        var v = this.el.style.maxHeight;
        return parseInt(v) > 0;
    },
    isAutoHeight: function() {
        var v = this.el.style.height;
        return v == "auto" || v == "";
    },
    isAutoWidth: function() {
        var v = this.el.style.width;
        return v == "auto" || v == "";
    },
    isFixedSize: function() {




        var width = this.width;
        var height = this.height;
        if (parseInt(width) + "px" == width && parseInt(height) + "px" == height) return true;
        return false;
    },

    isRender: function(parentNode) {

        return !!(this.el && this.el.parentNode && this.el.parentNode.tagName);
    },
    render: function(parent, position) {
        if (typeof parent === 'string') {
            if (parent == "#body") parent = document.body;
            else parent = mini.byId(parent);
        }
        if (!parent) return;
        if (!position) position = "append";
        position = position.toLowerCase();

        if (position == "before") {
            jQuery(parent).before(this.el);
        } else if (position == "prepend") {
            jQuery(parent).prepend(this.el);
        } else if (position == "after") {
            jQuery(parent).after(this.el);
        } else {
            parent.appendChild(this.el);
        }


        this.el.id = this.id;

        this.doLayout();
        this.fire("render");
    },



    getEl: function() {
        return this.el;
    },
    setJsName: function(value) {
        this.jsName = value;
        window[value] = this;
    },
    getJsName: function() {
        return this.jsName;
    },

    setTooltip: function(value) {
        this.tooltip = value;
        this.el.title = value;

        if (this.tooltipPlacement) jQuery(this.el).attr("data-placement", this.tooltipPlacement);

    },
    getTooltip: function() {
        return this.tooltip;
    },
    _sizeChanged: function() {
        this.doLayout();
    },
    setWidth: function(value) {
        if (parseInt(value) == value) value += "px";
        this.width = value;
        this.el.style.width = value;
        this._sizeChanged();
    },
    getWidth: function(content) {

        var el = this.el;
        var w = content ? jQuery(el).width() : jQuery(el).outerWidth();
        if (content && this._borderEl) {
            var b2 = mini.getBorders(this._borderEl);
            w = w - b2.left - b2.right;
        }
        return w;
    },
    setHeight: function(value) {
        if (parseInt(value) == value) value += "px";
        this.height = value;
        this.el.style.height = value;
        this._sizeChanged();
    },
    getHeight: function(content) {
        var h = content ? jQuery(this.el).height() : jQuery(this.el).outerHeight();
        if (content && this._borderEl) {
            var b2 = mini.getBorders(this._borderEl);
            h = h - b2.top - b2.bottom;
        }
        return h;
    },
    getBox: function() {
        return mini.getBox(this.el);
    },
    setBorderStyle: function(value) {
        var el = this._borderEl || this.el;
        mini.setStyle(el, value);
        this.doLayout();
    },
    getBorderStyle: function() {
        return this.borderStyle;
    },
    _clearBorder: true,
    setStyle: function(value) {
        this.style = value;
        mini.setStyle(this.el, value);
        if (this._clearBorder) {
            this.el.style.borderWidth = "0";
            this.el.style.padding = "0px";
        }


        this.width = this.el.style.width;
        this.height = this.el.style.height;
        this._sizeChanged();
    },
    getStyle: function() {
        return this.style;
    },
    setCls: function(cls) {

        this.addCls(cls);
    },
    getCls: function() {
        return this.cls;
    },
    addCls: function(cls) {
        mini.addClass(this.el, cls);
    },
    removeCls: function(cls) {
        mini.removeClass(this.el, cls);
    },
    _doReadOnly: function() {
        if (this.readOnly) {
            this.addCls(this._readOnlyCls);
        } else {
            this.removeCls(this._readOnlyCls);
        }
    },
    setReadOnly: function(value) {
        this.readOnly = value;
        this._doReadOnly();
    },
    getReadOnly: function() {
        return this.readOnly;
    },
    getParent: function(uiCls) {
        var doc = document;
        var p = this.el.parentNode;
        while (p != doc && p != null) {
            var pcontrol = mini.get(p);
            if (pcontrol) {
                if (!mini.isControl(pcontrol)) return null;
                if (!uiCls || pcontrol.uiCls == uiCls) return pcontrol;
            }
            p = p.parentNode;
        }
        return null;
    },
    isReadOnly: function() {
        if (this.readOnly || !this.enabled) return true;
        var p = this.getParent();
        if (p) return p.isReadOnly();
        return false;
    },
    setEnabled: function(value) {
        this.enabled = value;
        if (this.enabled) {
            this.removeCls(this._disabledCls);
        } else {
            this.addCls(this._disabledCls);
        }
        this._doReadOnly();
    },
    getEnabled: function() {
        return this.enabled;
    },
    enable: function() {
        this.setEnabled(true);
    },
    disable: function() {
        this.setEnabled(false);
    },
    _displayStyle: "",
    setVisible: function(value) {
        this.visible = value;
        if (this.el) {
            this.el.style.display = value ? this._displayStyle : "none";
            if (value) {
                // this.el.style.zindex=2000;
            }
            this.doLayout();
        }
    },
    getVisible: function() {
        return this.visible;
    },
    show: function() {
        this.setVisible(true);
    },
    hide: function() {
        this.setVisible(false);
    },
    isDisplay: function(ignoresFn) {

        if (mini.WindowVisible == false || !this.el) return false;


        var doc = document.body;
        var p = this.el;
        while (1) {
            if (p == null || !p.style) return false;
            if (p && p.style && p.style.display == "none") {

                if (ignoresFn) {

                    if (ignoresFn(p) !== true) return false;
                } else return false;
            }
            if (p == doc) return true;

            p = p.parentNode;

        }
        return true;
    },

    _allowUpdate: true,
    beginUpdate: function() {
        this._allowUpdate = false;
    },
    endUpdate: function() {
        this._allowUpdate = true;
        this.doUpdate();
    },
    doUpdate: function() {

    },
    canLayout: function() {

        if (!mini.enableLayout) return false;
        if (this._allowLayout == false) return false;
        return this.isDisplay();
    },
    doLayout: function() {

    },
    layoutChanged: function() {
        if (this.canLayout() == false) return;
        this.doLayout();
    },
    _destroyChildren: function(removeEl) {
        if (this.el) {





            var cs = mini.getChildControls(this);
            for (var i = 0, l = cs.length; i < l; i++) {
                var control = cs[i];
                if (control.destroyed !== true) {
                    control.destroy(removeEl);
                }
            }
        }
    },
    destroy: function(removeEl) {

        if (this.destroyed !== true) {
            if (!mini._destroying) {
                this._destroyChildren(removeEl);
            }
        }

        if (this.el) {

            var el = this.el;
            el.onclick = el.ondblclick = el.onmousedown = el.onmouseup = el.onmousemove = el.onmouseover = el.onmouseout = el.onkeydown = el.onkeyup = el.oncontextmenu = null;

            mini.clearEvent(el);

            if (removeEl !== false) {

                mini.removeNode(el);


            }
        }
        this._borderEl = this._contentEl = this._valueEl = this._textEl = this._errorIconEl = null;
        this.el = null;
        mini["unreg"](this);
        this.destroyed = true;
        this.fire("destroy");
    },

    focus: function() {
        try {
            var me = this;

            me.el.focus();

        } catch (e) {};
    },
    select: function() {
        try {
            var me = this;

            me._textEl.select();

        } catch (e) {};
    },
    blur: function() {
        try {
            var me = this;

            me.el.blur();

        } catch (e) {};
    },

    allowAnim: true,
    setAllowAnim: function(value) {
        this.allowAnim = value;
    },
    getAllowAnim: function() {
        return this.allowAnim;
    },


    _getMaskWrapEl: function() {
        return this.el;
    },
    mask: function(options) {

        if (typeof options == "string") options = {
            html: options
        };
        options = options || {};
        options.el = this._getMaskWrapEl();
        if (!options.cls) options.cls = this._maskCls;

        mini.mask(options);

    },
    unmask: function() {
        mini.unmask(this._getMaskWrapEl());

        this.isLoading = false;
    },
    _maskCls: "mini-mask-loading",
    loadingMsg: "Loading...",
    loading: function(msg) {

        this.mask(msg || this.loadingMsg);
    },
    setLoadingMsg: function(value) {
        this.loadingMsg = value;
    },
    getLoadingMsg: function() {
        return this.loadingMsg;
    },

    _getContextMenu: function(value) {
        var ui = value;
        if (typeof value == "string") {
            ui = mini.get(value);
            if (!ui) {
                mini.parse(value);
                ui = mini.get(value);
            }
        } else if (mini.isArray(value)) {
            ui = {
                type: "menu",
                items: value
            };
        } else if (!mini.isControl(value)) {
            ui = mini.create(value);
        }
        return ui;
    },
    __OnHtmlContextMenu: function(e) {
        var ev = {
            popupEl: this.el,
            htmlEvent: e,
            cancel: false
        };
        this.contextMenu.fire("BeforeOpen", ev);
        if (ev.cancel == true) return;
        this.contextMenu.fire("opening", ev);
        if (ev.cancel == true) return;

        this.contextMenu.showAtPos(e.pageX, e.pageY);
        this.contextMenu.fire("Open", ev);
        return false;
    },
    contextMenu: null,
    setContextMenu: function(value) {
        var ui = this._getContextMenu(value);
        if (!ui) return;
        if (this.contextMenu !== ui) {
            this.contextMenu = ui;
            this.contextMenu.owner = this;
            mini.on(this.el, "contextmenu", this.__OnHtmlContextMenu, this);
        }
    },
    getContextMenu: function() {
        return this.contextMenu;
    },
    setDefaultValue: function(value) {
        this.defaultValue = value;
    },
    getDefaultValue: function() {
        return this.defaultValue;
    },
    setValue: function(value) {
        this.value = value;
    },
    getValue: function() {
        return this.value;
    },

    ajaxData: null,
    ajaxType: "",







    setAjaxData: function(value) {
        this.ajaxData = value;
    },
    getAjaxData: function() {
        return this.ajaxData;
    },
    setAjaxType: function(value) {
        this.ajaxType = value;
    },
    getAjaxType: function() {
        return this.ajaxType;
    },




    _afterApply: function(el) {





    },

    dataField: "",
    setDataField: function(value) {
        this.dataField = value;
    },
    getDataField: function() {
        return this.dataField;
    },
    tabIndex: 0,
    setTabIndex: function(value) {
        var el = this._textEl || this.el;
        el.tabIndex = value;
        this.tabIndex = value;
    },
    getTabIndex: function() {
        return this.tabIndex;
    },
    getAttrs: function(el) {




        var attrs = {};

        var cls = el.className;
        if (cls) attrs.cls = cls;

        if (el.value) attrs.value = el.value;
        mini._ParseString(el, attrs, ["id", "name", "width", "height", "borderStyle", "value", "defaultValue", "tabIndex",
            "contextMenu", "tooltip", "ondestroy", "data-options", "ajaxData", "ajaxType", "dataField", "ajaxOptions", "data-placement", "recid"

        ]);
        if (attrs["data-placement"]) this.tooltipPlacement = attrs["data-placement"];


        if (attrs["recid"]) {

            //debugger;
        }


        mini._ParseBool(el, attrs, ["visible", "enabled", "readOnly"]);

        if (el.readOnly && el.readOnly != "false") attrs.readOnly = true;

        var style = el.style.cssText;
        if (style) {
            attrs.style = style;
        }

        if (isIE9) {
            var bg = el.style.background;
            if (bg) {
                if (!attrs.style) attrs.style = "";
                attrs.style += ";background:" + bg;
            }
        }
        if (this.style) {
            if (attrs.style) attrs.style = this.style + ";" + attrs.style;
            else attrs.style = this.style;
        }
        if (this.borderStyle) {
            if (attrs.borderStyle) attrs.borderStyle = this.borderStyle + ";" + attrs.borderStyle;
            else attrs.borderStyle = this.borderStyle;
        }

        if (typeof attrs.ajaxOptions == "string") {
            attrs.ajaxOptions = eval('(' + attrs.ajaxOptions + ')');
        }





        var ts = mini._attrs;
        if (ts) {
            for (var i = 0, l = ts.length; i < l; i++) {
                var t = ts[i];
                var name = t[0];
                var type = t[1];
                if (!type) type = "string";
                if (type == "string") mini._ParseString(el, attrs, [name]);
                else if (type == "bool") mini._ParseBool(el, attrs, [name]);
                else if (type == "int") mini._ParseInt(el, attrs, [name]);
            }
        }


        var options = attrs["data-options"];
        if (options) {
            options = eval("(" + options + ")");
            if (options) {

                mini.copyTo(attrs, options);
            }
        }



        return attrs;
    }
});

mini._attrs = null;
mini.regHtmlAttr = function(attr, type) {
    if (!attr) return;
    if (!type) type = "string";
    if (!mini._attrs) mini._attrs = [];
    mini._attrs.push([attr, type]);
}






__mini_setControls = function(controls, contentEl, scope) {

    contentEl = contentEl || this._contentEl;
    scope = scope || this;
    if (!controls) controls = [];
    if (!mini.isArray(controls)) controls = [controls];


    for (var i = 0, l = controls.length; i < l; i++) {
        var c = controls[i];
        if (typeof c == "string") {
            if (c.indexOf("#") == 0) c = mini.byId(c);
        } else if (mini.isElement(c)) {} else {
            c = mini.getAndCreate(c);
            c = c.el;
        }
        if (!c) continue;

        mini.append(contentEl, c);


    }


    mini.parse(contentEl);
    scope.doLayout();
    return scope;
}

mini.Container = function() {
    mini.Container.superclass.constructor.apply(this, arguments);
    if (!this._contentEl) this._contentEl = this.el;
}
mini.extend(mini.Container, mini.Control, {




    setControls: __mini_setControls,
    getContentEl: function() {
        return this._contentEl;
    },
    getBodyEl: function() {
        return this._contentEl;
    },
    within: function(e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        var controls = mini.getChildControls(this);

        for (var i = 0, l = controls.length; i < l; i++) {
            var c = controls[i];

            if (c.within(e)) return true;
        }

        return false;
    }
});





mini.ValidatorBase = function() {
    mini.ValidatorBase.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.ValidatorBase, mini.Control, {
    required: false,
    requiredErrorText: "This field is required.",
    _requiredCls: "mini-required",

    errorText: "",
    _errorCls: "mini-error",
    _invalidCls: "mini-invalid",

    errorMode: "icon",
    validateOnChanged: true,
    validateOnLeave: true,
    trim: false,
    _IsValid: true,
    forceValidate: false,
    keyNavEnabled: true,
    indentSpace: false,
    _indentCls: "mini-indent",

    setForceValidate: function(value) {
        this.forceValidate = value
    },
    getForceValidate: function() {
        return this.forceValidate
    },
    setKeyNavEnabled: function(value) {
        this.keyNavEnabled = value
    },
    getKeyNavEnabled: function() {
        return this.keyNavEnabled
    },
    setIndentSpace: function(value) {
        if (value) {
            this.addCls(this._indentCls)
        } else {
            this.removeCls(this._indentCls)
        }
        this.indentSpace = value;
    },
    getIndentSpace: function() {
        return this.indentSpace;
    },

    isEditable: function() {
        if (this.readOnly || !this.allowInput || !this.enabled) return false;
        return true;
    },

    _tryValidate: function() {
        if (this.getTrim()) {
            var value = this.getValue();
            if (value != value.trim()) {
                this.setValue(value.trim());
            }
        }
        if (this._tryValidateTimer) clearTimeout(this._tryValidateTimer);
        var me = this;
        this._tryValidateTimer = setTimeout(function() {
            me.validate();
        }, 30);
    },
    validate: function() {






        var e = {
            value: this.getValue(),
            errorText: "",
            isValid: true
        };

        if (this.required) {
            if (mini.isNull(e.value) || String(e.value).trim() === "") {
                e.isValid = false;
                e.errorText = this.requiredErrorText;
            }
        }

        this.fire("validation", e);

        this.errorText = e.errorText;
        this.setIsValid(e.isValid);
        return this.isValid();
    },
    isValid: function() {
        return this._IsValid;
    },
    setIsValid: function(value) {

        this._IsValid = value;
        this.doUpdateValid();

    },
    getIsValid: function() {
        return this._IsValid;
    },
    setValidateOnChanged: function(value) {
        this.validateOnChanged = value;
    },
    getValidateOnChanged: function(value) {
        return this.validateOnChanged;
    },
    setValidateOnLeave: function(value) {
        this.validateOnLeave = value;
    },
    getValidateOnLeave: function(value) {
        return this.validateOnLeave;
    },

    setErrorMode: function(value) {
        if (!value) value = "none";
        this.errorMode = value.toLowerCase();
        if (this._IsValid == false) this.doUpdateValid();
    },
    getErrorMode: function() {
        return this.errorMode;
    },
    setErrorText: function(value) {
        this.errorText = value;
        if (this._IsValid == false) this.doUpdateValid();
    },
    getErrorText: function() {
        return this.errorText;
    },
    setRequired: function(value) {
        this.required = value;
        if (this.required) {
            this.addCls(this._requiredCls);
        } else {
            this.removeCls(this._requiredCls);
        }
    },
    getRequired: function() {
        return this.required;
    },
    setTrim: function(value) {
        this.trim = value;
    },
    getTrim: function() {
        return this.trim;
    },
    setRequiredErrorText: function(value) {
        this.requiredErrorText = value;
    },
    getRequiredErrorText: function() {
        return this.requiredErrorText;
    },
    errorIconEl: null,
    getErrorIconEl: function() {
        return this._errorIconEl;
    },
    _RemoveErrorIcon: function() {

    },
    doUpdateValid: function() {
        var me = this;
        me.__doUpdateValid();







    },
    errorTooltipPlacement: 'right',
    __doUpdateValid: function() {
        if (!this.el) return;
        this.removeCls(this._errorCls);
        this.removeCls(this._invalidCls);
        if (this.errorMode == "border") this.el.title = "";
        if (this._IsValid == false) {
            switch (this.errorMode) {
                case "icon":
                    this.addCls(this._errorCls);
                    var icon = this.getErrorIconEl();
                    if (icon) {
                        icon.title = this.errorText;
                        jQuery(icon).attr("data-placement", this.errorTooltipPlacement);
                    }
                    break;
                case "border":
                    this.addCls(this._invalidCls);
                    this.el.title = this.errorText;
                default:
                    this._RemoveErrorIcon();
                    break;
            }
        } else {
            this._RemoveErrorIcon();
        }
        this.doLayout();
    },
    doValueChanged: function() {
        this._OnValueChanged();
    },
    _OnValueChanged: function() {
        if (this.validateOnChanged) this._tryValidate();
        this.fire("valuechanged", {
            value: this.getValue(),
            oldValue: this._oldValue
        })
    },
    onValueChanged: function(fn, scope) {
        this.on("valuechanged", fn, scope);
    },
    onValidation: function(fn, scope) {
        this.on("validation", fn, scope);
    },
    getAttrs: function(el) {
        var attrs = mini.ValidatorBase.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["onvaluechanged", "onvalidation", "label", "labelStyle", "labelCls",
            "requiredErrorText", "errorMode", "errorTooltipPlacement"
        ]);

        mini._ParseBool(el, attrs, ["validateOnChanged", "validateOnLeave", "labelField", "indentSpace"]);

        var required = el.getAttribute("required");
        if (!required) required = el.required;
        if (!required) {
            var o = el.attributes["required"];
            if (o) {
                required = o.value == 'null' ? null : 'true';
            }
        }
        if (required) {
            attrs.required = required != "false" ? true : false;
        }


        var trim = el.getAttribute("trim");
        if (!trim) trim = el.trim;
        if (!trim) {
            var o = el.attributes["trim"];
            if (o) {
                trim = o.value == 'null' ? null : 'true';
            }
        }
        if (trim) {
            attrs.trim = trim != "false" ? true : false;
        }

        return attrs;
    },


    _labelLayout: function() {
        var border = this._borderEl;
        if (!border) return;

        this._labelLayouted = true;
        if (this.labelField) {
            var w = this._labelEl.offsetWidth;
            border.style["marginLeft"] = w + "px";
            this._doLabelLayout = w === 0;
        } else {
            border.style["marginLeft"] = 0;
        }
    },
    _labelFieldCls: 'mini-labelfield',
    labelField: false,
    label: '',
    labelStyle: '',
    labelCls: '',
    setLabelField: function(value) {
        if (this.labelField != value) {
            this.labelField = value;
            if (!this._borderEl) return;
            if (!this._labelEl) {
                this._labelEl = mini.append(this.el, '<label class="mini-labelfield-label"></label>');
                this._labelEl.innerHTML = this.label;
                mini.setStyle(this._labelEl, this.labelStyle);
            }
            this._labelEl.style.display = value ? 'block' : 'none';
            if (value) {
                mini.addClass(this.el, this._labelFieldCls);
            } else {
                mini.removeClass(this.el, this._labelFieldCls);
            }
            this._labelLayout();

        }
    },
    getLabelField: function() {
        return this.labelField;
    },
    setLabel: function(value) {
        if (this.label != value) {
            this.label = value;
            if (this._labelEl) this._labelEl.innerHTML = value;
            this._labelLayout();
        }
    },
    getLabel: function() {
        return this.label;
    },
    setLabelCls: function(value) {
        if (this.labelCls != value) {
            this.labelCls = value;
            if (this._labelEl) mini.addClass(this._labelEl, value);
            this._labelLayout();
        }
    },
    getLabelCls: function() {
        return this.labelCls;
    },
    setLabelStyle: function(value) {
        if (this.labelStyle != value) {
            this.labelStyle = value;
            if (this._labelEl) mini.setStyle(this._labelEl, value);
            this._labelLayout();
        }
    },
    getLabelStyle: function() {
        return this.labelStyle;
    }
});





mini.ListControl = function(el) {
    this.data = [];
    this._selecteds = [];
    mini.ListControl.superclass.constructor.call(this, null);
    this.doUpdate();

    if (el) mini.applyTo.call(this, el);
}
mini.ListControl.ajaxType = "get";
mini.extend(mini.ListControl, mini.ValidatorBase, {
    defaultValue: '',
    value: '',
    valueField: "id",
    textField: "text",
    dataField: "",
    delimiter: ',',

    data: null,
    url: "",

    valueInCheckOrder: true,
    _itemCls: "mini-list-item",
    _itemHoverCls: "mini-list-item-hover",
    _itemSelectedCls: "mini-list-item-selected",
    uiCls: "mini-list",
    name: "",
    _scrollViewEl: null,
    ajaxData: null,
    ajaxAsync: false,
    _selected: null,
    _selecteds: [],
    multiSelect: false,
    setValueInCheckOrder: function(value) {
        this.valueInCheckOrder = value;
    },
    getValueInCheckOrder: function() {
        return this.valueInCheckOrder;
    },



    doLayout: function() {
        if (this._doLabelLayout) {
            this._labelLayout();
        }
    },


    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var url = kv.url;
        delete kv.url;
        var data = kv.data;
        delete kv.data;

        mini.ListControl.superclass.set.call(this, kv);

        if (!mini.isNull(data)) {
            this.setData(data);
        }
        if (!mini.isNull(url)) {
            this.setUrl(url);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }

        return this;
    },


    _create: function() {

    },
    _initEvents: function() {
        mini._BindEvents(function() {
            mini_onOne(this.el, 'click', this.__OnClick, this);
            mini_onOne(this.el, 'dblclick', this.__OnDblClick, this);

            mini_onOne(this.el, 'mousedown', this.__OnMouseDown, this);
            mini_onOne(this.el, 'mouseup', this.__OnMouseUp, this);
            mini_onOne(this.el, 'mousemove', this.__OnMouseMove, this);
            mini_onOne(this.el, 'mouseover', this.__OnMouseOver, this);
            mini_onOne(this.el, 'mouseout', this.__OnMouseOut, this);

            mini_onOne(this.el, 'keydown', this.__OnKeyDown, this);
            mini_onOne(this.el, 'keyup', this.__OnKeyUp, this);

            mini_onOne(this.el, 'contextmenu', this.__OnContextMenu, this);









        }, this);
    },
    destroy: function(removeEl) {

        mini.ListControl.superclass.destroy.call(this, removeEl);
    },


    setName: function(value) {
        this.name = value;
        if (this._valueEl) mini.setAttr(this._valueEl, "name", this.name);
    },

    getItemByEvent: function(event) {
        var domItem = mini.findParent(event.target, this._itemCls);
        if (domItem) {

            var index = parseInt(mini.getAttr(domItem, "index"));

            return this.data[index];
        }
    },
    addItemCls: function(item, cls) {
        var itemEl = this.getItemEl(item);
        if (itemEl) mini.addClass(itemEl, cls);
    },
    removeItemCls: function(item, cls) {
        var itemEl = this.getItemEl(item);
        if (itemEl) mini.removeClass(itemEl, cls);
    },
    getItemEl: function(item) {
        item = this.getItem(item);
        var index = this.data.indexOf(item);
        var id = this._createItemId(index);
        return document.getElementById(id);
    },
    _focusItem: function(item, view) {

        item = this.getItem(item);
        if (!item) return;
        var dom = this.getItemEl(item);
        if (view && dom) {
            this.scrollIntoView(item);
        }
        if (this._focusedItem == item) {
            if (dom) mini.addClass(dom, this._itemHoverCls);
            return;
        }
        this._blurItem();
        this._focusedItem = item;
        if (dom) mini.addClass(dom, this._itemHoverCls);
    },
    _blurItem: function() {
        if (!this._focusedItem) return;

        var dom = this.getItemEl(this._focusedItem);
        if (dom) {
            mini.removeClass(dom, this._itemHoverCls);
        }
        this._focusedItem = null;
    },
    getFocusedItem: function() {
        var row = this._focusedItem;
        return this.indexOf(row) == -1 ? null : row;
    },
    getFocusedIndex: function() {
        return this.data.indexOf(this._focusedItem);
    },

    scrollIntoView: function(item) {
        try {
            var itemEl = this.getItemEl(item);
            var _scrollViewEl = this._scrollViewEl || this.el;
            mini.scrollIntoView(itemEl, _scrollViewEl, false);
        } catch (e) {}
    },

    getItem: function(item) {
        if (typeof item == "object") return item;
        if (typeof item == "number") return this.data[item];
        return this.findItems(item)[0];
    },
    getCount: function() {
        return this.data.length;
    },
    indexOf: function(item) {
        return this.data.indexOf(item);
    },
    getAt: function(index) {
        return this.data[index];
    },
    updateItem: function(item, options) {
        item = this.getItem(item);
        if (!item) return;
        mini.copyTo(item, options);
        this.doUpdate();
    },
    load: function(data) {
        if (typeof data == "string") this.setUrl(data);
        else this.setData(data);
    },
    loadData: function(data) {
        this.setData(data);
    },
    setData: function(data) {
        if (typeof data == "string") {
            data = eval(data);
        }
        if (!mini.isArray(data)) data = [];
        this.data = data;






        this.doUpdate();

        if (this.value != "") {
            this.deselectAll();
            var records = this.findItems(this.value);
            this.selects(records);
        }
    },
    getData: function() {
        return this.data.clone();
    },
    setUrl: function(url) {

        this.url = url;
        this._doLoad({});

    },
    getUrl: function() {
        return this.url;
    },

    setAjaxAsync: function(value) {
        this.ajaxAsync = value;
    },
    _doLoad: function(params) {

        try {
            var url = eval(this.url);
            if (url != undefined) {
                this.url = url;
            }
        } catch (e) {}
        var url = this.url;

        var ajaxMethod = mini.ListControl.ajaxType;
        if (url) {
            if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
                ajaxMethod = "get";
            }
        }

        var obj = mini._evalAjaxData(this.ajaxData, this);
        mini.copyTo(params, obj);

        var e = {
            url: this.url,
            async: this.ajaxAsync, // @modify
            type: this.ajaxType ? this.ajaxType : ajaxMethod,
            data: params,
            params: params,
            cache: false,
            cancel: false
        };
        jQuery.extend(true, e, this.ajaxOptions);
        this.fire("beforeload", e);
        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }
        if (e.cancel == true) return;

        var sf = me = this;
        var url = e.url;
        mini.copyTo(e, {
            success: function(text, textStatus, xhr) {
                delete e.params;
                var obj = {
                    text: text,
                    result: null,
                    sender: me,
                    options: e,
                    xhr: xhr
                };
                var result = null;
                try {
                    mini_doload(obj);
                    result = obj.result;
                    if (!result) {
                        result = mini.decode(text);
                    }
                } catch (ex) {
                    if (mini_debugger == true) {
                        alert(url + "\njson is error.");
                    }
                }
                if (mini.isArray(result)) result = {
                    data: result
                };
                if (sf.dataField) {
                    result.data = mini._getMap(sf.dataField, result);
                }
                if (!result.data) result.data = [];

                var ex = {
                    data: result.data,
                    cancel: false,
                    result: result
                }
                sf.fire("preload", ex);
                if (ex.cancel == true) return;

                sf.setData(ex.data);

                delete ex.cancel;
                sf.fire("load", ex);

                setTimeout(function() {
                    sf.doLayout();
                }, 100);

            },
            error: function(xhr, textStatus, errorThrown) {
                var e = {
                    xhr: xhr,
                    text: xhr.responseText,
                    textStatus: textStatus,
                    errorMsg: xhr.responseText,
                    errorCode: xhr.status
                };
                if (mini_debugger == true) {
                    alert(url + "\n" + e.errorCode + "\n" + e.errorMsg);
                }
                sf.fire("loaderror", e);
            }
        });

        this._ajaxer = mini.ajax(e);
    },
    setValue: function(value) {
        if (mini.isNull(value)) value = "";


        this.deselectAll();

        this.value = value;
        if (this._valueEl) this._valueEl.value = value;

        var records = this.findItems(this.value);
        this.selects(records);

        this.setSelected(records[0]);

    },
    getValue: function() {
        return this.value;
    },
    getFormValue: function() {
        return this.value;
    },
    setValueField: function(valueField) {
        this.valueField = valueField;
    },
    getValueField: function() {
        return this.valueField;
    },
    setTextField: function(value) {
        this.textField = value;
    },
    getTextField: function() {
        return this.textField;
    },
    getItemValue: function(item) {
        return String(mini._getMap(this.valueField, item));
    },
    getItemText: function(item) {
        var t = mini._getMap(this.textField, item);
        return mini.isNull(t) ? '' : String(t);
    },
    getValueAndText: function(records) {
        if (mini.isNull(records)) records = [];
        if (!mini.isArray(records)) {
            records = this.findItems(records);
        }


        if (this.valueInCheckOrder) {
            var data = this.getData();
            mini.sort(records, function(a, b) {
                var index1 = data.indexOf(a);
                var index2 = data.indexOf(b);
                if (index1 > index2) return 1;
                if (index1 < index2) return -1;
                return 0;
            });
        }

        var values = [];
        var texts = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            if (record) {
                values.push(this.getItemValue(record));
                texts.push(this.getItemText(record));
            }
        }
        return [values.join(this.delimiter), texts.join(this.delimiter)];
    },
    findItems: function(value) {
        if (mini.isNull(value) || value === "") return [];
        if (typeof value == 'function') {
            var fn = value;
            var items = [];
            var data = this.data;
            for (var j = 0, k = data.length; j < k; j++) {
                var record = data[j];
                if (fn(record, j) === true) {
                    items.push(record);
                }
            }
            return items;
        }

        var values = String(value).split(this.delimiter);

        var data = this.data;
        var valueRecords = {};
        for (var j = 0, k = data.length; j < k; j++) {
            var record = data[j];

            var v = mini._getMap(this.valueField, record);
            valueRecords[v] = record;
        }

        var records = [];
        for (var i = 0, l = values.length; i < l; i++) {
            var v = values[i];
            var record = valueRecords[v];
            if (record) {
                records.push(record);
            }
        }
        return records;
    },
    removeAll: function() {
        var items = this.getData();
        this.removeItems(items);
    },
    addItems: function(items, index) {
        if (!mini.isArray(items)) return;
        if (mini.isNull(index)) index = this.data.length;
        this.data.insertRange(index, items);
        this.doUpdate();
    },
    addItem: function(item, index) {
        if (!item) return;
        if (this.data.indexOf(item) != -1) return;
        if (mini.isNull(index)) index = this.data.length;
        this.data.insert(index, item);
        this.doUpdate();
    },
    removeItems: function(items) {
        if (!mini.isArray(items)) return;
        this.data.removeRange(items);

        this._checkSelecteds();
        this.doUpdate();
    },
    removeItem: function(item) {
        var index = this.data.indexOf(item);
        if (index != -1) {
            this.data.removeAt(index);
            this._checkSelecteds();
            this.doUpdate();
        }
    },
    moveItem: function(item, index) {
        if (!item || !mini.isNumber(index)) return;


        if (index < 0) index = 0;
        if (index > this.data.length) index = this.data.length;
        this.data.remove(item);

        this.data.insert(index, item);
        this.doUpdate();
    },
    _isSelectedAll: function() {
        var me = this,
            data = this.getData();
        for (var i = 0, len = data.length; i < len; i++) {
            var item = data[i];
            if (item.enabled !== false)
                if (!me.isSelected(item)) return false
        }
        return true
    },
    _checkSelecteds: function() {
        for (var i = this._selecteds.length - 1; i >= 0; i--) {
            var record = this._selecteds[i];
            if (this.data.indexOf(record) == -1) {
                this._selecteds.removeAt(i);
            }
        }
        var vts = this.getValueAndText(this._selecteds);
        this.value = vts[0];
        if (this._valueEl) this._valueEl.value = this.value;
    },
    setMultiSelect: function(value) {
        this.multiSelect = value;
    },
    getMultiSelect: function() {
        return this.multiSelect;
    },
    isSelected: function(record) {
        if (!record) return false;
        return this._selecteds.indexOf(record) != -1;
    },
    getSelecteds: function() {
        var arr = this._selecteds.clone();
        var me = this;



        if (this.valueInCheckOrder) {
            mini.sort(arr, function(a, b) {
                var index1 = me.indexOf(a);
                var index2 = me.indexOf(b);
                if (index1 > index2) return 1;
                if (index1 < index2) return -1;
                return 0;
            });
        }
        return arr;
    },
    setSelected: function(record) {
        if (record) {
            this._selected = record;
            this.select(record);
        }
    },
    getSelected: function() {
        return this._selected;
    },
    select: function(record) {
        record = this.getItem(record);
        if (!record) return;
        if (this.isSelected(record)) return;
        this._selected = record;
        this.selects([record]);
    },
    deselect: function(record) {
        record = this.getItem(record);
        if (!record) return;
        if (!this.isSelected(record)) return;
        this.deselects([record]);
    },
    selectAll: function() {
        var data = this.data.clone();
        this.selects(data);
    },
    deselectAll: function() {
        this.deselects(this._selecteds);
    },
    clearSelect: function() {
        this.deselectAll();
    },
    selects: function(records) {
        if (!records || records.length == 0) return;
        records = records.clone();
        if (this.multiSelect == false && records.length > 1) {
            records.length = 1;
        }
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            if (!this.isSelected(record)) {
                this._selecteds.push(record);
            }
        }
        var me = this;

        me._doSelects();

    },
    deselects: function(records) {
        if (!records || records.length == 0) return;
        records = records.clone();
        for (var i = records.length - 1; i >= 0; i--) {
            var record = records[i];
            if (this.isSelected(record)) {
                this._selecteds.remove(record);
            }
        }

        var me = this;

        me._doSelects();

    },
    _doSelects: function() {
        var vts = this.getValueAndText(this._selecteds);
        this.value = vts[0];
        if (this._valueEl) this._valueEl.value = this.value;

        for (var i = 0, l = this.data.length; i < l; i++) {
            var record = this.data[i];
            var select = this.isSelected(record);
            if (select) {
                this.addItemCls(record, this._itemSelectedCls);
            } else {
                this.removeItemCls(record, this._itemSelectedCls);
            }

            var index = this.data.indexOf(record);
            var id = this._createCheckId(index);

            var checkbox = mini.byId(id, this.el);
            if (checkbox) checkbox.checked = !!select;
        }
    },
    _OnSelectionChanged: function(records, select) {
        var vts = this.getValueAndText(this._selecteds);
        this.value = vts[0];
        if (this._valueEl) this._valueEl.value = this.value;

        var e = {
            selecteds: this.getSelecteds(),
            selected: this.getSelected(),
            value: this.getValue()
        };
        this.fire("SelectionChanged", e);
    },
    _createCheckId: function(index) {
        return this.uid + "$ck$" + index;
    },
    _createItemId: function(index) {
        return this.uid + "$" + index;
    },


    __OnClick: function(e) {
        if (this._clickTime)
            if (new Date() - this._clickTime < 100) return;
        this._clickTime = new Date();
        this._fireEvent(e, 'Click');
    },
    __OnDblClick: function(e) {
        this._fireEvent(e, 'Dblclick');
    },
    __OnMouseDown: function(e) {
        this._fireEvent(e, 'MouseDown');
    },
    __OnMouseUp: function(e) {
        this._fireEvent(e, 'MouseUp');
    },
    __OnMouseMove: function(e) {
        this._fireEvent(e, 'MouseMove');
    },
    __OnMouseOver: function(e) {
        this._fireEvent(e, 'MouseOver');
    },
    __OnMouseOut: function(e) {
        this._fireEvent(e, 'MouseOut');
    },
    __OnKeyDown: function(e) {
        this._fireEvent(e, 'KeyDown');
    },
    __OnKeyUp: function(e) {
        this._fireEvent(e, 'KeyUp');
    },
    __OnContextMenu: function(e) {
        this._fireEvent(e, 'ContextMenu');
    },
    _fireEvent: function(e, name) {
        if (!this.enabled) return;


        var item = this.getItemByEvent(e);
        if (!item) return;
        var fn = this['_OnItem' + name];
        if (fn) {
            fn.call(this, item, e);
        } else {
            var eve = {
                item: item,
                htmlEvent: e
            };
            this.fire("item" + name, eve);
        }
    },
    setAllowDeselect: function(value) {
        this.allowDeselect = value
    },
    getAllowDeselect: function() {
        return this.allowDeselect
    },
    _OnItemClick: function(item, e) {

        if (this.isReadOnly() || this.enabled == false || item.enabled === false) {
            e.preventDefault();
            return;
        }

        var value = this.getValue();

        var ev = {
            item: item,
            htmlEvent: e,
            cancel: false
        };

        this.fire("beforeselect", ev);
        var ec = {
            item: item,
            htmlEvent: e,
            cancel: false
        };
        this.fire("beforeitemclick", ec);
        if (ec.cancel) return;
        if (ev.cancel == false) {

            if (this.multiSelect) {
                if (this.isSelected(item)) {
                    this.deselect(item);
                    if (this._selected == item) {
                        this._selected = null;
                    }
                } else {
                    this.select(item);
                    this._selected = item;
                }

                if (item.__NullItem) {
                    this.deselectAll();
                    this._selected = null;
                }

                this._OnSelectionChanged();
            } else if (!this.isSelected(item)) {
                this.deselectAll();
                this.select(item);
                this._selected = item;
                this._OnSelectionChanged();

            } else if (this.allowDeselect && this.multiSelect == false) {
                this.deselectAll();
                this._OnSelectionChanged()
            }

            if (value != this.getValue()) {
                this._OnValueChanged();
            }

        }

        var e = {
            item: item,
            htmlEvent: e
        };
        this.fire("itemclick", e);
    },
    _blurOnOut: true,
    _OnItemMouseOut: function(item, e) {

        if (!this.enabled) return;
        if (this._blurOnOut) {
            this._blurItem();
        }
        var e = {
            item: item,
            htmlEvent: e
        };
        this.fire("itemmouseout", e);
    },
    _OnItemMouseMove: function(item, e) {

        if (!this.enabled || item.enabled === false) return;

        this._focusItem(item);
        var e = {
            item: item,
            htmlEvent: e
        };
        this.fire("itemmousemove", e);
    },
    onItemClick: function(fn, scope) {
        this.on("itemclick", fn, scope);
    },
    onItemMouseDown: function(fn, scope) {
        this.on("itemmousedown", fn, scope);
    },
    onBeforeLoad: function(fn, scope) {
        this.on("beforeload", fn, scope);
    },
    onLoad: function(fn, scope) {
        this.on("load", fn, scope);
    },
    onLoadError: function(fn, scope) {
        this.on("loaderror", fn, scope);
    },
    onPreLoad: function(fn, scope) {
        this.on("preload", fn, scope);
    },

    getAttrs: function(el) {
        var attrs = mini.ListControl.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["url", "data", "value", "textField", "valueField",
            "onitemclick", "onitemmousemove", "onselectionchanged", "onitemdblclick",
            "onbeforeload", "onload", "onloaderror", "ondataload", "onbeforeselect",
            "delimiter"
        ]);
        mini._ParseBool(el, attrs, ["multiSelect", "valueInCheckOrder", "allowDeselect"]);

        var valueField = attrs.valueField || this.valueField;
        var textField = attrs.textField || this.textField;
        if (el.nodeName.toLowerCase() == "select") {
            var data = [];
            for (var i = 0, l = el.length; i < l; i++) {
                var op = el.options[i];
                var o = {};
                o[textField] = op.text;
                o[valueField] = op.value;

                data.push(o);
            }
            if (data.length > 0) {
                attrs.data = data;
            }
        }

        return attrs;
    }
});


mini._Layouts = {};
mini.layout = function(el, mustLayout) {
    if (!mini.enableLayout) return;




    if (!document.body) return;



    function doLayout(el) {
        if (!el) return;
        var control = mini.get(el);
        if (control) {


            if (control.doLayout) {
                if (!mini._Layouts[control.uid]) {
                    mini._Layouts[control.uid] = control;







                    if (mustLayout !== false || control.isFixedSize() == false) {
                        control.doLayout(false);
                    }

                    delete mini._Layouts[control.uid];
                }
            }
        } else {
            var cs = el.childNodes;
            if (cs) {
                for (var i = 0, l = cs.length; i < l; i++) {
                    var cel = cs[i];


                    try {
                        cel.toString();
                    } catch (ex) {
                        continue;
                    }

                    doLayout(cel);
                }
            }
        }
    }

    if (!el) el = document.body;






    doLayout(el);

    if (el == document.body) {
        mini.layoutIFrames();
    }
}



mini.applyTo = function(el) {
    el = mini.byId(el);
    if (!el) return this;
    if (mini.get(el)) throw new Error("not applyTo a mini control");



    var config = this.getAttrs(el);
    delete config._applyTo;

    if (mini.isNull(config.defaultValue) && !mini.isNull(config.value)) {
        config.defaultValue = config.value;
    }

    if (mini.isNull(config.defaultText) && !mini.isNull(config.text)) {
        config.defaultText = config.text;
    }

    var p = el.parentNode;
    if (p && this.el != el) {




        p.replaceChild(this.el, el);




    }

    if (window._mini_set) _mini_set(config, this);

    this.set(config);




    this._afterApply(el);

    return this;
}
mini._doParse = function(el) {
    if (!el) return;



    var nodeName = el.nodeName.toLowerCase();
    if (!nodeName) return;

    var className = String(el.className);
    if (className) {
        var control = mini.get(el);
        if (!control) {
            var classes = className.split(" ");
            for (var i = 0, l = classes.length; i < l; i++) {
                var cls = classes[i];
                var clazz = mini.getClassByUICls(cls);
                if (clazz) {
                    mini.removeClass(el, cls);
                    var ui = new clazz();

                    mini.applyTo.call(ui, el);
                    el = ui.el;
                    break;
                }
            }
        }
    }

    if (nodeName == "select" ||
        mini.hasClass(el, "mini-menu") ||
        mini.hasClass(el, "mini-datagrid") ||
        mini.hasClass(el, "mini-treegrid") ||
        mini.hasClass(el, "mini-tree") ||
        mini.hasClass(el, "mini-button") ||
        mini.hasClass(el, "mini-textbox") ||
        mini.hasClass(el, "mini-buttonedit")
    ) {
        return;
    }

    var children = mini.getChildNodes(el, true);
    for (var i = 0, l = children.length; i < l; i++) {
        var node = children[i];
        if (node.nodeType == 1) {
            if (node.parentNode == el) {
                mini._doParse(node);
            }
        }
    }
}
mini._Removes = [];
mini._firstParse = true;



mini.parse = function(el, layout) {

    mini.parsed = true;


    if (mini._firstParse) {

        mini._firstParse = false;

        var _doms = document.getElementsByTagName("iframe");
        var doms = [];
        for (var i = 0, l = _doms.length; i < l; i++) {
            var d = _doms[i];
            doms.push(d);
        }

        for (var i = 0, l = doms.length; i < l; i++) {
            var d = doms[i];
            var src = jQuery(d).attr("src");
            if (!src) continue;

            d.loaded = false;

            d._onload = d.onload;
            d._src = src;
            d.onload = function() {};
            d.src = "";

        }
        setTimeout(function() {

            for (var i = 0, l = doms.length; i < l; i++) {
                var d = doms[i];

                if (d._src && jQuery(d).attr("src") == "") {
                    d.loaded = true;
                    d.onload = d._onload;
                    d.src = d._src;
                    d._src = d._onload = null;



                }
            }
        }, 20);

        setTimeout(function() {

            for (var i = 0, l = doms.length; i < l; i++) {
                var d = doms[i];
                var src = $(d).attr("data-src");
                if (src) {
                    d.src = src;
                }
            }
        }, 30);

    }

    if (typeof el == "string") {
        var id = el;
        el = mini.byId(id);
        if (!el) el = document.body;

    }
    if (el && !mini.isElement(el)) el = el.el;
    if (!el) el = document.body;


    var visible = mini.WindowVisible;
    if (isIE) {
        mini.WindowVisible = false;
    }

    mini._doParse(el);

    mini.WindowVisible = visible;

    if (layout !== false) {
        mini.layout(el);

    }
}

mini._ParseString = function(el, config, attrs) {
    for (var i = 0, l = attrs.length; i < l; i++) {
        var property = attrs[i];

        var value = mini.getAttr(el, property);
        if (value) {
            config[property] = value;
        }
    }
}
mini._ParseBool = function(el, config, attrs) {
    for (var i = 0, l = attrs.length; i < l; i++) {
        var property = attrs[i];
        var value = mini.getAttr(el, property);
        if (value) {
            config[property] = value == "true" ? true : false;
        }
    }
}
mini._ParseInt = function(el, config, attrs) {
    for (var i = 0, l = attrs.length; i < l; i++) {
        var property = attrs[i];

        var value = parseInt(mini.getAttr(el, property));
        if (!isNaN(value)) {
            config[property] = value;
        }
    }
}







mini._ParseColumns = function(el) {
    var columns = [];
    var cs = mini.getChildNodes(el);
    for (var i = 0, l = cs.length; i < l; i++) {
        var node = cs[i];
        var jq = jQuery(node);

        var column = {};

        var editor = null,
            filter = null;


        var subCs = mini.getChildNodes(node);
        if (subCs) {
            for (var ii = 0, li = subCs.length; ii < li; ii++) {
                var subNode = subCs[ii];
                var property = mini.getAttr(subNode, "property");
                if (!property) continue;
                property = property.toLowerCase();
                if (property == "columns") {
                    column.columns = mini._ParseColumns(subNode);
                    if (subNode.parentNode) subNode.parentNode.removeChild(subNode);
                }
                if (property == "editor" || property == "filter") {

                    var className = subNode.className;
                    var classes = className.split(" ");
                    for (var i3 = 0, l3 = classes.length; i3 < l3; i3++) {
                        var cls = classes[i3];
                        var clazz = mini.getClassByUICls(cls);
                        if (clazz) {
                            var ui = new clazz();

                            if (property == "filter") {
                                filter = ui.getAttrs(subNode);
                                filter.type = ui.type;
                            } else {
                                editor = ui.getAttrs(subNode);
                                editor.type = ui.type;
                                if (editor.type == "combobox" || editor.type == "treeselect") {
                                    editor.ajaxAsync = false;
                                }
                            }
                            break;
                        }
                    }

                    if (subNode.parentNode) subNode.parentNode.removeChild(subNode);
                }
            }
        }

        column.header = node.innerHTML;



        mini._ParseString(node, column, ["name", "header", "field", "editor", "filter", "renderer", "width", "type", "renderer",
            "headerAlign", "align", "headerCls", "cellCls", "headerStyle", "cellStyle", "displayField", "dateFormat", "listFormat", "mapFormat", "numberFormat",
            'trueValue', "falseValue", "dataType", 'vtype', "currencyUnit",
            "summaryType", "summaryRenderer", "groupSummaryType", "groupSummaryRenderer",
            "defaultValue", "defaultText", "decimalPlaces", "data-options", "sortField", "sortType",

            "emailErrorText", "urlErrorText", "floatErrorText", "intErrorText", "dateErrorText", 'evalErrorText',
            "minErrorText", "maxErrorText", "rangeLengthErrorText", "rangeErrorText", "rangeCharErrorText",
            "eqtoFieldErrorText"
        ]);
        mini._ParseBool(node, column, ["visible", "readOnly", "allowSort", "allowResize", "allowMove", "allowDrag", "autoShowPopup",
            "unique", "autoEscape", "enabled", "hideable", "showCellTip", "valueFromSelect", "navUpdown"
        ]);
        mini._ParseInt(node, column, ["minWidth"]);

        if (editor) column.editor = editor;
        if (filter) column.filter = filter;

        if (typeof(column.editor) == "string") {
            try {
                column.editor = eval("(" + column.editor + ")");
            } catch (e) {}
        }

        if (column.dataType) column.dataType = column.dataType.toLowerCase();

        if (column.defaultValue === "true") column.defaultValue = true;
        if (column.defaultValue === "false") column.defaultValue = false;

        columns.push(column);


        var options = column["data-options"];
        if (options) {
            options = eval("(" + options + ")");
            if (options) {

                mini.copyTo(column, options);
            }
        }
    }

    return columns;
}




mini._Columns = {};
mini._getColumn = function(columnType) {
    var columnFn = mini._Columns[columnType.toLowerCase()];
    if (!columnFn) return {};
    return columnFn();
}


mini.IndexColumn = function(config) {
    return mini.copyTo({
        ignoreCollapseIndex: false,
        width: 30,
        cellCls: "",
        align: "center",
        draggable: false,
        allowDrag: true,
        hideable: true,
        init: function(grid) {
            grid.on("addrow", this.__OnIndexChanged, this);
            grid.on("removerow", this.__OnIndexChanged, this);
            grid.on("moverow", this.__OnIndexChanged, this);



            if (grid.isTree) {

                grid.on("addnode", this.__OnIndexChanged, this);
                grid.on("removenode", this.__OnIndexChanged, this);
                grid.on("movenode", this.__OnIndexChanged, this);


                grid.on("loadnode", this.__OnIndexChanged, this);
                this._gridUID = grid.uid;
                this._rowIdField = "_id";
            }
        },
        getNumberId: function(record) {
            return this._gridUID + "$number$" + record[this._rowIdField];
        },
        createNumber: function(grid, rowIndex) {
            if (mini.isNull(grid.pageIndex)) {
                return rowIndex + 1;
            } else return (grid.pageIndex * grid.pageSize) + rowIndex + 1;
        },
        renderer: function(e) {
            var grid = e.sender;
            if (this.draggable) {
                if (!e.cellStyle) e.cellStyle = "";
                e.cellStyle += ";cursor:move;";
            }
            var s = '<div id="' + this.getNumberId(e.record) + '">';
	    	if (this.ignoreCollapseIndex);
            if (mini.isNull(grid.getPageIndex)) s += e.rowIndex + 1;
            else s += (grid.getPageIndex() * grid.getPageSize()) + e.rowIndex + 1;
            s += '</div>';
            return s;
        },
        __OnIndexChanged: function(e) {
            var grid = e.sender;

            var records = grid.getDataView();

            for (var i = 0, l = records.length; i < l; i++) {
                var record = records[i];
                var id = this.getNumberId(record);
                var ck = document.getElementById(id);
                if (ck) ck.innerHTML = this.createNumber(grid, i);
            }

        }
    }, config);
}
mini._Columns["indexcolumn"] = mini.IndexColumn;


mini.CheckColumn = function(config) {
    return mini.copyTo({
        width: 30,
        cellCls: "mini-checkcolumn",
        headerCls: "mini-checkcolumn",
        hideable: true,
        _multiRowSelect: true,
        header: function(column) {






            var id = this.uid + "checkall";
            var cls = column._checkedAll ? "mini-grid-checkbox-checked" : "";
            var s = '<span class="mini-grid-checkbox ' + cls + '" id="' + id + '"></span>';
            if (this.multiSelect == false) s = "";
            return s;
        },
        getCheckId: function(record, column) {
            return this._gridUID + "$checkcolumn$" + record[this._rowIdField] + "$" + column._id;
        },
        init: function(grid) {

            grid.on("_selectchange", this.__OnSelectionChanged, this);
            grid.on("headercellclick", this.__OnHeaderCellClick, this);

            var me = this;
	    	grid.on("removerow", function() {
                if (grid.data && grid.data.length == 0) grid._doCheckState(grid)
            });
            grid.on("load", function() {
                var id = grid.uid + "checkall";

                me._doCheckState(grid);
            }, this);
        },
        renderer: function(e) {
            var id = this.getCheckId(e.record, e.column);
            var selected = e.sender.isSelected ? e.sender.isSelected(e.record) : false;

            var type = "checkbox";









            var grid = e.sender;
            var html = '<span class="mini-grid-' + (grid.getMultiSelect() ? 'checkbox' : 'radio') + '" id="' + id + '"></span>';
            return html;

        },
        __OnHeaderCellClick: function(e) {
            var grid = e.sender;
            if (e.column != this) return;
            var id = grid.uid + "checkall";
            var ck = document.getElementById(id);
            if (ck) {

                var checkedCls = 'mini-grid-checkbox-checked';
                var checked = !mini.hasClass(ck, checkedCls);
                this._checkedAll = checked;

                if (grid.getMultiSelect()) {
                    if (checked) {
                        var list = grid.getDataView();
                        grid.selects(list);
                        mini.addClass(ck, checkedCls);
                    } else {
                        var list = grid.getDataView();
                        grid.deselects(list);
                        mini.removeClass(ck, checkedCls);
                    }
                } else {
                    grid.deselectAll();
                    if (checked) {
                        grid.select(0);
                        mini.addClass(ck, checkedCls);
                    }
                }
                grid.fire("checkall");
            }
        },
        __OnSelectionChanged: function(e) {


            var grid = e.sender;
            var records = grid.toArray();
            var me = this;


            var virtual = grid.isVirtualScroll(),
                region = grid._viewRegion,
                start = (virtual && region) ? region.start : -1,
                end = region ? region.end : -1,
                map = {};

            if (start != -1) {
                var data = grid.getVisibleRows();
                for (var i = start, l = end; i < l; i++) {
                    var row = data[i];
                    if (row) map[row._id] = true;
                }
            }


            for (var i = 0, l = records.length; i < l; i++) {
                var record = records[i];


                if (start != -1) {
                    if (!map[record._id]) continue;
                }






            }

            if (!this._timer) {
                this._timer = setTimeout(function() {
                    me._doCheckState(grid);
                    me._timer = null;
                }, 10);
            }
        },
        _doCheckState: function(grid) {

            var id = grid.uid + "checkall";
            var ck = document.getElementById(id);
            var checkedCls = 'mini-grid-checkbox-checked';

            if (ck) {
                var sels = grid.getSelecteds();
				var len = grid.isTree ? grid.getList().length : grid.getData().length;
                if (sels.length == len && len != 0) {
                    mini.addClass(ck, checkedCls);
                } else {
                    mini.removeClass(ck, checkedCls);
                }
            }
        }
    }, config);
};
mini._Columns["checkcolumn"] = mini.CheckColumn;


mini.ExpandColumn = function(config) {
    return mini.copyTo({
        width: 30,
        headerAlign: "center",
        align: "center",
        draggable: false,
        cellStyle: "padding:0",
        cellCls: "mini-grid-expandCell",
        hideable: true,
        renderer: function(e) {
            return '<a class="mini-grid-ecIcon" href="javascript:#" onclick="return false"></a>';
        },
        init: function(grid) {
            grid.on("cellclick", this.__OnCellClick, this);
        },
        __OnCellClick: function(e) {
            var grid = e.sender;
            if (e.column == this && grid.isShowRowDetail) {
                if (mini.findParent(e.htmlEvent.target, "mini-grid-ecIcon")) {
                    var isShow = grid.isShowRowDetail(e.record);

                    if (!isShow) {
                        e.cancel = false;
                        grid.fire("beforeshowrowdetail", e);
                        if (e.cancel === true) return;
                    } else {
                        e.cancel = false;
                        grid.fire("beforehiderowdetail", e);
                        if (e.cancel === true) return;
                    }

                    if (grid.autoHideRowDetail) {
                        grid.hideAllRowDetail();
                    }
                    if (isShow) {
                        grid.hideRowDetail(e.record);
                    } else {
                        grid.showRowDetail(e.record);
                    }
                }
            }
        }
    }, config);
}
mini._Columns["expandcolumn"] = mini.ExpandColumn;


mini.CheckBoxColumn = function(config) {
    return mini.copyTo({
        _type: "checkboxcolumn",
        editMode: "inline",
        header: "",
        headerAlign: "center",

        trueValue: true,
        falseValue: false,
        readOnly: false,
        getCheckId: function(record, column) {
            return this._gridUID + "$checkbox$" + record[this._rowIdField] + "$" + column._id;
        },
        getCheckBoxEl: function(record, column) {
            return document.getElementById(this.getCheckId(record, column));
        },
        isChecked: function(record, column) {
            var ck = this.getCheckBoxEl(record, column);
            return $(ck).hasClass('mini-grid-checkbox-checked');
        },
        renderer: function(e) {
            var id = this.getCheckId(e.record, e.column);

            var v = mini._getMap(e.field, e.record);
            var checked = v == this.trueValue ? true : false;





            return '<span  id="' + id + '" class="mini-grid-checkbox ' + (checked ? "mini-grid-checkbox-checked" : "") + '"></span>';
        },




        init: function(grid) {
            this.grid = grid;

            function oneditchange(e) {
                if (grid.isReadOnly() || this.readOnly) return;
                e.value = mini._getMap(e.field, e.record);
                grid.fire("cellbeginedit", e);

                if (e.cancel !== true) {




                    var v = mini._getMap(e.column.field, e.record);
                    var value = v == this.trueValue ? this.falseValue : this.trueValue;

                    if (grid._OnCellCommitEdit) {
                        grid._OnCellCommitEdit(e.record, e.column, value);
                        grid._OnCellEndEdit(e.record, e.column);





                    }
                }
            }

            function onEdit(e) {

                if (e.column == this) {
                    var id = this.getCheckId(e.record, e.column);
                    var ck = e.htmlEvent.target;
                    if (ck.id == id) {
                        if (grid.allowCellEdit) {
                            e.cancel = false;
                            oneditchange.call(this, e);
                        } else {
                            if (this.readOnly) return;
                            e.value = mini._getMap(e.column.field, e.record);
                            grid.fire("cellbeginedit", e);
                            if (e.cancel == true) return;
                            if (grid.isEditingRow && grid.isEditingRow(e.record)) {
                                setTimeout(function() {


                                    jQuery(ck).toggleClass('mini-grid-checkbox-checked');

                                }, 1);
                            }
                        }
                    }
                }
            }
            grid.on("cellclick", onEdit, this);
            mini.on(this.grid.el, "keydown", function(e) {

                if (e.keyCode == 32 && grid.allowCellEdit) {
                    var currentCell = grid.getCurrentCell();
                    if (!currentCell) return;
                    if (currentCell[1] != this) return;

                    var ex = {
                        record: currentCell[0],
                        column: currentCell[1]
                    };
                    ex.field = ex.column.field;

                    oneditchange.call(this, ex);
                    e.preventDefault();
                }
            }, this);


            var tv = parseInt(this.trueValue),
                fv = parseInt(this.falseValue);
            if (!isNaN(tv)) this.trueValue = tv;
            if (!isNaN(fv)) this.falseValue = fv;
	    if (this.trueValue == "true") this.trueValue = true;
            if (this.falseValue == "false") this.falseValue = false
        }
    }, config);
};
mini._Columns["checkboxcolumn"] = mini.CheckBoxColumn;



mini.RadioButtonColumn = function(config) {
    return mini.copyTo({
        _type: "radiobuttoncolumn",
        editMode: "inline",
        header: "",
        headerAlign: "center",

        trueValue: true,
        falseValue: false,
        readOnly: false,
        getCheckId: function(record, column) {
            return this._gridUID + "$radio$" + record[this._rowIdField] + "$" + column._id;
        },
        getCheckBoxEl: function(record, column) {
            return document.getElementById(this.getCheckId(record, column));
        },
        renderer: function(e) {
            var grid = e.sender;
            var id = this.getCheckId(e.record, e.column);
            var v = mini._getMap(e.field, e.record);
            var checked = v == this.trueValue ? true : false;
            var type = "radio";
            var name = grid._id + e.column.field;

            var disabled = '';









            return '<span id="' + id + '" class="mini-grid-radio ' + (checked ? "mini-grid-radio-checked" : "") + '"></span>';


        },




        init: function(grid) {
            this.grid = grid;

            function oneditchange(e) {
                if (grid.isReadOnly() || this.readOnly) return;
                e.value = mini._getMap(e.field, e.record);
                grid.fire("cellbeginedit", e);

                if (e.cancel !== true) {
                    var v = mini._getMap(e.column.field, e.record);
                    if (v == this.trueValue) return;
                    var value = v == this.trueValue ? this.falseValue : this.trueValue;


                    var data = grid.getData();

                    for (var i = 0, l = data.length; i < l; i++) {
                        var row = data[i];
                        if (row == e.record) continue;
                        var v = mini._getMap(e.column.field, row);
                        if (v != this.falseValue) {




                            grid.updateRow(row, e.column.field, this.falseValue);
                        }
                    }

                    if (grid._OnCellCommitEdit) {
                        grid._OnCellCommitEdit(e.record, e.column, value);

                        grid._OnCellEndEdit(e.record, e.column);
                    }
                }
            }

            function onEdit(e) {
                if (e.column == this) {

                    var id = this.getCheckId(e.record, e.column);
                    var ck = e.htmlEvent.target;
                    if (ck.id == id) {
                        if (grid.allowCellEdit) {
                            e.cancel = false;
                            oneditchange.call(this, e);
                        } else {


                            if (grid.isEditingRow && grid.isEditingRow(e.record)) {
                                var that = this;
                                setTimeout(function() {
                                    ck.checked = true;


                                    var data = grid.getData();
                                    for (var i = 0, l = data.length; i < l; i++) {
                                        var row = data[i];
                                        if (row == e.record) continue;
                                        var field = e.column.field;
                                        var v = mini._getMap(field, row);
                                        if (v != that.falseValue) {
                                            if (row != e.record) {
                                                if (grid._dataSource) {
                                                    mini._setMap(e.column.field, that.falseValue, row);
                                                    grid._dataSource._setModified(row, field, v);
                                                } else {
                                                    var o = {};
                                                    mini._setMap(field, that.falseValue, o);
                                                    grid._doUpdateRow(row, o);
                                                }
                                            }
                                        }
                                    }


                                }, 1);
                            }
                        }
                    }
                }
            }
            grid.on("cellclick", onEdit, this);

            mini.on(this.grid.el, "keydown", function(e) {
                if (e.keyCode == 32 && grid.allowCellEdit) {
                    var currentCell = grid.getCurrentCell();
                    if (!currentCell) return;
                    if (currentCell[1] != this) return;
                    var ex = {
                        record: currentCell[0],
                        column: currentCell[1]
                    };
                    ex.field = ex.column.field;
                    oneditchange.call(this, ex);
                    e.preventDefault();
                }
            }, this);


            var tv = parseInt(this.trueValue),
                fv = parseInt(this.falseValue);
            if (!isNaN(tv)) this.trueValue = tv;
            if (!isNaN(fv)) this.falseValue = fv;
        }
    }, config);
};
mini._Columns["radiobuttoncolumn"] = mini.RadioButtonColumn;

function listColumnRenderer(e) {
    var column = e.column;
    var value = !mini.isNull(e.value) ? String(e.value) : "";
    var values = value.split(",");

    var valueField = "id",
        textField = "text";
    var valueMaps = {};

    var editor = column.editor;
    var _editor = column.__editor;

    if (editor) {



        if (!_editor && (editor.type == "combobox" || editor.type == "treeselect")) {

            if (mini.isControl(editor)) {
                _editor = editor;
            } else {
                editor = mini.clone(editor);
                _editor = mini.create(editor);
            }
            e.column.__editor = _editor;
        }

        valueField = _editor.getValueField();
        textField = _editor.getTextField();

        var data = _editor.getData();

        valueMaps = column._valueMaps;
        if (!valueMaps || data !== column._data) {

            var list = _editor.getList ? _editor.getList() : data;

            valueMaps = {};
            for (var i = 0, l = list.length; i < l; i++) {
                var o = list[i];
                valueMaps[o[valueField]] = o;
            }

            column._valueMaps = valueMaps;
            column._data = data;
        }
    }

    var texts = [];
    for (var i = 0, l = values.length; i < l; i++) {
        var id = values[i];
        var o = valueMaps[id];
        if (o) {
            var text = o[textField];
            if (text === null || text === undefined) {
                text = "";
            }
            texts.push(text);
        }
    }

    if (texts.length == 0 && column.valueFromSelect === false) {
        return value;
    }
    return texts.join(',');
}


mini.ComboBoxColumn = function(config) {
    return mini.copyTo({
        renderer: listColumnRenderer
    }, config);
};
mini._Columns["comboboxcolumn"] = mini.ComboBoxColumn;


mini.TreeSelectColumn = function(config) {
    return mini.copyTo({
        renderer: listColumnRenderer

    }, config);
};
mini._Columns["treeselectcolumn"] = mini.TreeSelectColumn;




mini._Resizer = function(grid) {
    this.owner = grid;
    mini.on(this.owner.el, "mousedown", this.__OnMouseDown, this);
}
mini._Resizer.prototype = {
    __OnMouseDown: function(e) {

        var has = mini.hasClass(e.target, "mini-resizer-trigger");
        if (has && this.owner.allowResize) {
            var drag = this._getResizeDrag();
            drag.start(e);
        }
    },
    _getResizeDrag: function() {
        if (!this._resizeDragger) {
            this._resizeDragger = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this._resizeDragger;
    },
    _OnDragStart: function(drag) {

        this.mask = mini.append(document.body, '<div class="mini-resizer-mask mini-fixed"></div>');

        this.proxy = mini.append(document.body, '<div class="mini-resizer-proxy"></div>');
        this.proxy.style.cursor = "se-resize";

        var el = this.owner.el;
        el.offsetWidth;

        this.elBox = mini.getBox(el);
        mini.setBox(this.proxy, this.elBox);
    },
    _OnDragMove: function(drag) {
        var grid = this.owner;
        var xOffset = drag.now[0] - drag.init[0];
        var yOffset = drag.now[1] - drag.init[1];

        var w = this.elBox.width + xOffset;
        var h = this.elBox.height + yOffset;
        if (w < grid.minWidth) w = grid.minWidth;
        if (h < grid.minHeight) h = grid.minHeight;
        if (w > grid.maxWidth) w = grid.maxWidth;
        if (h > grid.maxHeight) h = grid.maxHeight;

        mini.setSize(this.proxy, w, h);
    },
    _OnDragStop: function(drag, success) {
        if (!this.proxy) return;
        var box = mini.getBox(this.proxy);

        jQuery(this.mask).remove();
        jQuery(this.proxy).remove();
        this.proxy = null;
        this.elBox = null;

        if (success) {
            this.owner.setWidth(box.width);
            this.owner.setHeight(box.height);
            this.owner.fire("resize");
        }
    }
};






mini._topWindow = null;
mini._getTopWindow = function(hasMini) {
    if (mini._topWindow) return mini._topWindow;
    var ps = [];

    function getParents(me) {
        try {
            me["___try"] = 1;
            if (me["___try"] == 1) ps.push(me);
        } catch (ex) {}
        if (me.parent && me.parent != me) {
            getParents(me.parent);
        }
    }
    getParents(window);
    mini._topWindow = ps[ps.length - 1];
    return mini._topWindow;
}

var __ps = mini.getParams();

if (__ps._winid) {
    try {
        window.Owner = mini._getTopWindow()[__ps._winid];
    } catch (ex) {}
}



mini._WindowID = "w" + Math.floor(Math.random() * 10000);
mini._getTopWindow()[mini._WindowID] = window;

mini.createIFrame = function(url, onIFrameLoad, cache, method, params) {





    if (!url) url = "";
    var urls = url.split("#");
    url = urls[0];



    var t = "";
    if (cache !== true) {

        t = '_t=' + Math.floor(Math.random() * 1000000);

        if (url.indexOf("?") == -1) {
            url += "?" + t;
        } else {
            url += "&" + t;
        }
    }


    if (url && url.indexOf("_winid") == -1) {
        var t = "_winid=" + mini._WindowID;
        if (url.indexOf("?") == -1) {
            url += "?" + t;
        } else {
            url += "&" + t;
        }
    }


    if (urls[1]) {
        url = url + "#" + urls[1];
    }

    var isMHT = url.indexOf(".mht") != -1;
    var src = isMHT ? url : '';

    var iframeName = mini.newId('mini-iframe-');


    var s = '<iframe name="' + iframeName + '" src="' + (method == 'post' ? '' : src) + '" style="width:100%;height:100%;"  frameborder="0"></iframe>';


    var div = document.createElement("div");
    var iframe = mini.append(div, s);

    var canFireLoad = false;
    if (isMHT) {
        canFireLoad = true;
    } else {
        setTimeout(function() {
            if (iframe) {
                if (method != 'post') {
                    iframe.src = url;
                }
                canFireLoad = true;
            }
        }, 5);
    }


    if (iframe.attachEvent) {
        iframe.attachEvent('onload', __OnLoad);
    } else {
        iframe.onload = __OnLoad;
    }

    var destroyed = false;


    var firstLoad = true;

    function __OnLoad() {

        if (canFireLoad == false || destroyed) return;

        setTimeout(function() {

            if (onIFrameLoad) onIFrameLoad(iframe, firstLoad);
            firstLoad = false;



        }, 1);
    }


    iframe._ondestroy = function() {


        destroyed = true;

        iframe.src = "";
        if (mini.isIE) {
            try {
                iframe.contentWindow.document.write("");
                iframe.contentWindow.document.close();
            } catch (ex) {}
        }
        iframe._ondestroy = null;
        iframe = null;

    }



    var form;
    if (method == "post") {

        function createForm() {
            return $("<form />")
                .attr({
                    method: "post",
                    action: url,
                    enctype: "multipart/form-data",
                    target: iframe.name
                })
                .hide()
                .appendTo("body");
        }

        form = createForm();

        setTimeout(function() {
            form.submit();
        }, 10);


    }


    return iframe;
}



mini._doOpen = function(options) {
    if (typeof options == "string") {
        options = {
            url: options
        };
    }

    options = mini.copyTo({
        width: 700,
        height: 400,
        allowResize: true,
        allowModal: true,
        closeAction: "destroy",

        title: "",
        titleIcon: "",
        iconCls: "",
        iconStyle: "",
        bodyStyle: "padding: 0",

        url: "",

        showCloseButton: true,
        showFooter: false
    }, options);

    options.closeAction = "destroy";

    var onload = options.onload;
    delete options.onload;
    var ondestroy = options.ondestroy;
    delete options.ondestroy;
    var url = options.url;
    delete options.url;

    var box = mini.getViewportBox();
    if (options.width && String(options.width).indexOf('%') != -1) {
        var w = parseInt(options.width);
        options.width = parseInt(box.width * (w / 100));
    }
    if (options.height && String(options.height).indexOf('%') != -1) {
        var h = parseInt(options.height);
        options.height = parseInt(box.height * (h / 100));
    }

    var win = new mini.Window();
    win.set(options);

    win.load(url,
        onload,
        ondestroy
    );
    win.show();

    if (mini.isIE) {
        setTimeout(function() {
            fixIEFocus();
        }, 100);
    }

    return win;
}


function fixIEFocus() {
    var vbox = mini.getViewportBox();
    var input = document.createElement("input");

    input.style.cssText = "position:absolute;left:" + vbox.left + "px;top:" + vbox.top + "px;";
    document.body.appendChild(input);
    input.focus();
    input.parentNode.removeChild(input);
}

if (typeof mini_parent_window == "undefined") {
    var mini_parent_window = true;
}
mini.getTopWindow = function() {
    var ps = [];

    function getParent(me) {
        try {
            if (me.mini) ps.push(me);
            if (me.parent && me.parent != me) getParent(me.parent)
        } catch (e) {}
    }
    getParent(window);
    var win = ps[ps.length - 1];
    return win;
};

mini.open = function(options) {
    if (!options) return;

    var url = options.url;
    if (!url) url = "";
    var urls = url.split("#");
    var url = urls[0];

    if (url && url.indexOf("_winid") == -1) {
        var t = "_winid=" + mini._WindowID;
        if (url.indexOf("?") == -1) {
            url += "?" + t;
        } else {
            url += "&" + t;
        }
        if (urls[1]) {
            url = url + "#" + urls[1];
        }
    }

    options.url = url;

    options.Owner = window;
    var ps = [];

    function getParents(me) {
        try {
            if (me.mini) ps.push(me);

            if (me.parent && me.parent != me && me.parent.mini_parent_window) {
                getParents(me.parent);
            }
        } catch (ex) {}
    }
    getParents(window);
    var win = ps[ps.length - 1];
    if (options.targetWindow) win = options.targetWindow;
    return win["mini"]._doOpen(options);
}
mini.openTop = mini.open;



mini._getResult = function(url, params, success, error, type, dataField) {
    var xhr = null;
    var text = mini.getText(url, params, function(text, o) {
        xhr = o;
        if (success)
            if (success) success(text, o);
    }, error, type);

    var obj = {
        text: text,
        result: null,
        sender: {
            type: ''
        },
        options: {
            url: url,
            data: params,
            type: type
        },
        xhr: xhr
    };
    var result = null;
    try {
        mini_doload(obj);
        result = obj.result;
        if (!result) {
            result = mini.decode(text);
        }
    } catch (ex) {
        if (mini_debugger == true) {
            alert(url + "\njson is error");
        }
    }

    if (!mini.isArray(result) && dataField) result = mini._getMap(dataField, result);

    if (mini.isArray(result)) {
        result = {
            data: result
        };
    }

    return result ? result.data : null;
}
mini.getData = function(url, params, success, error, type) {
    var text = mini.getText(url, params, success, error, type);
    var data = mini.decode(text);
    return data;
}
mini.getText = function(url, params, success, error, type) {

    var returnText = null;
    mini.ajax({
        url: url,
        data: params,
        async: false,
        type: type ? type : "get",
        cache: false,
        dataType: "text",
        success: function(text, textStatus, xhr) {
            returnText = text;
            if (success) success(text, xhr);
        },
        error: error
    });
    return returnText;
}



if (!window.mini_RootPath) {
    mini_RootPath = "/";
}
mini_CreateJSPath = function(js) {
    var scripts = document.getElementsByTagName("script");
    var path = "";
    for (var i = 0, l = scripts.length; i < l; i++) {
        var src = scripts[i].src;
        if (src.indexOf(js) != -1) {
            var ss = src.split(js);
            path = ss[0];
            break;
        }
    }
    var href = location.href;
    href = href.split("#")[0];
    href = href.split("?")[0];
    var ss = href.split("/");
    ss.length = ss.length - 1;
    href = ss.join("/");

    if (path.indexOf("http:") == -1 && path.indexOf("file:") == -1) {
        path = href + "/" + path;
    }
    return path;
}
if (!window.mini_JSPath) {
    mini_JSPath = mini_CreateJSPath("miniui.js");
}




mini.update = function(options, el) {
    if (typeof options == "string") options = {
        url: options
    };
    if (el) options.el = el;
    var html = mini.loadText(options.url);
    mini.innerHTML(options.el, html);
    mini.parse(options.el);
}









mini.createSingle = function(Type) {
    if (typeof Type == "string") {
        Type = mini.getClass(Type);
    }
    if (typeof Type != "function") return;
    var obj = Type.single;
    if (!obj) {
        obj = Type.single = new Type();
    }
    return obj;
}
mini.createTopSingle = function(Type) {
    if (typeof Type != "function") return;

    var typeName = Type.prototype.type;
    if (top && top != window && top.mini && top.mini.getClass(typeName)) {
        return top.mini.createSingle(typeName);
    } else {
        return mini.createSingle(Type);
    }
}



mini.sortTypes = {



    "string": function(s) {
        return String(s).toUpperCase();
    },
    "date": function(s) {
        if (!s) {
            return 0;
        }
        if (mini.isDate(s)) {
            return s.getTime();
        }
        return mini.parseDate(String(s));
    },
    "float": function(s) {
        var val = parseFloat(String(s).replace(/,/g, ""));
        return isNaN(val) ? 0 : val;
    },
    "int": function(s) {
        var val = parseInt(String(s).replace(/,/g, ""), 10);
        return isNaN(val) ? 0 : val;
    },
    "currency": function(s) {
        var val = parseFloat(String(s).replace(/,/g, ""));
        return isNaN(val) ? 0 : val;
    }
};


mini._ValidateVType = function(vtype, value, e, scope) {
    var vtypes = vtype.split(";");

    for (var i = 0, l = vtypes.length; i < l; i++) {
        var vtype = vtypes[i].trim();
        var vv = vtype.split(":");
        var vt = vv[0];

        var args = vtype.substr(vt.length + 1, 1000);
        if (args) args = args.split(",");
        else args = [];

        var fn = mini.VTypes[vt];
        // 兼容
        if (vt == 'currency' && !args.length) {
            args = [4];
        }
        if (fn) {
            var isValid = fn(value, args, e, scope);
            if (typeof isValid == 'object') {
                mini.copyTo(e, isValid);
                if (e.isValid !== true) {
                    break;
                }
            } else {
                if (isValid !== true) {
                    e.isValid = false;
                    var vtext = vv[0] + "ErrorText";
                    e.errorText = scope[vtext] || mini.VTypes[vtext] || "";
                    e.errorText = String.format(e.errorText, args[0], args[1], args[2], args[3], args[4]);
                    break;
                }
            }
        }
    }
}
mini._getErrorText = function(obj, field) {
    if (obj && obj[field]) {
        return obj[field];
    } else {
        return mini.VTypes[field]
    }

}
mini.VTypes = {
    minDateErrorText: 'Date can not be less than {0}',
    maxDateErrorText: 'Date can not be greater than {0}',

    uniqueErrorText: "This field is unique.",
    requiredErrorText: "This field is required.",
    emailErrorText: "Please enter a valid email address.",
    urlErrorText: "Please enter a valid URL.",
    floatErrorText: "Please enter a valid number.",
    intErrorText: "Please enter only digits",
    dateErrorText: "Please enter a valid date. Date format is {0}",
    maxLengthErrorText: "Please enter no more than {0} characters.",
    minLengthErrorText: "Please enter at least {0} characters.",
    maxErrorText: "Please enter a value less than or equal to {0}.",
    minErrorText: "Please enter a value greater than or equal to {0}.",
    rangeLengthErrorText: "Please enter a value between {0} and {1} characters long.",
    rangeCharErrorText: "Please enter a value between {0} and {1} characters long.",
    rangeErrorText: "Please enter a value between {0} and {1}.",

    required: function(v, args) {
        if (mini.isNull(v) || v === "") return false;
        return true;
    },
    email: function(v, args) {
        if (mini.isNull(v) || v === "") return true;
        if (v.search(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/) != -1)
            return true;
        else
            return false;
    },
    url: function(v, args) {




        if (mini.isNull(v) || v === "") return true;

        function IsURL(str_url) {
            str_url = str_url.toLowerCase().split("?")[0];




            var strRegex = "^((https|http|ftp|rtsp|mms)?:\/\/)?"

                +
                "(([0-9]{1,3}\.){3}[0-9]{1,3}" +
                "|" +
                "([0-9a-z_!~*'()-]+\.)*" +
                "([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\." +
                "[a-z]{2,6})" +
                "(:[0-9]{1,5})?" +
                "((/?)|" +
                "(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$";
            var re = new RegExp(strRegex);

            if (re.test(str_url)) {
                return (true);
            } else {
                return (false);
            }
        }
        return IsURL(v);
    },
    "int": function(v, args) {
        if (mini.isNull(v) || v === "") return true;

        function isInteger(s) {
            if (s < 0) {
                s = -s;
            }
            var n = String(s);
            return n.length > 0 && !(/[^0-9]/).test(n);
        }
        return isInteger(v);



    },
    "float": function(v, args) {

        if (mini.isNull(v) || v === "") return true;

        function isFloat(s) {
            if (s < 0) {
                s = -s;
            }
            var n = String(s);
            if (n.split(".").length > 2) return false;



            return n.length > 0 && !(/[^0-9.]/).test(n) && !(n.charAt(n.length - 1) == ".");
        }
        return isFloat(v);



    },
    "date": function(v, args) {

        if (mini.isNull(v) || v === "") return true;
        if (!v) return false;
        var d = null;
        var format = args[0];

        if (format) {
            d = mini.parseDate(v, format);
            if (d && d.getFullYear) {
                if (mini.formatDate(d, format) == v) return true;
            }
        } else {
            d = mini.parseDate(v, "yyyy-MM-dd");
            if (!d) d = mini.parseDate(v, "yyyy/MM/dd");
            if (!d) d = mini.parseDate(v, "MM/dd/yyyy");
            if (d && d.getFullYear) return true;
        }

        return false;
    },
    maxLength: function(v, args) {
        if (mini.isNull(v) || v === "") return true;
        var n = parseInt(args);
        if (!v || isNaN(n)) return true;
        if (v.length <= n) return true;
        else return false;
    },
    minLength: function(v, args) {
        if (mini.isNull(v) || v === "") return true;
        var n = parseInt(args);
        if (isNaN(n)) return true;
        if (v.length >= n) return true;
        else return false;
    },
    rangeLength: function(v, args) {
        if (mini.isNull(v) || v === "") return true;
        if (!v) return false;
        var min = parseFloat(args[0]),
            max = parseFloat(args[1]);
        if (isNaN(min) || isNaN(max)) return true;
        if (min <= v.length && v.length <= max) return true;
        return false;
    },
    rangeChar: function(v, args) {
        if (mini.isNull(v) || v === "") return true;

        var min = parseFloat(args[0]),
            max = parseFloat(args[1]);
        if (isNaN(min) || isNaN(max)) return true;

        function isChinese(v) {
            var re = new RegExp("^[\u4e00-\u9fa5]+$");
            if (re.test(v)) return true;
            return false;
        }

        var len = 0;
        var ss = String(v).split("");
        for (var i = 0, l = ss.length; i < l; i++) {
            if (isChinese(ss[i])) {
                len += 2;
            } else {
                len += 1;
            }
        }

        if (min <= len && len <= max) return true;
        return false;
    },
    range: function(v, args) {
        if (mini.VTypes["float"](v, args) == false) return false;
        if (mini.isNull(v) || v === "") return true;
        v = parseFloat(v);
        if (isNaN(v)) return false;
        var min = parseFloat(args[0]),
            max = parseFloat(args[1]);
        if (isNaN(min) || isNaN(max)) return true;
        if (min <= v && v <= max) return true;
        return false;
    },
    min: function(v, args) {
        if (mini.VTypes["float"](v, args) == false) return false;
        if (mini.isNull(v) || v === "") return true;
        v = parseFloat(v);
        if (isNaN(v)) return false;
        var min = parseFloat(args[0]);
        if (isNaN(min)) return true;
        if (min <= v) return true;
        return false;
    },
    max: function(v, args) {
        if (mini.VTypes["float"](v, args) == false) return false;
        if (mini.isNull(v) || v === "") return true;
        v = parseFloat(v);
        if (isNaN(v)) return false;
        var max = parseFloat(args[0]);
        if (isNaN(max)) return true;
        if (v <= max) return true;
        return false;
    }
};


mini.summaryTypes = {
    "count": function(data) {
        if (!data) data = [];
        return data.length;
    },
    "max": function(data, field) {
        if (!data) data = [];
        var max = null;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];

            var value = parseFloat(mini._getMap(field, o));
            if (value === null || value === undefined || isNaN(value)) continue;
            if (max == null || max < value) {
                max = value;
            }
        }
        return max;
    },
    "min": function(data, field) {
        if (!data) data = [];
        var min = null;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];

            var value = parseFloat(mini._getMap(field, o));
            if (value === null || value === undefined || isNaN(value)) continue;
            if (min == null || min > value) {
                min = value;
            }
        }
        return min;
    },
    "avg": function(data, field) {
        if (!data) data = [];
        if (data.length == 0) return 0;
        var total = 0;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];

            var value = parseFloat(mini._getMap(field, o));
            if (value === null || value === undefined || isNaN(value)) continue;
            total += value;
        }
        var v = total / data.length;
        return v;
    },
    "sum": function(data, field) {
        if (!data) data = [];
        var total = 0;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];

            var value = parseFloat(mini._getMap(field, o));
            if (value === null || value === undefined || isNaN(value)) continue;
            total += value;
        }
        return total;
    }
};


mini.formatCurrency = function(num, prefix) {
    if (num === null || num === undefined) null == "";
    num = String(num).replace(/\$|\,/g, '');
    if (isNaN(num)) {
        num = "0";
    }
    sign = (num == (num = Math.abs(num)));
    num = Math.floor(num * 100 + 0.50000000001);
    cents = num % 100;
    num = Math.floor(num / 100).toString();
    if (cents < 10) {
        cents = "0" + cents;
    }
    for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++) {
        num = num.substring(0, num.length - (4 * i + 3)) + ',' + num.substring(num.length - (4 * i + 3));
    }
    prefix = prefix || '';
    return prefix + (((sign) ? '' : '-') + num + '.' + cents);
}




mini.getByUid = mini.getbyUID;


mini.emptyFn = function() {};
mini.Drag = function(options) {
    mini.copyTo(this, options);
};
mini.Drag.prototype = {
    onStart: mini.emptyFn,
    onMove: mini.emptyFn,
    onStop: mini.emptyFn,
    capture: false,
    fps: 20,
    event: null,
    delay: 80,


    start: function(e) {

        e.preventDefault();
        if (e) this.event = e;

        this.now = this.init = [this.event.pageX, this.event.pageY];

        var bd = document;
        mini.on(bd, 'mousemove', this.move, this);
        mini.on(bd, 'mouseup', this.stop, this);
        mini.on(bd, 'contextmenu', this.contextmenu, this);
        if (this.context) mini.on(this.context, 'contextmenu', this.contextmenu, this);

        this.trigger = e.target;
        mini.selectable(this.trigger, false);
        mini.selectable(bd.body, false);

        if (this.capture) {
            if (isIE) this.trigger.setCapture(true);
            else if (document.captureEvents) document.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);
        }
        this.started = false;


        this.startTime = new Date();
    },
    contextmenu: function(e) {
        if (this.context) mini.un(this.context, 'contextmenu', this.contextmenu, this);
        mini.un(document, 'contextmenu', this.contextmenu, this);
        e.preventDefault();
        e.stopPropagation();
    },
    move: function(e) {
        if (this.delay) {
            if (new Date() - this.startTime < this.delay) return;
        }






        var sf = this;

        if (!this.timer) {
            this.timer = setTimeout(function() {

                if (!sf.started) {
                    sf.started = true;
                    sf.onStart(sf);
                }


                sf.now = [e.pageX, e.pageY]
                sf.event = e;
                sf.onMove(sf);
                sf.timer = null;
            }, 5);
        }
    },
    stop: function(e) {

        this.now = [e.pageX, e.pageY]
        this.event = e;

        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        var bd = document;

        mini.selectable(this.trigger, true);
        mini.selectable(bd.body, true);

        if (isIE) {
            this.trigger.setCapture(false);
            this.trigger.releaseCapture();
        }





        var success = mini.MouseButton.Right != e.button;
        if (success == false) {
            e.preventDefault();

        }





        mini.un(bd, 'mousemove', this.move, this);
        mini.un(bd, 'mouseup', this.stop, this);
        var sf = this;
        setTimeout(function() {
            mini.un(document, 'contextmenu', sf.contextmenu, sf);
            if (sf.context) mini.un(sf.context, 'contextmenu', sf.contextmenu, sf);
        }, 1);


        if (this.started) this.onStop(this, success);
    }
};



mini.JSON = new(function() {
    var sb = [];
    var _dateFormat = null;
    var useHasOwn = !!{}.hasOwnProperty,
        replaceString = function(a, b) {

            var c = m[b];
            if (c) {


                return c;
            }
            c = b.charCodeAt();
            return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16);

        },
        doEncode = function(o, field) {

            if (o === null) {
                sb[sb.length] = "null";
                return;
            }
            var t = typeof o;
            if (t == "undefined") {
                sb[sb.length] = "null";
                return;
            } else if (o.push) {

                sb[sb.length] = '[';
                var b, i, l = o.length,
                    v;
                for (i = 0; i < l; i += 1) {
                    v = o[i];
                    t = typeof v;
                    if (t == "undefined" || t == "function" || t == "unknown") {} else {
                        if (b) {
                            sb[sb.length] = ',';
                        }
                        doEncode(v);

                        b = true;
                    }
                }
                sb[sb.length] = ']';
                return;
            } else if (o.getFullYear) {
                if (_dateFormat) {
                    sb[sb.length] = '"';
                    if (typeof _dateFormat == 'function') {
                        sb[sb.length] = _dateFormat(o, field);
                    } else {
                        sb[sb.length] = mini.formatDate(o, _dateFormat);
                    }
                    sb[sb.length] = '"';
                } else {
                    var n;
                    sb[sb.length] = '"';
                    sb[sb.length] = o.getFullYear();
                    sb[sb.length] = "-";
                    n = o.getMonth() + 1;
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = "-";
                    n = o.getDate();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = "T"
                    n = o.getHours();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = ":"
                    n = o.getMinutes();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = ":"
                    n = o.getSeconds();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = '"';
                }
                return;
            } else if (t == "string") {
                if (strReg1.test(o)) {
                    sb[sb.length] = '"';

                    sb[sb.length] = o.replace(strReg2, replaceString);
                    sb[sb.length] = '"';
                    return;
                }
                sb[sb.length] = '"' + o + '"';
                return;
            } else if (t == "number") {
                sb[sb.length] = o;
                return;
            } else if (t == "boolean") {
                sb[sb.length] = String(o);
                return;
            } else {
                sb[sb.length] = "{";
                var b, i, v;
                for (i in o) {

                    if (!useHasOwn || Object.prototype.hasOwnProperty.call(o, i)) {

                        v = o[i];
                        t = typeof v;
                        if (t == "undefined" || t == "function" || t == "unknown") {} else {
                            if (b) {
                                sb[sb.length] = ',';
                            }
                            doEncode(i);
                            sb[sb.length] = ":";
                            doEncode(v, i)

                            b = true;
                        }
                    }
                }
                sb[sb.length] = "}";
                return;
            }
        },
        m = {
            "\b": '\\b',
            "\t": '\\t',
            "\n": '\\n',
            "\f": '\\f',
            "\r": '\\r',
            '"': '\\"',
            "\\": '\\\\'
        },
        strReg1 = /["\\\x00-\x1f]/,
        strReg2 = /([\x00-\x1f\\"])/g;

    this.encode = function() {

        var ec;
        return function(o, dateFormat) {
            sb = [];

            _dateFormat = dateFormat;
            doEncode(o);

            _dateFormat = null;

            return sb.join("");
        };
    }();
    this.decode = function() {









        var dateRe1 = /^(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2}(?:\.*\d*)?)Z*$/;

        var dateRe2 = new RegExp('^\/+Date\\((-?[0-9]+)\.*\\)\/+$', 'g');

        var re = /[\"\'](\d{4})-(\d{1,2})-(\d{1,2})[T ](\d{1,2}):(\d{1,2}):(\d{1,2})(\.*\d*)[\"\']/g;

        return function(json, parseDate) {
            if (json === "" || json === null || json === undefined) return json;

            if (typeof json == 'object') {
                json = this.encode(json);
            }

            function evalParse(json) {
                if (parseDate !== false) {



                    json = json.replace(__js_dateRegEx, "$1new Date($2)");
                    json = json.replace(re, "new Date($1,$2-1,$3,$4,$5,$6)");
                    json = json.replace(__js_dateRegEx2, "new Date($1)");
                }
                return eval('(' + json + ')');
            }


            var data = null;


            if (window.JSON && window.JSON.parse) {

                var dateReviver = function(key, value) {
                    if (typeof value === 'string' && parseDate !== false) {

                        dateRe1.lastIndex = 0;
                        var a = dateRe1.exec(value);
                        if (a) {
                            value = new Date(a[1], a[2] - 1, a[3], a[4], a[5], a[6]);

                            return value;
                        }

                        dateRe2.lastIndex = 0;
                        var a = dateRe2.exec(value);
                        if (a) {
                            value = new Date(parseInt(a[1]));

                            return value;
                        }
                    }
                    return value;
                };

                try {
                    var json2 = json.replace(__js_dateRegEx, "$1\"\/Date($2)\/\"");
                    data = window.JSON.parse(json2, dateReviver);
                } catch (ex) {
                    data = evalParse(json);
                }

            } else {

                data = evalParse(json);
            }
            return data;
        };

    }();

})();
__js_dateRegEx = new RegExp('(^|[^\\\\])\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\"', "g");
__js_dateRegEx2 = new RegExp('[\"\']\/Date\\(([0-9]+)\\)\/[\"\']', 'g');
mini.encode = mini.JSON.encode;
mini.decode = mini.JSON.decode;

mini.clone = function(o, _clear) {
    if (o === null || o === undefined) return o;
    var json = mini.encode(o);
    var obj = mini.decode(json);

    function clearProp(arr) {
        for (var i = 0, l = arr.length; i < l; i++) {
            var o = arr[i];
            delete o._state;
            delete o._id;
            delete o._pid;
            delete o._uid;
            delete o._editing;
            for (var p in o) {
                var v = o[p];
                if (v instanceof Array) clearProp(v);
            }
        }
    }
    if (_clear !== false) {
        clearProp(obj instanceof Array ? obj : [obj]);
    }

    return obj;
}





var DAY_MS = 86400000,
    HOUR_MS = 3600000,
    MINUTE_MS = 60000;

mini.copyTo(mini, {
    clearTime: function(date) {
        if (!date) return null;
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    },
    maxTime: function(date) {
        if (!date) return null;
        return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);
    },
    cloneDate: function(date) {
        if (!date) return null;
        return new Date(date.getTime());
    },
    addDate: function(date, num, type) {
        if (!type) type = "D";
        date = new Date(date.getTime());
        switch (type.toUpperCase()) {
            case "Y":
                date.setFullYear(date.getFullYear() + num);
                break;
            case "MO":
                date.setMonth(date.getMonth() + num);
                break;
            case "D":
                date.setDate(date.getDate() + num);
                break;
            case "H":
                date.setHours(date.getHours() + num);
                break;
            case "M":
                date.setMinutes(date.getMinutes() + num);
                break;
            case "S":
                date.setSeconds(date.getSeconds() + num);
                break;
            case "MS":
                date.setMilliseconds(date.getMilliseconds() + num);
                break;
        }
        return date;
    },
    getWeek: function(year, month, day) {


        var a = Math.floor((14 - (month)) / 12);
        var y = year + 4800 - a;
        var m = (month) + (12 * a) - 3;
        var jd = day + Math.floor(((153 * m) + 2) / 5) +
            (365 * y) + Math.floor(y / 4) - Math.floor(y / 100) +
            Math.floor(y / 400) - 32045;

        var d4 = (jd + 31741 - (jd % 7)) % 146097 % 36524 % 1461;
        var L = Math.floor(d4 / 1460);
        var d1 = ((d4 - L) % 365) + L;
        NumberOfWeek = Math.floor(d1 / 7) + 1;
        return NumberOfWeek;
    },

    getWeekStartDate: function(date, weekStartDay) {
        if (!weekStartDay) weekStartDay = 0;
        if (weekStartDay > 6 || weekStartDay < 0) throw new Error("out of weekday");
        var day = date.getDay();
        var num = weekStartDay - day;
        if (day < weekStartDay) {
            num -= 7;
        }
        var d = new Date(date.getFullYear(), date.getMonth(), date.getDate() + num);
        return d;
    },
    getShortWeek: function(week) {
        var weeks = this.dateInfo.daysShort;
        return weeks[week];
    },
    getLongWeek: function(week) {
        var weeks = this.dateInfo.daysLong;
        return weeks[week];
    },
    getShortMonth: function(month) {
        var months = this.dateInfo.monthsShort;
        return months[month];
    },
    getLongMonth: function(month) {
        var months = this.dateInfo.monthsLong;
        return months[month];
    },
    dateInfo: {
        monthsLong: ["January", "Febraury", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        daysLong: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        daysShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        quarterLong: ['Q1', 'Q2', 'Q3', 'Q4'],
        quarterShort: ['Q1', 'Q2', 'Q3', 'Q4'],
        halfYearLong: ['first half', 'second half'],
        patterns: {
            "d": "M/d/yyyy",
            "D": "dddd, MMMM dd, yyyy",
            "f": "dddd, MMMM dd, yyyy H:mm tt",
            "F": "dddd, MMMM dd, yyyy H:mm:ss tt",
            "g": "M/d/yyyy H:mm tt",
            "G": "M/d/yyyy H:mm:ss tt",
            "m": "MMMM dd",
            "o": "yyyy-MM-ddTHH:mm:ss.fff",
            "s": "yyyy-MM-ddTHH:mm:ss",
            "t": "H:mm tt",
            "T": "H:mm:ss tt",
            "U": "dddd, MMMM dd, yyyy HH:mm:ss tt",
            "y": "MMM, yyyy"
        },
        tt: {
            "AM": "AM",
            "PM": "PM"
        },
        ten: {
            "Early": "Early",
            "Mid": "Mid",
            "Late": "Late"
        },
        today: 'Today',
        clockType: 24
    }
});
Date.prototype.getHalfYear = function() {
    if (!this.getMonth) return null;
    var m = this.getMonth();
    if (m < 6) return 0;
    return 1;
}
Date.prototype.getQuarter = function() {
    if (!this.getMonth) return null;
    var m = this.getMonth();
    if (m < 3) return 0;
    if (m < 6) return 1;
    if (m < 9) return 2;
    return 3;
}





mini.formatDate = function(date, format, locale) {
    if (!date || !date.getFullYear || isNaN(date)) return "";
    var fd = date.toString();

    var dateFormat = mini.dateInfo;
    if (!dateFormat) dateFormat = mini.dateInfo;

    if (typeof(dateFormat) !== "undefined") {
        var pattern = typeof(dateFormat.patterns[format]) !== "undefined" ? dateFormat.patterns[format] : format;

        var year = date.getFullYear();
        var month = date.getMonth();
        var day = date.getDate();

        if (format == "yyyy-MM-dd") {
            month = month + 1 < 10 ? "0" + (month + 1) : month + 1;
            day = day < 10 ? "0" + day : day;
            return year + "-" + month + "-" + day;
        }
        if (format == "MM/dd/yyyy") {
            month = month + 1 < 10 ? "0" + (month + 1) : month + 1;
            day = day < 10 ? "0" + day : day;
            return month + "/" + day + "/" + year;
        }



        fd = pattern.replace(/yyyy/g, year);
        fd = fd.replace(/yy/g, (year + "").substring(2));


        var halfyear = date.getHalfYear();
        fd = fd.replace(/hy/g, dateFormat.halfYearLong[halfyear]);


        var quarter = date.getQuarter();
        fd = fd.replace(/Q/g, dateFormat.quarterLong[quarter]);
        fd = fd.replace(/q/g, dateFormat.quarterShort[quarter]);


        fd = fd.replace(/MMMM/g, dateFormat.monthsLong[month].escapeDateTimeTokens());
        fd = fd.replace(/MMM/g, dateFormat.monthsShort[month].escapeDateTimeTokens());
        fd = fd.replace(/MM/g, month + 1 < 10 ? "0" + (month + 1) : month + 1);
        fd = fd.replace(/(\\)?M/g, function($0, $1) {
            return $1 ? $0 : month + 1;
        });

        var dayOfWeek = date.getDay();
        fd = fd.replace(/dddd/g, dateFormat.daysLong[dayOfWeek].escapeDateTimeTokens());
        fd = fd.replace(/ddd/g, dateFormat.daysShort[dayOfWeek].escapeDateTimeTokens());


        fd = fd.replace(/dd/g, day < 10 ? "0" + day : day);
        fd = fd.replace(/(\\)?d/g, function($0, $1) {
            return $1 ? $0 : day;
        });

        var hour = date.getHours();
        var halfHour = hour > 12 ? hour - 12 : hour;
        if (dateFormat.clockType == 12) {
            if (hour > 12) {
                hour -= 12;
            }
        }


        fd = fd.replace(/HH/g, hour < 10 ? "0" + hour : hour);
        fd = fd.replace(/(\\)?H/g, function($0, $1) {
            return $1 ? $0 : hour;
        });


        fd = fd.replace(/hh/g, halfHour < 10 ? "0" + halfHour : halfHour);
        fd = fd.replace(/(\\)?h/g, function($0, $1) {
            return $1 ? $0 : halfHour;
        });

        var minutes = date.getMinutes();
        fd = fd.replace(/mm/g, minutes < 10 ? "0" + minutes : minutes);
        fd = fd.replace(/(\\)?m/g, function($0, $1) {
            return $1 ? $0 : minutes;
        });

        var seconds = date.getSeconds();
        fd = fd.replace(/ss/g, seconds < 10 ? "0" + seconds : seconds);
        fd = fd.replace(/(\\)?s/g, function($0, $1) {
            return $1 ? $0 : seconds;
        });

        fd = fd.replace(/fff/g, date.getMilliseconds());

        fd = fd.replace(/tt/g, date.getHours() > 12 || date.getHours() == 0 ? dateFormat.tt["PM"] : dateFormat.tt["AM"]);


        var date = date.getDate();
        var tenF = '';
        if (date <= 10) tenF = dateFormat.ten['Early'];
        else if (date <= 20) tenF = dateFormat.ten['Mid'];
        else tenF = dateFormat.ten['Late'];
        fd = fd.replace(/ten/g, tenF);
    }

    return fd.replace(/\\/g, "");
}
String.prototype.escapeDateTimeTokens = function() {
    return this.replace(/([dMyHmsft])/g, "\\$1");
}



mini.fixDate = function(d, check) {
    if (+d) {
        while (d.getDate() != check.getDate()) {
            d.setTime(+d + (d < check ? 1 : -1) * HOUR_MS);
        }
    }
}





mini.parseDate = function(s, ignoreTimezone) {


    try {
        var d = eval(s);
        if (d && d.getFullYear) return d;
    } catch (ex) {}

    if (typeof s == 'object') {
        return isNaN(s) ? null : s;
    }
    if (typeof s == 'number') {

        var d = new Date(s * 1000);
        if (d.getTime() != s) return null;
        return isNaN(d) ? null : d;
    }
    if (typeof s == 'string') {


        m = s.match(/^([0-9]{4})([0-9]{2})([0-9]{0,2})$/);
        if (m) {
            var date = new Date(parseInt(m[1], 10), parseInt(m[2], 10) - 1);
            if (m[3]) date.setDate(m[3]);
            return date;
        }


        m = s.match(/^([0-9]{4}).([0-9]*)$/);
        if (m) {
            var date = new Date(m[1], m[2] - 1);
            return date;
        }

        if (s.match(/^\d+(\.\d+)?$/)) {
            var d = new Date(parseFloat(s) * 1000);
            if (d.getTime() != s) return null;
            else return d;
        }
        if (ignoreTimezone === undefined) {
            ignoreTimezone = true;
        }
        var d = mini.parseISO8601(s, ignoreTimezone) || (s ? new Date(s) : null);
        return isNaN(d) ? null : d;
    }

    return null;
}
mini.parseISO8601 = function(s, ignoreTimezone) {



    var m = s.match(/^([0-9]{4})([-\/]([0-9]{1,2})([-\/]([0-9]{1,2})([T ]([0-9]{1,2}):([0-9]{1,2})(:([0-9]{1,2})(\.([0-9]+))?)?(Z|(([-+])([0-9]{2})(:?([0-9]{2}))?))?)?)?)?$/);
    if (!m) {

        m = s.match(/^([0-9]{4})[-\/]([0-9]{2})[-\/]([0-9]{2})[T ]([0-9]{1,2})/);
        if (m) {
            var date = new Date(m[1], m[2] - 1, m[3], m[4]);
            return date;
        }


        m = s.match(/^([0-9]{4}).([0-9]*)$/);
        if (m) {
            var date = new Date(m[1], m[2] - 1);
            return date;
        }


        m = s.match(/^([0-9]{4}).([0-9]*).([0-9]*)/);
        if (m) {
            var date = new Date(m[1], m[2] - 1, m[3]);
            return date;
        }


        m = s.match(/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/);
        if (!m) return null;
        else {
            var date = new Date(m[3], m[1] - 1, m[2]);
            return date;
        }
    }
    var date = new Date(m[1], 0, 1);
    if (ignoreTimezone || !m[14]) {
        var check = new Date(m[1], 0, 1, 9, 0);
        if (m[3]) {
            date.setMonth(m[3] - 1);
            check.setMonth(m[3] - 1);
        }
        if (m[5]) {
            date.setDate(m[5]);
            check.setDate(m[5]);
        }
        mini.fixDate(date, check);
        if (m[7]) {
            date.setHours(m[7]);
        }
        if (m[8]) {
            date.setMinutes(m[8]);
        }
        if (m[10]) {
            date.setSeconds(m[10]);
        }
        if (m[12]) {
            date.setMilliseconds(Number("0." + m[12]) * 1000);
        }
        mini.fixDate(date, check);
    } else {
        date.setUTCFullYear(
            m[1],
            m[3] ? m[3] - 1 : 0,
            m[5] || 1
        );
        date.setUTCHours(
            m[7] || 0,
            m[8] || 0,
            m[10] || 0,
            m[12] ? Number("0." + m[12]) * 1000 : 0
        );
        var offset = Number(m[16]) * 60 + (m[18] ? Number(m[18]) : 0);
        offset *= m[15] == '-' ? 1 : -1;
        date = new Date(+date + (offset * 60 * 1000));
    }
    return date;
}


mini.parseTime = function(s, format) {
    if (!s) return null;
    var n = parseInt(s);

    if (n == s && format) {
        d = new Date(0);

        var ch = format.charAt(0);

        if (ch == "H") {
            d.setHours(n);
        } else if (ch == "m") {
            d.setMinutes(n);
        } else if (ch == "s") {
            d.setSeconds(n);
        }
        if (isNaN(d)) d = null;
        return d;
    }

    var d = mini.parseDate(s);
    if (!d) {
        var ss = s.split(":");
        var t1 = parseInt(parseFloat(ss[0]));
        var t2 = parseInt(parseFloat(ss[1]));
        var t3 = parseInt(parseFloat(ss[2]));
        if (!isNaN(t1) && !isNaN(t2) && !isNaN(t3)) {
            d = new Date(0);
            d.setHours(t1);
            d.setMinutes(t2);
            d.setSeconds(t3);
        }
        if (!isNaN(t1) && (format == "H" || format == "HH")) {
            d = new Date(0);
            d.setHours(t1);
        } else if (!isNaN(t1) && !isNaN(t2) && (format == "H:mm" || format == "HH:mm")) {
            d = new Date(0);
            d.setHours(t1);
            d.setMinutes(t2);
        } else if (!isNaN(t1) && !isNaN(t2) && format == "mm:ss") {
            d = new Date(0);
            d.setMinutes(t1);
            d.setSeconds(t2);
        }
    }
    return d;
}





mini.dateInfo = {
    monthsLong: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
    monthsShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
    daysLong: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
    daysShort: ["日", "一", "二", "三", "四", "五", "六"],
    quarterLong: ['一季度', '二季度', '三季度', '四季度'],
    quarterShort: ['Q1', 'Q2', 'Q2', 'Q4'],
    halfYearLong: ['上半年', '下半年'],
    patterns: {
        "d": "yyyy-M-d",
        "D": "yyyy年M月d日",
        "f": "yyyy年M月d日 H:mm",
        "F": "yyyy年M月d日 H:mm:ss",
        "g": "yyyy-M-d H:mm",
        "G": "yyyy-M-d H:mm:ss",
        "m": "MMMd日",
        "o": "yyyy-MM-ddTHH:mm:ss.fff",
        "s": "yyyy-MM-ddTHH:mm:ss",
        "t": "H:mm",
        "T": "H:mm:ss",
        "U": "yyyy年M月d日 HH:mm:ss",
        "y": "yyyy年MM月"
    },
    tt: {
        "AM": "上午",
        "PM": "下午"
    },
    ten: {
        "Early": "上旬",
        "Mid": "中旬",
        "Late": "下旬"
    },
    today: '今天',
    clockType: 24
};


(function(window) {

    var mini = window.mini;
    if (!mini) mini = window.mini = {};






    var cultures = mini.cultures = {},
        cultureName = "en";

    mini.cultures[cultureName] = {
        name: cultureName,
        numberFormat: {
            number: {
                pattern: ["n", "-n"],
                decimals: 2,
                decimalsSeparator: ".",
                groupSeparator: ",",
                groupSize: [3]
            },
            percent: {
                pattern: ["n %", "-n %"],
                decimals: 2,
                decimalsSeparator: ".",
                groupSeparator: ",",
                groupSize: [3],
                symbol: "%"
            },
            currency: {
                pattern: ["$n", "($n)"],
                decimals: 2,
                decimalsSeparator: ".",
                groupSeparator: ",",
                groupSize: [3],
                symbol: "$"
            }
        }
    };

    function findCulture(cultureName) {
        return mini.cultures[cultureName];
    }

    function getCulture(cultureName) {
        if (cultureName && cultureName.name) return cultureName;
        return findCulture(cultureName) || mini.cultures.current;
    }

    mini.getCulture = getCulture;

    mini.culture = function(cultureName) {
        if (cultureName !== undefined) {
            mini.cultures.current = findCulture(cultureName);
        } else {
            return cultures.current;
        }
    };

    mini.culture(cultureName);






    var STRING = "string",
        NUMBER = "number",
        isArray = function(val) {
            return val && !!val.unshift;
        },
        numberRegExp = {
            2: /^\d{1,2}/,
            4: /^\d{4}/
        };

    function pad(number, digits, end) {
        number = number + "";
        digits = typeof digits == NUMBER ? digits : 2;

        var n = digits - number.length;
        if (n > 0) {
            var zeros = repeat(n, "0");
            return end ? number + zeros : zeros + number;
        }

        return number;
    }

    function repeat(n, c) {
        var s = "";
        while (n) {
            n -= 1;
            s += c;
        }
        return s;
    }

    var numberFormatRegExp = /^(n|c|p)(\d*)$/i,
        eRegExp = /^(e)(\d*)$/i,
        clearRegExp = /[^0#]/g,
        exponentRegExp = /[eE][\-+]?[0-9]+/;


    function doFormatNumber(number, format, options) {
        number = Math.abs(number);



        var isGroup = format.indexOf(",") != -1,
            formats = format.split("."),
            format0 = (formats[0] || "").replace(clearRegExp, ""),
            format1 = (formats[1] || "").replace(clearRegExp, ""),



            value = "",
            groupSize = options.groupSize[0],
            decimalsSeparator = options.decimalsSeparator,
            groupSeparator = options.groupSeparator;




        var index = format0.indexOf("0");
        format0 = index == -1 ? "0" : (format0.substr(index) || "0");


        var decimals = format1.length;
        var decimalPlaces = format1.substr(0, format1.lastIndexOf("0") + 1).length;





        function round2(number, fractionDigits) {
            return Math.round(number * Math.pow(10, fractionDigits)) / Math.pow(10, fractionDigits);
        }
        number = round2(number, decimals);

        var values = String(number).split(".");
        value0 = values[0];
        value1 = values[1] || "";




        if (value0) {
            value0 = pad(value0, format0.length);

            if (isGroup) {
                for (var i = 0; i < Math.floor((value0.length - (1 + i)) / 3); i++) {
                    value0 = value0.substring(0, value0.length - (4 * i + 3)) + groupSeparator + value0.substring(value0.length - (4 * i + 3));
                }
            }

            value += value0;
        }


        if (decimals > 0) {
            value += decimalsSeparator;








            value += pad(value1.substr(0, decimals), decimalPlaces, true);
        }

        return value;
    }

    function transformFormat(format, value, culture, formats) {

        var options = culture.numberFormat.number;

        var map = numberFormatRegExp.exec(format);
        if (map != null) {
            var f1 = map[1],
                f2 = map[2];

            if (f1 == "p") {
                options = culture.numberFormat.percent;
            } else if (f1 == "c") {
                options = culture.numberFormat.currency;
            }

            var decimals = f2 ? parseInt(f2) : options.decimals;
            var pattern = options.pattern[value < 0 ? 1 : 0];
            pattern = pattern.replace("n", "#,#" + (decimals > 0 ? "." + repeat(decimals, "0") : ""));

            format = format.replace(f1 + f2, pattern)
                .replace("$", culture.numberFormat.currency.symbol)
                .replace("%", culture.numberFormat.percent.symbol);

        } else {
            if (isNumberFormat(format)) {
                if (value < 0 && !formats[1]) format = "-" + format;
            }
        }

        return format;
    }

    function isNumberFormat(format) {
        return format.indexOf("0") != -1 || format.indexOf("#") != -1;
    }

    function getNumberFormat(format) {
        if (!format) return null;

        function getIndexs(format) {
            var begin = format.indexOf("0");
            var begin2 = format.indexOf("#");
            if (begin == -1 || (begin2 != -1 && begin2 < begin)) begin = begin2;

            var end = format.lastIndexOf("0");
            var end2 = format.lastIndexOf("#");
            if (end == -1 || (end2 != -1 && end2 > end)) end = end2;

            return [begin, end];
        }

        var indexs = getIndexs(format);
        var begin = indexs[0],
            end = indexs[1];


        return begin > -1 ? {
            begin: begin,
            end: end,
            format: format.substring(begin, end + 1)
        } : null;
    }

    function formatNumber(number, format, culture) {
        if (typeof number != NUMBER) return "";
        if (!format) return String(number);

        var formats = format.split(";");
        format = formats[0];
        if (number < 0 && formats.length >= 2) format = formats[1];
        if (number == 0 && formats.length >= 3) format = formats[2];

        var culture = getCulture(culture),
            numberFormat = culture.numberFormat.number,
            percentFormat = culture.numberFormat.percent,
            currencyFormat = culture.numberFormat.currency,
            format = transformFormat(format, number, culture, formats),
            isCurrency = format.indexOf(currencyFormat.symbol) != -1,
            isPercent = format.indexOf(percentFormat.symbol) != -1,
            isDecimals = format.indexOf(".") != -1,
            isFormat = isNumberFormat(format),
            options = isCurrency ? currencyFormat : (isPercent ? currencyFormat : numberFormat),
            number = isPercent ? number * 100 : number;



        var ms = eRegExp.exec(format);
        if (ms) {
            var decimals = parseInt(ms[2]);
            return isNaN(decimals) ? number.toExponential() : number.toExponential(decimals);
        }

        if (!isFormat) return format;


        var value = "",
            nf = getNumberFormat(format);
        if (nf != null) {
            value = doFormatNumber(number, nf.format, options);
            value = format.substr(0, nf.begin) + value + format.substr(nf.end + 1);
        } else {
            value = format;
        }

        return value;
    }

    mini.parseInt = function(value, culture, format) {
        var result = mini.parseFloat(value, culture, format);
        if (result) {
            result = result | 0;
        }
        return result;
    }

    mini.parseFloat = function(value, culture, format) {

        if (!value && value !== 0) {
            return null;
        }

        if (typeof value === NUMBER) {
            return value;
        }

        if (format && format.split(";")[2] == value) return 0;


        if (exponentRegExp.test(value)) {
            value = parseFloat(value);
            if (isNaN(value)) {
                value = null;
            }
            return value;
        }

        value = value.toString();
        culture = mini.getCulture(culture);

        var numberFormat = culture.numberFormat,
            number = numberFormat.number,
            percent = numberFormat.percent,
            currency = numberFormat.currency,
            isPercent = value.indexOf(percent.symbol) != -1,
            isCurrency = value.indexOf(currency.symbol) != -1,
            number = isCurrency ? currency : (isPercent ? percent : number),
            pattern = number.pattern[1],
            decimals = number.decimals,
            decimalsSeparator = number.decimalsSeparator,
            groupSeparator = number.groupSeparator,
            negative = value.indexOf("-") > -1;


        function getValue(value, format, _negative) {
            var nf = getNumberFormat(format);
            if (nf) {
                var f1 = format.substr(0, nf.begin),
                    f2 = format.substr(nf.end + 1);
                if (value.indexOf(f1) == 0 && value.indexOf(f2) > -1) {
                    value = value.replace(f1, "").replace(f2, "");
                    negative = _negative;
                }
            }
            return value;
        }

        if (!format) {
            if (negative == false) {
                format = pattern.replace("n", "#,#" + (decimals > 0 ? "." + repeat(decimals, "0") : ""))
                    .replace("$", currency.symbol)
                    .replace("%", percent.symbol);
                value = getValue(value, format, true);
            }
        } else {

            var formats = format.split(";");
            if (formats[1]) {
                format = formats[1];
                value = getValue(value, format, true);
            } else {

                format = formats[0];
                var temp = value;
                value = getValue(temp, format, false);
                if (temp == value) {
                    value = getValue(temp, "-" + format, true);
                }
            }


        }


        value = value.split(groupSeparator).join("")
            .replace(decimalsSeparator, ".");

        var ms = value.match(/([0-9,.]+)/g);
        if (ms == null) return null;
        value = ms[0];


        value = parseFloat(value);

        if (isNaN(value)) {
            value = null;
        } else if (negative) {
            value *= -1;
        }

        if (value && isPercent) {
            value /= 100;
        }

        return value;
    }

    mini.formatNumber = formatNumber;

})(window);





mini.Keyboard = {
    Left: 37,
    Top: 38,
    Right: 39,
    Bottom: 40,

    PageUp: 33,
    PageDown: 34,
    End: 35,
    Home: 36,

    Enter: 13,
    ESC: 27,
    Space: 32,
    Tab: 9,
    Del: 46,

    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123
};

var ua = navigator.userAgent.toLowerCase(),
    check = function(regex) {
        return regex.test(ua);
    },
    DOC = document,
    isStrict = document.compatMode == "CSS1Compat",
    version = function(is, regex) {
        var m;
        return (is && (m = regex.exec(ua))) ? parseFloat(m[1]) : 0;
    },
    docMode = document.documentMode,
    isOpera = check(/opera/),
    isOpera10_5 = isOpera && check(/version\/10\.5/),
    isChrome = check(/\bchrome\b/),
    isWebKit = check(/webkit/),
    isSafari = !isChrome && check(/safari/),
    isSafari2 = isSafari && check(/applewebkit\/4/),
    isSafari3 = isSafari && check(/version\/3/),
    isSafari4 = isSafari && check(/version\/4/),
    isSafari5_0 = isSafari && check(/version\/5\.0/),
    isSafari5 = isSafari && check(/version\/5/),
    isIE = !isOpera && check(/msie/),
    isIE7 = isIE && ((check(/msie 7/) && docMode != 8 && docMode != 9 && docMode != 10) || docMode == 7),
    isIE8 = isIE && ((check(/msie 8/) && docMode != 7 && docMode != 9 && docMode != 10) || docMode == 8),
    isIE9 = isIE && ((check(/msie 9/) && docMode != 7 && docMode != 8 && docMode != 10) || docMode == 9),
    isIE10 = isIE && ((check(/msie 10/) && docMode != 7 && docMode != 8 && docMode != 9) || docMode == 10),
    isIE6 = isIE && !isIE7 && !isIE8 && !isIE9 && !isIE10,
    isIE11 = (ua.indexOf("trident") > -1 && ua.indexOf("rv") > -1),
    isIE = isIE || isIE11,

    isFirefox = navigator.userAgent.indexOf("Firefox") > 0,
    isGecko = !isWebKit && check(/gecko/),
    isGecko3 = isGecko && check(/rv:1\.9/),
    isGecko4 = isGecko && check(/rv:2\.0/),
    isGecko5 = isGecko && check(/rv:5\./),
    isGecko10 = isGecko && check(/rv:10\./),
    isFF3_0 = isGecko3 && check(/rv:1\.9\.0/),
    isFF3_5 = isGecko3 && check(/rv:1\.9\.1/),
    isFF3_6 = isGecko3 && check(/rv:1\.9\.2/),
    isWindows = check(/windows|win32/),
    isMac = check(/macintosh|mac os x/),
    isAir = check(/adobeair/),
    isLinux = check(/linux/),
    scrollbarSize = null,
    chromeVersion = version(true, /\bchrome\/(\d+\.\d+)/),
    firefoxVersion = version(true, /\bfirefox\/(\d+\.\d+)/),
    ieVersion = version(isIE, /msie (\d+\.\d+)/),
    IE_V = isIE ? parseInt(ieVersion) : -1,
    operaVersion = version(isOpera, /version\/(\d+\.\d+)/),
    safariVersion = version(isSafari, /version\/(\d+\.\d+)/),
    webKitVersion = version(isWebKit, /webkit\/(\d+\.\d+)/),
    isSecure = /^https/i.test(window.location.protocol),
    isBorderBox = isIE && !isStrict,
    supportTransition = (function() {
        var s = document.createElement('p').style,
            r = 'transition' in s || 'WebkitTransition' in s || 'MozTransition' in s || 'msTransition' in s || 'OTransition' in s;
        s = null;
        return r;
    })();




if (isIE6) {
    try {
        DOC.execCommand("BackgroundImageCache", false, true);
    } catch (e) {}
}
mini.boxModel = !isBorderBox;
mini.isIE = isIE;
mini.isIE6 = isIE6;
mini.isIE7 = isIE7;
mini.isIE8 = isIE8;
mini.isIE9 = isIE9;
mini.isIE10 = isIE10;
mini.isIE11 = isIE11;
mini.IE_V = IE_V;
mini.isFirefox = isFirefox;
mini.isOpera = isOpera;
mini.isSafari = isSafari;
mini.isChrome = isChrome;
mini.supportTransition = supportTransition;

if (jQuery) jQuery.boxModel = mini.boxModel;


mini.scrollBarSize = function() {
    if (mini.__scrollBarSize) {
        return mini.__scrollBarSize;
    }
    var outer = document.createElement("div");
    outer.style.visibility = "hidden";
    outer.style.width = "100px";
    outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps
    document.body.appendChild(outer);
    var widthNoScroll = outer.offsetWidth;
    // force scrollbars
    outer.style.overflow = "scroll";
    // add innerdiv
    var inner = document.createElement("div");
    inner.style.width = "100%";
    outer.appendChild(inner);
    var widthWithScroll = inner.offsetWidth;
    // remove divs
    outer.parentNode.removeChild(outer);
    mini.__scrollBarSize = widthNoScroll - widthWithScroll;
    return mini.__scrollBarSize;
};


mini.noBorderBox = false;
if (jQuery.boxModel == false && isIE && isIE9 == false) mini.noBorderBox = true;

mini.MouseButton = {
    Left: 0,
    Middle: 1,
    Right: 2
}
if (isIE && !isIE9 && !isIE10) {
    mini.MouseButton = {
        Left: 1,
        Middle: 4,
        Right: 2
    }
}



mini.append = function(to, html) {
    to = mini.byId(to);
    if (!html || !to) return;
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
            if (!html) return;
            to.appendChild(html);
            return html;
        } else {
            if (html.indexOf("<tr") == 0) {
                return jQuery(to).append(html)[0].lastChild;
                return;
            }

            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
            while (d.firstChild) {
                to.appendChild(d.firstChild);
            }
            return html;
        }
    } else {
        to.appendChild(html);
        return html;
    }


}
mini.prepend = function(to, html) {
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
        } else {
            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
        }
    }
    return jQuery(to).prepend(html)[0].firstChild;
}
mini.after = function(to, html) {
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
        } else {
            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
        }
    }
    if (!html || !to) return;
    to.nextSibling ? to.parentNode.insertBefore(html, to.nextSibling) : to.parentNode.appendChild(html);
    return html;
}
mini.before = function(to, html) {
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
        } else {
            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
        }
    }
    if (!html || !to) return;
    to.parentNode.insertBefore(html, to);

    return html;
}

mini.__wrap = document.createElement('div');
mini.createElements = function(html) {
    mini.removeChilds(mini.__wrap);
    var isTr = html.indexOf("<tr") == 0;
    if (isTr) {
        html = '<table>' + html + '</table>';
    }
    mini.__wrap.innerHTML = html;
    return isTr ? mini.__wrap.firstChild.rows : mini.__wrap.childNodes;
}

mini_byId = function(id, context) {
    if (typeof id == "string") {
        if (id.charAt(0) == '#') id = id.substr(1);
        var el = document.getElementById(id);
        if (el) return el;
        if (context && !mini.isAncestor(document.body, context)) {


            var els = context.getElementsByTagName("*");
            for (var i = 0, l = els.length; i < l; i++) {
                var el = els[i];
                if (el.id == id) return el;
            }
            el = null;
        }
        return el;
    } else {
        return id;
    }
}
mini_hasClass = function(el, className) {
    el = mini.byId(el);
    if (!el) return;
    if (!el.className) return false;
    var clss = String(el.className).split(" ");
    return clss.indexOf(className) != -1;
}
mini_addClass = function(el, className) {
    if (!className) return;
    if (mini.hasClass(el, className) == false) {
        jQuery(el).addClass(className);
    }
}
mini_removeClass = function(el, className) {
    if (!className) return;
    jQuery(el).removeClass(className);



}

mini_getMargins = function(el) {
    el = mini.byId(el);
    var jq = jQuery(el);
    return {
        top: parseInt(jq.css("margin-top"), 10) || 0,
        left: parseInt(jq.css("margin-left"), 10) || 0,
        bottom: parseInt(jq.css("margin-bottom"), 10) || 0,
        right: parseInt(jq.css("margin-right"), 10) || 0
    };
}
mini_getBorders = function(el) {
    el = mini.byId(el);
    var jq = jQuery(el);
    return {
        top: parseInt(jq.css("border-top-width"), 10) || 0,
        left: parseInt(jq.css("border-left-width"), 10) || 0,
        bottom: parseInt(jq.css("border-bottom-width"), 10) || 0,
        right: parseInt(jq.css("border-right-width"), 10) || 0
    };
}

mini_getPaddings = function(el) {
    el = mini.byId(el);
    var jq = jQuery(el);
    return {
        top: parseInt(jq.css("padding-top"), 10) || 0,
        left: parseInt(jq.css("padding-left"), 10) || 0,
        bottom: parseInt(jq.css("padding-bottom"), 10) || 0,
        right: parseInt(jq.css("padding-right"), 10) || 0
    };
}

mini_setWidth = function(el, width) {
    el = mini.byId(el);
    width = parseInt(width);
    if (isNaN(width) || !el) return;
    if (jQuery.boxModel) {
        var p = mini.getPaddings(el);
        var b = mini.getBorders(el);
        width = width - p.left - p.right - b.left - b.right;


    }


    if (width < 0) width = 0;
    el.style.width = width + "px";
}
mini_setHeight = function(el, height) {
    el = mini.byId(el);
    height = parseInt(height);
    if (isNaN(height) || !el) return;
    if (jQuery.boxModel) {
        var p = mini.getPaddings(el);
        var b = mini.getBorders(el);
        height = height - p.top - p.bottom - b.top - b.bottom;


    }


    if (height < 0) height = 0;
    el.style.height = height + "px";
}
mini_getWidth = function(el, content) {
    el = mini.byId(el);
    if (el.style.display == "none" || el.type == "text/javascript") return 0;
    return content ? jQuery(el).width() : jQuery(el).outerWidth();
}
mini_getHeight = function(el, content) {
    el = mini.byId(el);
    if (el.style.display == "none" || el.type == "text/javascript") return 0;
    return content ? jQuery(el).height() : jQuery(el).outerHeight();
}
mini_setBox = function(el, x, y, width, height) {
    if (y === undefined) {
        y = x.y;
        width = x.width;
        height = x.height;
        x = x.x;
    }
    mini.setXY(el, x, y);
    mini.setWidth(el, width);
    mini.setHeight(el, height);
}
mini_getBox = function(el) {
    var xy = mini.getXY(el);
    var box = {
        x: xy[0],
        y: xy[1],
        width: mini.getWidth(el),
        height: mini.getHeight(el)
    };
    box.left = box.x;
    box.top = box.y;
    box.right = box.x + box.width;
    box.bottom = box.y + box.height;
    return box;
}
mini_setStyle = function(el, style) {
    el = mini.byId(el);
    if (!el || typeof style != "string") return;

    var jq = jQuery(el);
    var styles = style.toLowerCase().split(";");
    for (var i = 0, l = styles.length; i < l; i++) {
        var s = styles[i];
        var ss = s.split(":");
        if (ss.length > 1) {
            if (ss.length > 2) {
                var s1 = ss[0].trim();
                ss.removeAt(0);
                var s2 = ss.join(":").trim();
                jq.css(s1, s2);
            } else {
                jq.css(ss[0].trim(), ss[1].trim());
            }
        }
    }
}

mini_getStyle = function() {
    var f = document.defaultView;
    return new Function('el', 'style', [
        "style.indexOf('-')>-1 && (style=style.replace(/-(\\w)/g,function(m,a){return a.toUpperCase()}));",
        "style=='float' && (style='",
        f ? 'cssFloat' : 'styleFloat',
        "');return el.style[style] || ",
        f ? 'window.getComputedStyle(el, null)[style]' : 'el.currentStyle[style]',
        ' || null;'
    ].join(''));
}();
mini_isAncestor = function(p, c) {
    var ret = false;
    p = mini.byId(p);
    c = mini.byId(c);
    if (p === c) return true;
    if (p && c) {
        if (p.contains) {
            try {
                return p.contains(c);
            } catch (e) {
                return false;
            }
        } else
        if (p.compareDocumentPosition) {
            return !!(p.compareDocumentPosition(c) & 16);
        } else {
            while (c = c.parentNode) {
                ret = c == p || ret;
            }
        }
    }
    return ret;
}
mini_findParent = function(p, cls, maxDepth) {
    p = mini.byId(p);
    var b = document.body,
        depth = 0,
        stopEl;
    maxDepth = maxDepth || 50;
    if (typeof maxDepth != "number") {
        stopEl = mini.byId(maxDepth);
        maxDepth = 10;
    }
    while (p && p.nodeType == 1 && depth < maxDepth && p != b && p != stopEl) {
        if (mini.hasClass(p, cls)) {
            return p;
        }
        depth++;
        p = p.parentNode;
    }
    return null;
}
mini.copyTo(mini, {
    byId: mini_byId,
    hasClass: mini_hasClass,
    addClass: mini_addClass,
    removeClass: mini_removeClass,

    getMargins: mini_getMargins,
    getBorders: mini_getBorders,
    getPaddings: mini_getPaddings,
    setWidth: mini_setWidth,
    setHeight: mini_setHeight,
    getWidth: mini_getWidth,
    getHeight: mini_getHeight,
    setBox: mini_setBox,
    getBox: mini_getBox,

    setStyle: mini_setStyle,
    getStyle: mini_getStyle,

    repaint: function(el) {
        if (!el) el = document.body;
        mini.addClass(el, "mini-repaint");
        setTimeout(function() {
            mini.removeClass(el, "mini-repaint");
        }, 1);
    },

    getSize: function(el, content) {
        return {
            width: mini.getWidth(el, content),
            height: mini.getHeight(el, content)
        };
    },
    setSize: function(el, width, height) {
        mini.setWidth(el, width);
        mini.setHeight(el, height);
    },
    setX: function(el, x) {
        x = parseInt(x);
        var xy = jQuery(el).offset();

        var y = parseInt(xy.top);
        if (y === undefined) y = xy[1];
        mini.setXY(el, x, y);
    },
    setY: function(el, y) {
        y = parseInt(y);
        var xy = jQuery(el).offset();
        var x = parseInt(xy.left);
        if (x === undefined) x = xy[0];
        mini.setXY(el, x, y);
    },
    setXY: function(el, x, y) {

        var xy = {
            left: parseInt(x),
            top: parseInt(y)
        };
        jQuery(el).offset(xy);








        if (jQuery.fn.jquery && jQuery.fn.jquery.indexOf("1.4") != -1) {
            jQuery(el).offset(xy);
        }
    },
    getXY: function(el) {

        var xy = jQuery(el).offset();

        return [parseInt(xy.left), parseInt(xy.top)];
    },
    getViewportBox: function() {


        var w = jQuery(window).width(),
            h = jQuery(window).height();
        var x = jQuery(document).scrollLeft(),
            y = jQuery(document.body).scrollTop();
        if (y == 0 && document.documentElement) y = document.documentElement.scrollTop;

        return {
            x: x,
            y: y,
            top: y,
            left: x,
            width: w,
            height: h,
            right: x + w,
            bottom: y + h
        };
    },
    showAt: function(options) {
        var $ = jQuery;

        options = jQuery.extend({
            el: null,

            x: 'center',
            y: 'center',
            offset: [0, 0],
            fixed: false,
            zindex: mini.getMaxZIndex(),
            timeout: 0,
            timeoutHandler: null,
            constrain: false,
            animation: false
        }, options);
        var el = jQuery(options.el)[0],
            x = options.x,
            y = options.y,
            offsetx = options.offset[0],
            offsety = options.offset[1],
            zindex = options.zindex,
            fixed = options.fixed,
            animation = options.animation;
        if (!el) return;

        if (options.timeout) {
            setTimeout(function() {
                if (options.timeoutHandler) options.timeoutHandler();

            }, options.timeout);
        }



        var s = ';position:absolute;display:block;left:auto;top:auto;right:auto;bottom:auto;margin:0;z-index:' + zindex + ';';
        mini.setStyle(el, s);
        var s = "";

        if (options && mini.isNumber(options.x) && mini.isNumber(options.y)) {
            if (options.fixed && !mini.isIE6) {
                s += ";position:fixed;";
            }
            mini.setStyle(el, s);
	    if (options.constrain) {
                var winWidth = jQuery(window).width(),
                    winHeight = jQuery(window).height(),
                    elSize = mini.getSize(el);
                if (x + elSize.width > winWidth) x = winWidth - elSize.width;
                if (x < 0) x = 0;
                if (y + elSize.height > winHeight) y = winHeight - elSize.height;
                if (y < 0) y = 0
            }
            mini.setXY(el, x, y);
            return;
        }



        if (x == 'left') {
            s += 'left:' + offsetx + 'px;';
        } else if (x == 'right') {
            s += 'right:' + offsetx + 'px;';
        } else {
            var size = mini.getSize(el);
            s += 'left:50%;margin-left:' + (-size.width * 0.5) + 'px;';
        }

        if (y == 'top') {
            s += 'top:' + offsety + 'px;';
        } else if (y == 'bottom') {
            s += 'bottom:' + offsety + 'px;';
        } else {
            var size = mini.getSize(el);
            s += 'top:50%;margin-top:' + (-size.height * 0.5) + 'px;';
        }

        if (fixed && !mini.isIE6) {
            s += 'position:fixed';
        }
        mini.setStyle(el, s);

    },
    getChildNodes: function(el, all) {
        el = mini.byId(el);
        if (!el) return;
        var nodes = el.childNodes;
        var cs = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var c = nodes[i];
            if (c.nodeType == 1 || all === true) {
                cs.push(c);
            }
        }
        return cs;
    },


    removeNode: isIE ? function() {
        var d;
        return function(n) {
            if (n && n.tagName != 'BODY') {
                d = d || document.createElement('div');
                d.appendChild(n);
                d.innerHTML = '';
            }
        }
    }() : function(n) {
        if (n && n.parentNode && n.tagName != 'BODY') {
            n.parentNode.removeChild(n);
        }
    },





    removeChilds: function(el, butEl) {
        el = mini.byId(el);
        if (!el) return;
        var cs = mini.getChildNodes(el, true);
        for (var i = 0, l = cs.length; i < l; i++) {
            var c = cs[i];
            if (butEl && c == butEl) {} else {
                el.removeChild(cs[i]);
            }
        }
    },
    isAncestor: mini_isAncestor,
    findParent: mini_findParent,
    findChild: function(el, cls) {
        el = mini.byId(el);
        var els = el.getElementsByTagName('*');
        for (var i = 0, l = els.length; i < l; i++) {
            var el = els[i];
            if (mini.hasClass(el, cls)) return el;
        }
    },
    isAncestor: function(p, c) {
        var ret = false;
        p = mini.byId(p);
        c = mini.byId(c);
        if (p === c) return true;
        if (p && c) {
            if (p.contains) {
                try {
                    return p.contains(c);
                } catch (e) {
                    return false
                }
            } else
            if (p.compareDocumentPosition) {
                return !!(p.compareDocumentPosition(c) & 16);
            } else {
                while (c = c.parentNode) {
                    ret = c == p || ret;
                }
            }
        }
        return ret;
    },
    getOffsetsTo: function(el, target) {
        var o = this.getXY(el),
            e = this.getXY(target);
        return [o[0] - e[0], o[1] - e[1]];
    },
    scrollIntoView: function(el, container, hscroll) {
        var c = mini.byId(container) || document.body,
            o = this.getOffsetsTo(el, c),
            l = o[0] + c.scrollLeft,
            t = o[1] + c.scrollTop,
            b = t + el.offsetHeight,
            r = l + el.offsetWidth,
            ch = c.clientHeight,
            ct = parseInt(c.scrollTop, 10),
            cl = parseInt(c.scrollLeft, 10),
            cb = ct + ch,
            cr = cl + c.clientWidth;

        if (el.offsetHeight > ch || t < ct) {
            c.scrollTop = t;
        } else if (b > cb) {
            c.scrollTop = b - ch;
        }
        c.scrollTop = c.scrollTop;

        if (hscroll !== false) {
            if (el.offsetWidth > c.clientWidth || l < cl) {
                c.scrollLeft = l;
            } else if (r > cr) {
                c.scrollLeft = r - c.clientWidth;
            }
            c.scrollLeft = c.scrollLeft;
        }
        return this;
    },
    getScrollOffset: function() {
        if (!mini._scrollOffset) {
            var el = document.createElement('div');

            el.style.cssText = 'width:100px;background:#eee;height:50px;overflow:scroll;padding:1px;position:absolute;left:-1000px;top:0;box-sizing:content-box;-moz-box-sizing: content-box;';

            document.body.appendChild(el);

            mini._scrollOffset = el.offsetWidth - el.clientWidth;

            el.parentNode.removeChild(el);
        }
        return mini._scrollOffset;
    },
    setOpacity: function(el, opacity) {
        jQuery(el).css({
            "opacity": opacity
        });
    },
    selectable: function(el, selected) {
        el = mini.byId(el);
        if (!!selected) {
            jQuery(el).removeClass('mini-unselectable');
            if (isIE) el.unselectable = "off";
            else {
                el.style.MozUserSelect = '';
                el.style.KhtmlUserSelect = '';
                el.style.UserSelect = '';

            }
        } else {
            jQuery(el).addClass('mini-unselectable');
            if (isIE) el.unselectable = 'on';
            else {
                el.style.MozUserSelect = 'none';
                el.style.UserSelect = 'none';
                el.style.KhtmlUserSelect = 'none';
            }
        }
    },
    selectRange: function(el, iStart, iEnd) {
        if (el.createTextRange) {
            var oRange = el.createTextRange();
            oRange.moveStart("character", iStart);
            oRange.moveEnd("character", iEnd - el.value.length);
            oRange.select();
        } else {
            if (el.setSelectionRange) {
                el.setSelectionRange(iStart, iEnd);
            }
        }
        try {
            el.focus();
        } catch (e) {}
    },
    getSelectRange: function(el) {
        el = mini.byId(el);
        if (!el) return;
        try {
            el.focus();
        } catch (e) {}
        var start = 0,
            end = 0;
        if (el.createTextRange && document.selection) {

            var r = document.selection.createRange().duplicate();
            r.moveEnd('character', el.value.length);
            if (r.text === '') {
                start = el.value.length;
            } else {
                start = el.value.lastIndexOf(r.text);
            }


            var r = document.selection.createRange().duplicate();
            r.moveStart('character', -el.value.length);
            end = r.text.length;

        } else {
            start = el.selectionStart;
            end = el.selectionEnd;
        }

        return [start, end];
    }



});
(function() {
    var fixAttr = {
        tabindex: 'tabIndex',
        readonly: 'readOnly',
        'for': 'htmlFor',
        'class': 'className',
        maxlength: 'maxLength',
        cellspacing: 'cellSpacing',
        cellpadding: 'cellPadding',
        rowspan: 'rowSpan',
        colspan: 'colSpan',
        usemap: 'useMap',
        frameborder: 'frameBorder',
        contenteditable: 'contentEditable'
    };

    var div = document.createElement('div');
    div.setAttribute('class', 't');
    var supportSetAttr = div.className === 't';

    mini.setAttr = function(el, name, val) {
        el.setAttribute(supportSetAttr ? name : (fixAttr[name] || name), val);
    }

    mini.getAttr = function(el, name) {
        if (name == "height") return $(el).attr("height");

        if (name == "value" && (isIE6 || isIE7)) {
            var a = el.attributes[name]
            return a ? a.value : null;
        }
	if (!el.getAttribute) return null;
        var v = el.getAttribute(supportSetAttr ? name : (fixAttr[name] || name));

        if (typeof v == "function" || name == "maxLength") {
            var o = el.attributes[name];
            if (o) v = o.value;
        }


        if (!v && name == "onload") {
            var node = el.getAttributeNode ? el.getAttributeNode(name) : null;
            if (node) {
                v = node.nodeValue;
            }
        }

        return v;
    }



})()







mini_preventDefault = function() {
    if (window.event) {
        window.event.returnValue = false;
    }
}
mini_stopPropogation = function() {
    if (window.event) {
        window.event.cancelBubble = true;
    }
}
mini_onOne = function(el, type, fn, scope) {


    if (!el) return;
    var name = "on" + type.toLowerCase();

    el[name] = function(e) {
        e = e || window.event;
        if (!e.target) {
            e.target = e.srcElement;
        }
        if (!e.preventDefault) {
            e.preventDefault = mini_preventDefault;
        }
        if (!e.stopPropogation) {
            e.stopPropogation = mini_stopPropogation;
        }
        var ret = fn.call(scope, e);
        if (ret === false) return false;
    }
}



mini_on = function(el, type, fn, scope) {
    el = mini.byId(el);
    scope = scope || el;
    if (!el || !type || !fn || !scope) return false
    var listener = mini.findListener(el, type, fn, scope);
    if (listener) return false;
    var method = mini.createDelegate(fn, scope);
    mini.listeners.push([el, type, fn, scope, method]);
    if (mini.isFirefox && type == 'mousewheel') type = 'DOMMouseScroll';
    jQuery(el).on(type, method);
};
mini_un = function(el, type, fn, scope) {
    el = mini.byId(el);
    scope = scope || el;
    if (!el || !type || !fn || !scope) return false
    var listener = mini.findListener(el, type, fn, scope);
    if (!listener) return false;
    if (!mini._destroying) {
        mini.listeners.remove(listener);
    }
    if (mini.isFirefox && type == 'mousewheel') type = 'DOMMouseScroll';
    jQuery(el).off(type, listener[4]);
};
mini.copyTo(mini, {
    listeners: [],
    on: mini_on,
    un: mini_un,
    _getListeners: function() {
        var listeners = mini.listeners;









        return listeners;
    },
    findListener: function(el, type, fn, scope) {
        el = mini.byId(el);
        scope = scope || el;
        if (!el || !type || !fn || !scope) return false
        var listeners = mini._getListeners();

        for (var i = listeners.length - 1; i >= 0; i--) {
            var listener = listeners[i];
            try {
                if (listener[0] == el &&
                    listener[1] == type &&
                    listener[2] == fn &&
                    listener[3] == scope
                ) {
                    return listener;
                }
            } catch (ex) {}

        }
    },
    clearEvent: function(el, type) {
        el = mini.byId(el);
        if (!el) return false;

        if (mini._destroying) {
            jQuery(el).off();
            return;
        }

        var listeners = mini._getListeners();
        for (var i = listeners.length - 1; i >= 0; i--) {
            var listener = listeners[i];

            if (listener[0] == el) {
                if (!type || type == listener[1]) {
                    mini.un(el, listener[1], listener[2], listener[3]);
                }
            }

        }
        el.onmouseover = el.onmousedown = null;
    }




});



mini.__windowResizes = [];
mini.onWindowResize = function(fn, scope) {
    mini.__windowResizes.push([fn, scope]);
}
mini.on(window, "resize", function(e) {
    var events = mini.__windowResizes;
    for (var i = 0, l = events.length; i < l; i++) {
        var event = events[i];
        event[0].call(event[1], e);
    }
});


mini.htmlEncode = function(str) {
    if (typeof str !== "string") return str;
    var s = "";
    if (str.length == 0) return "";
    s = str;
    s = s.replace(/&/g, "&amp;");
    s = s.replace(/</g, "&lt;");
    s = s.replace(/>/g, "&gt;");
    s = s.replace(/ /g, "&nbsp;");
    s = s.replace(/\'/g, "&#39;");
    s = s.replace(/\"/g, "&quot;");

    return s;
}

mini.htmlDecode = function(str) {
    if (typeof str !== "string") return str;
    var s = "";
    if (str.length == 0) return "";
    s = str.replace(/&gt;/g, "&");
    s = s.replace(/&lt;/g, "<");
    s = s.replace(/&gt;/g, ">");
    s = s.replace(/&nbsp;/g, " ");
    s = s.replace(/&#39;/g, "\'");
    s = s.replace(/&quot;/g, "\"");

    return s;
}

(function() {

    var keyPaths = [];

    var saveKeyPath = function(path) {
        keyPaths.push({
            sign: (path[0] === '+' || path[0] === '-') ? parseInt(path.shift() + 1) : 1,
            path: path
        });
    };

    var valueOf = function(object, path) {
        var ptr = object;
        for (var i = 0, l = path.length; i < l; i++) ptr = ptr[path[i]];
        return ptr;
    };

    var comparer = function(a, b) {
        for (var i = 0, l = keyPaths.length; i < l; i++) {
            aVal = valueOf(a, keyPaths[i].path);
            bVal = valueOf(b, keyPaths[i].path);
            if (aVal > bVal) return keyPaths[i].sign;
            if (aVal < bVal) return -keyPaths[i].sign;
        }
        return 0;
    };

    Array.prototype.sortBy = function() {
        keyPaths = [];
        for (var i = 0, l = arguments.length; i < l; i++) {
            switch (typeof(arguments[i])) {
                case "object":
                    saveKeyPath(arguments[i]);
                    break;
                case "string":
                    saveKeyPath(arguments[i].match(/[+-]|[^.]+/g));
                    break;
            }
        }
        return this.sort(comparer);
    };

})();

mini.copyTo(Array.prototype, {
    add: Array.prototype.enqueue = function(item) {
        this[this.length] = item;
        return this;
    },
    maxBy: function(field) {
        var arr = mini.pluck(this, field);
        return arr.reduce(function(pre, cur) {
            return Math.max(pre, cur);
        });
    },
    groupBy: function(field) {
        var arr = this;
        var grouped = {};
        mini.forEach(arr, function(obj) {
            var groupname = obj[field];
            if (groupname in grouped) {
                grouped[groupname].push(obj);
            } else {
                grouped[groupname] = [obj];
            }
        });
        return grouped;
    },
    uniq: function() {
        var arr = this;
        arr = $.grep(arr, function(v, k) {
            return $.inArray(v, arr) === k;
        })
        return arr;
    },
    uniqBy: function(iteratee) {
        if (typeof iteratee != 'function') {
            var name = iteratee;
            iteratee = function(v, k, arr) {
                for (var i = 0, len = arr.length; i < len; i++) {
                    if (arr[i][name] == v[name]) {
                        return i == k;
                    }
                }
                return false;
            }
        }
        var arr = this;
        arr = $.grep(arr, function(v, k) {
            return iteratee(v, k, arr)
        })
        return arr;
    },
    getRange: function(start, end) {
        var arr = [];
        for (var i = start; i <= end; i++) {
            var o = this[i];
            if (o) {
                arr[arr.length] = o;
            }
        }
        return arr;
    },
    addRange: function(array) {
        for (var i = 0, j = array.length; i < j; i++) this[this.length] = array[i];
        return this;
    },
    clear: function() {
        this.length = 0;
        return this;
    },
    clone: function() {
        if (this.length === 1) {
            return [this[0]];
        } else {
            return Array.apply(null, this);
        }
    },
    contains: function(item) {
        return (this.indexOf(item) >= 0);
    },
    indexOf: function(item, from) {
        var len = this.length;
        for (var i = (from < 0) ? Math.max(0, len + from) : from || 0; i < len; i++) {
            if (this[i] === item) return i;
        }
        return -1;
    },
    dequeue: function() {
        return this.shift();
    },
    insert: function(index, item) {
        this.splice(index, 0, item);
        return this;
    },
    insertRange: function(index, items) {
        for (var i = items.length - 1; i >= 0; i--) {
            var item = items[i];
            this.splice(index, 0, item);

        }
        return this;
    },
    remove: function(item) {
        var index = this.indexOf(item);
        if (index >= 0) {
            this.splice(index, 1);
        }
        return (index >= 0);
    },
    removeAt: function(index) {
        var ritem = this[index];
        this.splice(index, 1);
        return ritem;
    },
    removeRange: function(items) {
        items = items.clone();
        for (var i = 0, l = items.length; i < l; i++) {
            this.remove(items[i]);
        }
    },
    reduce: Array.prototype.reduce || function(callback /*, initialValue*/ ) {
        if (this === null) {
            throw new TypeError('Array.prototype.reduce called on null or undefined');
        }
        if (typeof callback !== 'function') {
            throw new TypeError(callback + ' is not a function');
        }
        // 1. Let O be ? ToObject(this value).
        var o = Object(this);
        // 2. Let len be ? ToLength(? Get(O, "length")).
        var len = o.length >>> 0;
        // Steps 3, 4, 5, 6, 7
        var k = 0;
        var value;

        if (arguments.length == 2) {
            value = arguments[1];
        } else {
            while (k < len && !(k in o)) {
                k++;
            }

            // 3. If len is 0 and initialValue is not present, throw a TypeError exception.
            if (k >= len) {
                throw new TypeError('Reduce of empty array with no initial value');
            }
            value = o[k++];
        }

        // 8. Repeat, while k < len
        while (k < len) {
            // a. Let Pk be ! ToString(k).
            // b. Let kPresent be ? HasProperty(O, Pk).
            // c. If kPresent is true, then
            //    i. Let kValue be ? Get(O, Pk).
            //    ii. Let accumulator be ? Call(callbackfn, undefined, « accumulator, kValue, k, O »).
            if (k in o) {
                value = callback(value, o[k], k, o);
            }

            // d. Increase k by 1.
            k++;
        }
        // 9. Return accumulator.
        return value;
    },
    filter: Array.prototype.filter || function(fun /*, thisArg*/ ) {
        // http://docs.w3cub.com/javascript/global_objects/array/filter/
        'use strict';
        if (this === void 0 || this === null) {
            throw new TypeError();
        }
        var t = Object(this);
        var len = t.length >>> 0;
        if (typeof fun !== 'function') {
            throw new TypeError();
        }

        var res = [];
        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
        for (var i = 0; i < len; i++) {
            if (i in t) {
                var val = t[i];
                // NOTE: Technically this should Object.defineProperty at
                //       the next index, as push can be affected by
                //       properties on Object.prototype and Array.prototype.
                //       But that method's new, and collisions should be
                //       rare, so use the more-compatible alternative.
                if (fun.call(thisArg, val, i, t)) {
                    res.push(val);
                }
            }
        }
        return res;
    },
    map: Array.prototype.map || function(callback, thisArg) {
        var T, A, k;

        if (this == null) {
            throw new TypeError(' this is null or not defined');
        }

        // 1. Let O be the result of calling ToObject passing the |this|
        //    value as the argument.
        var O = Object(this);

        // 2. Let lenValue be the result of calling the Get internal
        //    method of O with the argument "length".
        // 3. Let len be ToUint32(lenValue).
        var len = O.length >>> 0;

        // 4. If IsCallable(callback) is false, throw a TypeError exception.
        // See: http://es5.github.com/#x9.11
        if (typeof callback !== 'function') {
            throw new TypeError(callback + ' is not a function');
        }

        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (arguments.length > 1) {
            T = thisArg;
        }

        // 6. Let A be a new array created as if by the expression new Array(len)
        //    where Array is the standard built-in constructor with that name and
        //    len is the value of len.
        A = new Array(len);

        // 7. Let k be 0
        k = 0;

        // 8. Repeat, while k < len
        while (k < len) {

            var kValue, mappedValue;

            // a. Let Pk be ToString(k).
            //   This is implicit for LHS operands of the in operator
            // b. Let kPresent be the result of calling the HasProperty internal
            //    method of O with argument Pk.
            //   This step can be combined with c
            // c. If kPresent is true, then
            if (k in O) {

                // i. Let kValue be the result of calling the Get internal
                //    method of O with argument Pk.
                kValue = O[k];

                // ii. Let mappedValue be the result of calling the Call internal
                //     method of callback with T as the this value and argument
                //     list containing kValue, k, and O.
                mappedValue = callback.call(T, kValue, k, O);

                // iii. Call the DefineOwnProperty internal method of A with arguments
                // Pk, Property Descriptor
                // { Value: mappedValue,
                //   Writable: true,
                //   Enumerable: true,
                //   Configurable: true },
                // and false.

                // In browsers that support Object.defineProperty, use the following:
                // Object.defineProperty(A, k, {
                //   value: mappedValue,
                //   writable: true,
                //   enumerable: true,
                //   configurable: true
                // });

                // For best browser support, use the following:
                A[k] = mappedValue;
            }
            // d. Increase k by 1.
            k++;
        }

        // 9. return A
        return A;
    },
    find: Array.prototype.find || function(predicate) {
        'use strict';
        if (this == null) {
            throw new TypeError('Array.prototype.find called on null or undefined');
        }
        if (typeof predicate !== 'function') {
            throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;

        for (var i = 0; i < length; i++) {
            value = list[i];
            if (predicate.call(thisArg, value, i, list)) {
                return value;
            }
        }
        return undefined;
    }
});
mini.isShowBackdrop = !(mini.isIE && mini.IE_V <= 8);





mini._MaskID = 1;
mini._MaskObjects = {};
mini.mask = function(options) {


    var el = mini.byId(options);
    if (mini.isElement(el)) options = {
        el: el
    };
    else if (typeof options == "string") options = {
        html: options
    };

    options = mini.copyTo({
        html: "",
        cls: "",
        style: "",

        backStyle: ""
    }, options);
    options.el = mini.byId(options.el);
    if (!options.el) options.el = document.body;
    var el = options.el;

    mini["unmask"](options.el);
    el._maskid = mini._MaskID++;
    mini._MaskObjects[el._maskid] = options;

    var maskEl = mini.append(el, '<div class="mini-mask">' +
        '<div class="mini-mask-background" style="' + options.backStyle + '"></div>' +
        '<div class="mini-mask-msg ' + options.cls + '" style="' + options.style + '">' + options.html + '</div>' +
        '</div>');
    if (el == document.body) mini.addClass(maskEl, 'mini-fixed');

    options.maskEl = maskEl;
    if (!mini.isNull(options.opacity)) {
        mini.setOpacity(maskEl.firstChild, options.opacity);
    }

    function center() {
        msgEl.style.display = "block";
        var size = mini.getSize(msgEl);
        msgEl.style.marginLeft = -size.width / 2 + "px";
        msgEl.style.marginTop = -size.height / 2 + "px";
        msgEl.style.zIndex = mini.getMaxZIndex();
    }
    var msgEl = maskEl.lastChild;
    msgEl.style.display = "none";

    setTimeout(function() {
        center();
    }, 0);





}

mini["unmask"] = function(el) {
    el = mini.byId(el);
    if (!el) el = document.body;
    var options = mini._MaskObjects[el._maskid];
    if (!options) return;
    delete mini._MaskObjects[el._maskid];
    var maskEl = options.maskEl;
    options.maskEl = null;
    if (maskEl && maskEl.parentNode) {
        maskEl.parentNode.removeChild(maskEl);
    }
}

mini.showMaskLoading = function(options) {
    options = $.extend({
        el: document.body,
        cls: 'mini-mask-loading',
        html: mini.Control.prototype.loadingMsg || 'Loading...'
    }, options);
    return mini.mask(options);
}


mini.Cookie = {
    get: function(sName) {
        var aCookie = document.cookie.split("; ");
        var lastMatch = null;
        for (var i = 0; i < aCookie.length; i++) {
            var aCrumb = aCookie[i].split("=");
            if (sName == aCrumb[0]) {
                lastMatch = aCrumb;
            }
        }
        if (lastMatch) {
            var v = lastMatch[1];
            if (v === undefined) return v;
            return unescape(v);
        }
        return null;
    },
    set: function(name, value, expires, domain) {
        var LargeExpDate = new Date();
        if (expires != null) {


            LargeExpDate = new Date(LargeExpDate.getTime() + (expires * 1000 * 3600 * 24));
        }

        document.cookie = name + "=" + escape(value) + ((expires == null) ? "" : ("; expires=" + LargeExpDate.toGMTString())) + ";path=/" + (domain ? "; domain=" + domain : "");
    },
    del: function(name, domain) {
        this.set(name, null, -100, domain);
    }
};

mini.localStorage = {
    get: function(key) {
        try {
            return JSON.parse(localStorage.getItem(key));
        } catch (_error) {

        }
    },
    set: function(key, value) {
        try {
            localStorage.setItem(key, JSON.stringify(value));
            return true;
        } catch (_error) {

        }
    },
    del: function(key) {
        try {
            localStorage.removeItem(key);
            return true;
        } catch (_error) {

        }
    },
    reset: function() {
        try {
            localStorage.clear();
            return true;
        } catch (_error) {

        }
    }
}

if (window.localStorage !== undefined) {
    mini.store = mini.localStorage;
} else {
    mini.store = mini.Cookie;
    var oldset = mini.store.set;
    mini.store.set = function(key, value) {
        oldset(key, JSON.stringify(value), 30); // 30 d'
    }
    var oldget = mini.store.get;
    mini.store.get = function(key) {
        return JSON.parse(oldget(key));
    }
}



mini.copyTo(mini, {

    treeToArray: function(nodes, nodesField, idField, parentIdField, parentId) {
        if (!nodesField) nodesField = 'children';
        var array = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            array[array.length] = node;

            if (parentIdField) node[parentIdField] = parentId;

            var childrenNodes = node[nodesField];
            if (childrenNodes && childrenNodes.length > 0) {
                var id = node[idField];
                var childrenArray = this.treeToArray(childrenNodes, nodesField, idField, parentIdField, id);
                array.addRange(childrenArray);
            }
        }
        return array;
    },

    arrayToTree: function(data, nodesField, idField, parentIdField) {
        if (!nodesField) nodesField = 'children';
        idField = idField || '_id';
        parentIdField = parentIdField || '_pid';

        var nodes = [];


        var idHash = {};
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            if (!o) continue;

            var id = mini._getMap(idField, o);
            if (id !== null && id !== undefined) {
                idHash[id] = o;
            }
            delete o[nodesField];
        }


        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var pid = mini._getMap(parentIdField, o);
            var p = idHash[pid];
            if (!p) {
                nodes.push(o);
                continue;
            }
            if (!p[nodesField]) {
                p[nodesField] = [];
            }
            p[nodesField].push(o);
        }
        return nodes;
    }

});
mini.treeToList = mini.treeToArray;
mini.listToTree = mini.arrayToTree;

function UUID() {
    var s = [],
        itoh = '0123456789ABCDEF'.split('');
    for (var i = 0; i < 36; i++) s[i] = Math.floor(Math.random() * 0x10);
    s[14] = 4;
    s[19] = (s[19] & 0x3) | 0x8;
    for (var i = 0; i < 36; i++) s[i] = itoh[s[i]];
    s[8] = s[13] = s[18] = s[23] = '-';
    return s.join('');
}


String.format = function(format) {
    var args = Array.prototype.slice.call(arguments, 1);
    format = format || "";
    return format.replace(/\{(\d+)\}/g, function(m, i) {
        return args[i];
    });
}
String.prototype.trim = function() {
    var re = /^\s+|\s+$/g;
    return function() {
        return this.replace(re, "");
    };
}();


String.prototype.capitalize = function() {
    var str = this;
    return str.charAt(0).toUpperCase() + str.slice(1);
};

String.prototype.repeat = function(n) {
    var n = n || 1;
    return Array(n + 1).join(this);
}



mini.copyTo(mini, {
    measureText: function(el, text, style) {
        if (!this.measureEl) {
            this.measureEl = mini.append(document.body, '<div></div>');
        }

        this.measureEl.style.cssText = "position:absolute;left:-1000px;top:-1000px;visibility:hidden;";
        if (typeof el == "string") {
            this.measureEl.className = el;

        } else {
            this.measureEl.className = "";

            var j1 = jQuery(el);
            var j2 = jQuery(this.measureEl);
            var csses = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
            for (var i = 0, l = csses.length; i < l; i++) {
                var css = csses[i];
                j2.css(css, j1.css(css));
            }
        }
        if (style) mini.setStyle(this.measureEl, style);
        this.measureEl.innerHTML = text;
        return mini.getSize(this.measureEl);
    }
});



if (typeof mini_layoutOnParse == 'undefined') mini_layoutOnParse = true;

mini.enableLayout = true;

jQuery(function() {

    mini.updateDevice();


    setTimeout(function() {

        var docEl = document.documentElement;
        if ((isIE6 || isIE7) &&
            (mini.getStyle(document.body, "overflow") == "hidden" || (docEl && mini.getStyle(docEl, "overflow") == "hidden"))
        ) {
            jQuery(document.body).css("overflow", "visible");
            if (docEl) jQuery(docEl).css("overflow", "visible");

        }


        mini.__LastWindowWidth = document.documentElement.clientWidth;
        mini.__LastWindowHeight = document.documentElement.clientHeight;

        var sss = new Date();
        mini.isReady = true;
        mini.parse(null, mini_layoutOnParse);
        mini._FireBindEvents();


    }, 1);
});
mini_onload = function(e) {


    mini.on(window, "resize", mini_onresize);



}
mini.on(window, "load", mini_onload);

mini.__LastWindowWidth = document.documentElement.clientWidth;
mini.__LastWindowHeight = document.documentElement.clientHeight;
mini.doWindowResizeTimer = null;

mini.allowLayout = true;




mini_onresize = function(e) {

    mini.updateDevice();


    if (mini.doWindowResizeTimer) {
        clearTimeout(mini.doWindowResizeTimer);
    }
    mini.WindowVisible = mini.isWindowDisplay();
    if (mini.WindowVisible == false || mini.allowLayout == false) return;

    if (typeof Ext != "undefined") {
        mini.doWindowResizeTimer = setTimeout(function() {
            var __LastWindowWidth = document.documentElement.clientWidth;
            var __LastWindowHeight = document.documentElement.clientHeight;
            if (mini.__LastWindowWidth == __LastWindowWidth && mini.__LastWindowHeight == __LastWindowHeight) {} else {

                mini.__LastWindowWidth = __LastWindowWidth;
                mini.__LastWindowHeight = __LastWindowHeight;


                mini.layout(null, false);
            }
            mini.doWindowResizeTimer = null;
        }, 300);
    } else {
        var deferTime = 100;
        try {
            if (parent && parent != window && parent.mini) {
                deferTime = 0;
            }
        } catch (ex) {}
        mini.doWindowResizeTimer = setTimeout(function() {
            var __LastWindowWidth = document.documentElement.clientWidth;
            var __LastWindowHeight = document.documentElement.clientHeight;




            if (mini.__LastWindowWidth == __LastWindowWidth && mini.__LastWindowHeight == __LastWindowHeight) {} else {

                mini.__LastWindowWidth = __LastWindowWidth;
                mini.__LastWindowHeight = __LastWindowHeight;


                mini.layout(null, false);
            }
            mini.doWindowResizeTimer = null;
        }, deferTime);
    }
}




mini.isDisplay = function(p, body) {
    var doc = body || document.body;
    while (1) {
        if (p == null || !p.style) return false;
        if (p && p.style && p.style.display == "none") return false;
        if (p == doc) return true;

        p = p.parentNode;

    }
    return true;
};


mini.isWindowDisplay = function() {
    try {
        var parentWindow = window.parent;
        var isIFrame = parentWindow != window;

        if (isIFrame) {
            var _iframes = parentWindow.document.getElementsByTagName("iframe");
            var _frames = parentWindow.document.getElementsByTagName("frame");
            var iframes = [];
            for (var i = 0, l = _iframes.length; i < l; i++) {
                iframes.push(_iframes[i]);
            }
            for (var i = 0, l = _frames.length; i < l; i++) {
                iframes.push(_frames[i]);
            }

            var iframe = null;
            for (var i = 0, l = iframes.length; i < l; i++) {
                var el = iframes[i];
                if (el.contentWindow == window) {
                    iframe = el;
                    break;
                }
            }
            if (!iframe) return false;

            return mini.isDisplay(iframe, parentWindow.document.body);


        } else {
            return true;
        }
    } catch (e) {
        return true;
    }
};


mini.WindowVisible = mini.isWindowDisplay();








mini.layoutIFrames = function(parentNode) {



    if (!document.body) return;
    if (!parentNode) parentNode = document.body;
    var iframes = parentNode.getElementsByTagName("iframe");

    setTimeout(function() {
        for (var i = 0, l = iframes.length; i < l; i++) {
            var el = iframes[i];
            try {
                if (mini.isDisplay(el) && mini.isAncestor(parentNode, el)) {
                    if (el.contentWindow.mini) {
                        if (el.contentWindow.mini.WindowVisible == false) {
                            el.contentWindow.mini.WindowVisible = el.contentWindow.mini.isWindowDisplay();
                            el.contentWindow.mini.layout();
                        } else {
                            el.contentWindow.mini.layout(null, false);
                        }
                    }
                    el.contentWindow.mini.layoutIFrames();
                }
            } catch (ex) {}
        }
    }, 0);
}


jQuery.ajaxSetup({
    cache: false
})


if (isIE) setInterval(function() {}, 20000);



mini_unload = function(e) {


    try {
        var win = mini._getTopWindow();
        win[mini._WindowID] = '';
        delete win[mini._WindowID];
    } catch (ex) {

    }


    var iframes = document.body.getElementsByTagName("iframe");
    if (iframes.length > 0) {

        var IFrames = [];
        for (var i = 0, l = iframes.length; i < l; i++) {
            IFrames.push(iframes[i]);
        }

        for (var i = 0, l = IFrames.length; i < l; i++) {
            try {
                var iframe = IFrames[i];
                iframe._ondestroy = null;
                iframe.onload = function() {};
                jQuery(iframe).off("load");
                iframe.src = "";
                if (mini.isIE) {
                    try {
                        iframe.contentWindow.document.write("");
                        iframe.contentWindow.document.close();
                    } catch (ex) {}
                }
                if (iframe.parentNode) iframe.parentNode.removeChild(iframe);
            } catch (e) {}
        }
    }


    mini._destroying = true;


    var cs = mini.getComponents().clone();
    for (var i = 0, l = cs.length; i < l; i++) {
        var control = cs[i];
        if (control.destroyed !== true) {

            control.destroy(false);

        }
    }



    cs.length = 0;
    cs = null;



    mini.clearEvent(window);
    mini.clearEvent(document);

    mini.un(window, "unload", mini_unload);
    mini.un(window, "load", mini_onload);
    mini.un(window, "resize", mini_onresize);

    mini.components = {};
    mini.classes = {};
    mini.uiClasses = {};
    mini.uids = {};
    mini.listeners.length = 0;

    mini._topWindow = null;
    window.mini = null;
    window.Owner = null;
    window.CloseOwnerWindow = null;

}
mini.on(window, "unload", mini_unload);



function __BindIFrames() {


}





mini.zIndex = 2000;
mini.zindex = mini.getMaxZIndex = function() {
    return mini.zIndex++;
}


function js_isTouchDevice() {
    try {
        document.createEvent("TouchEvent");
        return true;
    } catch (e) {
        return false;
    }
}

function js_touchScroll(id) {
    if (js_isTouchDevice()) {
        var el = typeof id == "string" ? document.getElementById(id) : id;
        var scrollStartPos = 0;

        el.addEventListener("touchstart", function(event) {
            scrollStartPos = this.scrollTop + event.touches[0].pageY;
            event.preventDefault();
        }, false);

        el.addEventListener("touchmove", function(event) {
            this.scrollTop = scrollStartPos - event.touches[0].pageY;
            event.preventDefault();
        }, false);
    }
}



mini._placeholder = function(el) {
    el = mini.byId(el);
    if (!el || !isIE || isIE10 || isIE11) {


        return;
    }

    function doLabel() {
        var label = el._placeholder_label;

        if (!label) return;

        var placeholder = el.getAttribute("placeholder");
        if (!placeholder) placeholder = el.placeholder;
        if (!el.value && !el.disabled) {
            label.innerHTML = placeholder;
            label.style.display = "";
        } else {
            label.style.display = "none";
        }
    }

    if (el._placeholder) {
        doLabel();
        return;
    }
    el._placeholder = true;

    var label = document.createElement("label");
    label.className = "mini-placeholder-label";
    el.parentNode.appendChild(label);
    el._placeholder_label = label;

    label.onmousedown = function() {

        try {
            el.focus();
        } catch (e) {}
    }


    el.onpropertychange = function(e) {
        e = e || window.event;
        if (e.propertyName == "value") {

            doLabel();
        }
    }

    doLabel();


    mini.on(el, "focus", function(e) {
        if (!el.readOnly) {
            label.style.display = "none";
        }
    });
    mini.on(el, "blur", function(e) {
        doLabel();
    });

}

if (typeof mini_query_server == "undefined") {
    mini_query_server = "";
}

if (typeof mini_withCredentials == "undefined") {
    mini_withCredentials = false;
}

if (typeof mini_use_restful == "undefined") {
    mini_use_restful = false;
}

mini.parseServerPath = function(str){
    return !~str.indexOf('http') ? mini_query_server + str : str;
}

var _ajaxSt = function(ajaxfn, options) {
    if (!options.dataType) {
        options.dataType = "json";
    }
    if (mini_query_server) {
        options.url = mini_query_server + options.url;
    }

    if (options.loading) {
        if (typeof options.loading == 'string') {
            mini.lock(options.loading);
        } else {
            mini.lock();
        }
    }

    if(mini_withCredentials) {
        options.xhrFields = {
          withCredentials: true
        }
        // options.crossDomain = true;
    }
    var xhr;
    if (mini_use_restful) {
        // use resetful
        xhr = ajaxfn(options);
    } else {
        xhr = window.jQuery.ajax(options);
    }

    if (options.loading)
        xhr.always(function() {
            mini.unlock();
        })

    return xhr;
}

mini.formatText = function(url, data) {
    var key, u, val;
    for (key in data) {
        val = data[key];
        u = url.replace('{' + key + '}', val);
        if (u != url) {
            url = u;
            // delete data[key];
        }
        url = url.replace(/\{\w+\}/, '');
    }
    return url;
}

mini.rest = (function() {
    var fill_url = mini.formatText;
    var _ajax = jQuery.ajax;
    // Will only use method override if $.restSetup.useMethodOverride is set to true
    // Change the values of this global object if your method parameter is different.
    $.restSetup = {
        methodParam: '_method',
        useMethodOverride: false,
        contentType: 'application/json',
        verbs: {
            create: 'POST',
            update: 'PUT',
            destroy: 'DELETE',
            'patch': 'PATCH',
            'read': 'GET'
        }
    };


    $.restSetup.csrfToken = window.mini_rest_token || '';
    $.restSetup.csrfParam = window.mini_rest_param || '';

    // collect csrf param & token from meta tags if they haven't already been set
    // $(document).ready(function(){
    //   $.restSetup.csrfParam = $.restSetup.csrfParam || $('meta[name=csrf-param]').attr('content');
    //   $.restSetup.csrfToken = $.restSetup.csrfToken || $('meta[name=csrf-token]').attr('content');
    // });

    function collect_options(url, data, success, error) {
        var options = {
            dataType: 'json'
        };
        if (arguments.length === 1 && typeof arguments[0] !== "string") {
            options = $.extend(options, url);
            if ("url" in options)
                if ("data" in options) {
                    options.url = fill_url(options.url, options.data);
                }
        } else {
            // shift arguments if data argument was omitted
            if ($.isFunction(data)) {
                error = success;
                success = data;
                data = null;
            }

            url = fill_url(url, data);

            options = $.extend(options, {
                url: url,
                data: data,
                success: function(data, text, xhr) {
                    if (success) success.call(options.context || options, data, get_headers(xhr), xhr);
                },
                error: function(xhr) {
                    if (error) error.call(options.context || options, xhr, get_headers(xhr));
                }
            });
        }
        return options;
    }



    function get_headers(xhr) {
        // trim the headers because IE likes to include the blank line between the headers
        // and the content as part of the headers
        var headers = {},
            stringHeaders = $.trim(xhr.getAllResponseHeaders());
        $.each(stringHeaders.split("\n"), function(i, header) {
            if (header.length) {
                var matches = header.match(/^([\w\-]+):(.*)/);
                if (matches.length === 3) headers[matches[1]] = $.trim(matches[2]);
            }
        });
        xhr.responseHeaders = headers;
        return headers;
    }

    var ajax = function(settings) {
        var csrfParam = new RegExp("(" + $.restSetup.csrfParam + "=)", "i"),
            userBeforeSend = settings.beforeSend,
            methodOverride;

        var type = settings.type;

        // form data
        if (typeof settings.data !== "string" && settings.type.toLowerCase() == 'get')
            if (settings.data != null) {
                settings.data = $.param(settings.data);
            }


        settings.data = settings.data || "";
        // if ($.restSetup.csrfParam && $.restSetup.csrfToken)
        // if (!/^(get)$/i.test(settings.type))
        // if (!csrfParam.test(settings.data)) {
        //     settings.data += (settings.data ? "&" : "") + $.restSetup.csrfParam + '=' + $.restSetup.csrfToken;
        // }
        if ($.restSetup.useMethodOverride)
            if (!/^(get|post)$/i.test(settings.type)) {
                methodOverride = settings.type.toUpperCase();
                settings.data += (settings.data ? "&" : "") + $.restSetup.methodParam + '=' + settings.type.toLowerCase();
                settings.type = "POST";
            }


        if (typeof settings.data === "string" && !/^(get|post|put)$/i.test(settings.type))
            settings.url = settings.url + "?" + settings.data; // as param

        // request payload
        var method = settings.type.toLowerCase();
        if (settings.contentType === undefined && (method === 'post' || method === 'put' || method === 'delete')) {
            settings.contentType = 'application/json';
            settings.data = JSON.stringify(settings.data);
        }

        if (method != 'get') {
            settings.processData = false;
        }


        settings.beforeSend = function(xhr, ajaxSettings) {
            if(mini_withCredentials) {
                xhr.withCredentials = true;
            }
            var context = settings.context || settings,
                contentType = settings.contentType,
                resourceContentType = /.*\.(json|xml)/i.exec(settings.url);

            if (!contentType) contentType = $.restSetup.contentType;
            if (!contentType && resourceContentType) {
                contentType = 'application/' + resourceContentType[1].toLowerCase();
            }
            if (settings.contentType != contentType) $.extend(settings, {
                contentType: contentType
            });
            if (methodOverride) xhr.setRequestHeader('X-HTTP-Method-Override', methodOverride);
            // jwt
            if ($.restSetup.csrfToken) {
                xhr.setRequestHeader('Authorization', '<token>'.replace('<token>', $.restSetup.csrfToken));
                // Authorization: Bearer <token>
            }
            if ($.isFunction(userBeforeSend)) userBeforeSend.call(context, xhr, ajaxSettings);
        }




        var p = _ajax.call($, settings);
        return p;
    }

    $.read = function() {
        var options = collect_options.apply(this, arguments);
        options.type = 'GET';
        return _ajaxSt(ajax, options);
    }

    $.create = function() {
        var options = collect_options.apply(this, arguments);
        options.type = $.restSetup.verbs.create;
        return _ajaxSt(ajax, options);
    }

    $.update = function() {
        var options = collect_options.apply(this, arguments);
        options.type = $.restSetup.verbs.update;
        return _ajaxSt(ajax, options);
    }

    $.destroy = function() {
        var options = collect_options.apply(this, arguments);
        options.type = $.restSetup.verbs.destroy;
        return _ajaxSt(ajax, options);
    }
    var guess = function() {
        var options = collect_options.apply(this, arguments);
        if (options.data && options.data.id) {
            options.type = $.restSetup.verbs.update;
        } else {
            delete options.data.id; // 空字符串
            options.type = $.restSetup.verbs.create;
        }
        return _ajaxSt(ajax, options);
    }
    return {
        read: $.read,
        create: $.create,
        update: $.update,
        destroy: $.destroy,
        'delete': $.destroy,
        save: guess,
        _ajax: ajax
    }
})();



mini.ajax = function(options) {
    return _ajaxSt(mini.rest._ajax, options);
}

mini._evalAjaxData = function(ajaxData, scope) {
    var obj = ajaxData;
    var t = typeof ajaxData;
    if (t == "string") {
        obj = eval("(" + ajaxData + ")");
        if (typeof obj == "function") {
            obj = obj.call(scope);
        }
    }
    return obj;
}


var hasOn = !!jQuery.fn.on;
if (!jQuery.fn.on) {
    jQuery.fn.on = function(type, selector, data, fn) {

        return this.delegate(selector, type, data, fn);
    }
}




mini._lastDevice;
mini.updateDevice = function() {
    var cls = "mini-xs",
        width = $(window).width(),
        type = "xs";

    if (width > 768) {
        cls += " mini-sm";
        type = "sm";
    }
    if (width > 992) {
        cls += " mini-md";
        type = "md";
    }
    if (width > 1200) {
        cls += " mini-lg";
        type = "lg";
    }

    cls += ' mini-' + type + "-active";

    jQuery(document.documentElement)
        .removeClass("mini-xs mini-sm mini-md mini-lg mini-xs-active mini-sm-active mini-md-active mini-lg-active ")
        .addClass(cls);

    if (mini._lastDevice != type) {

        $(window).triggerHandler("devicechange", type);
    }

    mini._lastDevice = type;
}

mini.getClipboard = function(e) {
    var text = '';
    if (window.clipboardData) {
        text = window.clipboardData.getData("Text");
    } else if (e) {
        text = e.clipboardData.getData("text/plain")
    }
    return text;
}
mini.setClipboard = function(text) {
    if (window.clipboardData) {
        window.clipboardData.setData("Text", text);
    } else {
        var node = $('<textarea style="position:absolute;left:0;top:-1000px;width:100px;z-index:1000;"></textarea>').appendTo('body').val(text)[0];
        node.select();
        node.focus();
        document.execCommand('copy');

    }
}



mini.getActiveElement = function() {
    try {
        return document.activeElement
    } catch ($) {}
};

if (typeof window.rootpath == "undefined") {
    rootpath = "/";
}

mini.loadJS = function(src, callback) {
    if (!src) return;
    if (typeof callback == "function") {
        return mini.loadJS._async(src, callback);
    } else {
        return mini.loadJS._sync(src);
    }
}
mini.loadJS._js = {};
mini.loadJS._async = function(src, callback) {
    var state = mini.loadJS._js[src];
    if (!state) {
        state = mini.loadJS._js[src] = {
            create: false,
            loaded: false,
            callbacks: []
        };
    }
    if (state.loaded) {
        setTimeout(function() {
            callback();
        }, 1);
        return;
    } else {
        state.callbacks.push(callback);
        if (state.create) return;
    }

    state.create = true;

    var head = document.getElementsByTagName('head')[0];
    var js = document.createElement('script');
    js.src = src + (src.indexOf('?') === -1 ? '?' : '&') + mini_use_suffix;
    js.type = 'text/javascript';

    function doCallback() {
        for (var i = 0; i < state.callbacks.length; i++) {
            var fn = state.callbacks[i];
            if (fn) fn();
        }
        state.callbacks.length = 0;
    }

    setTimeout(function() {
        if (document.all) {
            js.onreadystatechange = function() {
                if (js.readyState == 'loaded' || js.readyState == 'complete') {
                    doCallback();
                    state.loaded = true;
                }
            }
        } else {
            js.onload = function() {
                doCallback();
                state.loaded = true;
            }
        }
        head.appendChild(js);
    }, 1);
    return js;
}
mini.loadJS._sync = function(src) {
    if (mini.loadJS._js[src]) return;
    mini.loadJS._js[src] = {
        create: true,
        loaded: true,
        callbacks: []
    };

    var head = document.getElementsByTagName('head')[0];
    var js = document.createElement('script');
    js.type = 'text/javascript';
    js.text = mini.loadText(src);
    head.appendChild(js);
    return js;
}

mini.module = function() {

}

mini.queue = function(funcs) {
    (function next() {
        if (funcs.length > 0) {
            var f = funcs.shift();
            f.handle.apply(f.context || {}, [next].concat(Array.prototype.slice.call(arguments, 0)));
        }
    })();
};

if (typeof mini_use_prefix == "undefined") {
    mini_use_prefix = '';
}

if (typeof mini_use_suffix == "undefined") {
    mini_use_suffix = '';
}
if (typeof mini_use_alias == "undefined") {
    mini_use_alias = {};
}

if (typeof mini_use_paths == "undefined") {
    mini_use_paths = {};
}


var mini_mapDependencies = function(mods, master) {
    var tmp = [];
    mini.forEach(mods, function(item) {
        if (item.name) {
            tmp.push(item)
        } else {
            tmp.push({
                name: item,
                master: master
            })
        }
    })
    return tmp
}

// simple dependency
// mark `master` dependency,
// in order to use in callback function
var mini_parseDependencies = function(mods, master) {
    master = mini.defaults(master, true);
    var deps = [];
    mods = mini_mapDependencies(mods, master);
    // $.unique
    for (var i = 0; i < mods.length; i++) {
        var cd = mini_use_deps[mods[i].name];
        if (cd && cd.length) {
            deps = deps.concat(cd);
        }
    }
    if (deps.length) {
        var dds = mini_parseDependencies(deps, false);
        mods = dds.concat(mods);
    }
    return mods.uniqBy('name');
}

var mini_parsePaths = function(mods) {
    for (var i in mini_use_paths) {
        for (var j = 0; j < mods.length; j++) {
            if (mods[j].name == i) {
                mods[j].name = mini_use_paths[i];
            }
        }
        // var index = mods.indexOf(i);
        // if(~index){
        //     mods.splice(index, 1, mini_use_paths[i])
        // }
    }
    return mods;
}

var mini_useParsePathAlias = function(item) {
    var name = item.split('/')[0];
    var path = mini_use_alias[name];
    if (path) {
        item = path + item.replace(name, '');
    }
    return item;
}

var mini_useParsePlainInfo = function(item) {
    var name = item.name;
    var type = '',
        path;
    var matched = name.match(/^(\w+)\!/);
    if (matched) {
        type = matched[1];
        path = mini_useParsePathAlias(name.replace(matched[0], ''));
    } else {
        type = 'js';
        if ( !/^(http(s)?\:)?\/\//.test(name) && !/\.js$/.test(name)) {
            name = name + '.js';
        }
        path = mini_useParsePathAlias(name);
    }

    if (typeof miniUseBuildPath == 'function') {
        path = miniUseBuildPath(path);
    }
    return $.extend({
        type: type,
        path: path
    }, item);
}

mini.parseUsePath = mini_useParsePathAlias;
mini._exports = {};
mini.useExports = function(exp) {
    for (var i in mini._exports) {
        // queue must one by one
        if (mini._exports[i].loading) {
            if (typeof exp == 'string' && mini._exports[i].type == 'text') {
                mini._exports[i].exp = exp;
                mini._exports[i].loading = false;
                return true;
            } else if (typeof exp == 'function' && mini._exports[i].type == 'js') {
                mini._exports[i].exp = exp;
                mini._exports[i].loading = false;
                return true;
            }
        }
    }
    // mini._exports
}

mini._setExport = function(name, value) {
    mini._exports[name] || (mini._exports[name] = value);
}

mini._getExport = function(name) {
    return mini._exports[name];
}

/**
 * mini.use load js module, support mini_use_alias
 * @param  {String|Array}   module   Module js
 * @param  {Function} callback After module loaded callback
 */
mini.use = function(module, callback) {
    // @todo 队列交叉
    callback || (callback = $.noop);
    if (!module || !callback) {
        return;
    }
    if (typeof module == 'string') {
        module = [module];
    }
    module = mini_parseDependencies(module);
    module = mini_parsePaths(module);
    var queues = [];
    var args = [];
    mini.forEach(module, function(item, index) {
        var info = mini_useParsePlainInfo(item);
        var handleProcess, getProcessFn;
        getProcessFn = mini.getUsePlugin(info.type)
        switch (typeof getProcessFn) {
            case 'function':
                handleProcess = function(next) {
                    getProcessFn(info.path, function(text) {
                        if (text) {
                            mini.useExports(text);
                            args.push(text);
                        }
                        var context = mini._getExport(info.name);
                        context.loading = false; // loaded
                        next();
                    })
                }
                break;
            default:
                handleProcess = function(next) {
                    mini.loadJS(info.path, function() {
                        var context = mini._getExport(info.name);
                        context.loading = false; // loaded
                        if (info.master) {
                            args.push(context.exp);
                        }
                        next();
                    })
                }
        }
        queues.push({
            handle: function(next) {
                var exp = mini.clone(info);
                delete exp.master;
                exp.loading = true;
                mini._setExport(exp.name, exp);
                handleProcess(next);
            }
        })
    })
    queues.push({
        handle: function() {
            callback.apply(null, args);
        }
    })
    mini.queue(queues);
}


mini._usePlugin = {
    css: function(path, callback) {
        mini.loadCSS(path);
        callback();
    },
    text: function(path, callback) {
        var text = mini.loadText(path);
        callback(text);
    }
}

mini.getUsePlugin = function(name) {
    return mini._usePlugin[name]
}


mini.loadText = function(url) {
    var text = "";
    var isLocal = document.all && location.protocol == "file:";


    var xmlhttp = null;
    if (isLocal) {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    } else {
        if (window.XMLHttpRequest) {
            xmlhttp = new XMLHttpRequest();
        } else if (window.ActiveXObject) {
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
    }


    xmlhttp.onreadystatechange = state_Change;

    var d = '_t=' + new Date().getTime();
    if (url.indexOf("?") == -1) d = "?" + d;
    else d = "&" + d;
    url += d;

    xmlhttp.open("GET", url, false);
    xmlhttp.send(null);

    function state_Change() {
        if (xmlhttp.readyState == 4) {
            var statusCode = isLocal ? 0 : 200;
            if (xmlhttp.status == statusCode) {
                text = xmlhttp.responseText;
            } else {

            }
        }
    }
    return text;
}

mini.loadJSON = function(url) {
    var text = mini.loadText(url);
    var o = eval("(" + text + ")");
    return o;
}


mini.loadCSS = function(src, id) {
    if (!src) return;
    if (mini.loadCSS._css[src]) return;
    var head = document.getElementsByTagName('head')[0];
    var link = document.createElement('link');
    if (id) link.id = id;
    link.href = src + (src.indexOf('?') === -1 ? '?' : '&') + mini_use_suffix;
    link.rel = 'stylesheet';
    link.type = 'text/css';
    head.appendChild(link);
    mini.loadCSS._css[src] = true;
    return link;
}
mini.loadCSS._css = {};

mini.innerHTML = function(el, html) {
    if (typeof el == 'string') el = document.getElementById(el);
    if (!el) return;
    html = '<div style="display:none">&nbsp;</div>' + html;
    el.innerHTML = html;
    mini.__executeScripts(el);
    var d = el.firstChild;

}
mini.__executeScripts = function(d) {
    var scripts = d.getElementsByTagName("script")
    for (var i = 0, l = scripts.length; i < l; i++) {
        var sc = scripts[i];
        var src = sc.src;
        if (src) {
            mini.loadJS(src);
        } else {
            var ns = document.createElement('script');
            ns.type = "text/javascript";
            ns.text = sc.text;
            d.appendChild(ns);
        }
    }
    for (var i = scripts.length - 1; i >= 0; i--) {
        var sc = scripts[i];
        sc.parentNode.removeChild(sc);
    }
}


mini.Hidden = function() {
    mini.Hidden.superclass.constructor.apply(this, arguments);

}
mini.extend(mini.Hidden, mini.Control, {
    _clearBorder: false,
    formField: true,
    value: "",

    uiCls: "mini-hidden",
    _create: function() {
        this.el = document.createElement("input");
        this.el.type = "hidden";
        this.el.className = "mini-hidden";
    },
    setName: function(value) {

        this.name = value;
        this.el.name = value;
    },
    setValue: function(value) {
        if (value === null || value === undefined) value = "";
        this.value = value;
        if (mini.isDate(value)) {
            var y = value.getFullYear();
            var m = value.getMonth() + 1;
            var d = value.getDate();
            m = m < 10 ? "0" + m : m;
            d = d < 10 ? "0" + d : d;
            this.el.value = y + "-" + m + "-" + d;
        } else {
            this.el.value = value;
        }
    },
    getValue: function() {
        return this.value;
    },
    getFormValue: function() {
        return this.el.value;
    }
});

mini.regClass(mini.Hidden, "hidden");


mini.Popup = function() {
    mini.Popup.superclass.constructor.apply(this, arguments);

    this.setVisible(false);
    this.setAllowDrag(this.allowDrag);
    this.setAllowResize(this.allowResize);
}
mini.extend(mini.Popup, mini.Container, {
    _clearBorder: false,

    uiCls: "mini-popup",
    _create: function() {
        var el = this.el = document.createElement("div");
        this.el.className = "mini-popup";
        this._contentEl = this.el;




    },

    _initEvents: function() {
        mini._BindEvents(function() {
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);



        }, this);

    },
    doLayout: function() {
        if (!this.canLayout()) return;
        mini.Popup.superclass.doLayout.call(this);
        this._doShadow();


        var cs = this.el.childNodes;
        if (cs) {
            for (var i = 0, l = cs.length; i < l; i++) {
                var cel = cs[i];
                mini.layout(cel);
            }
        }
    },

    destroy: function(removeEl) {
        if (this.el) {
            this.el.onmouseover = null;
        }


        if (!mini._destroying) {
            mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
            mini.un(window, "resize", this.__OnWindowResize, this);
        }

        if (removeEl !== false) {
            if (this._modalEl) {
                jQuery(this._modalEl).remove();
            }
            if (this.shadowEl) {
                jQuery(this.shadowEl).remove();

            }
            if (this._shimEl) {
                jQuery(this._shimEl).remove();

            }
        }
        this._modalEl = null;
        this.shadowEl = null;
        this._shimEl = null;
        mini.Popup.superclass.destroy.call(this, removeEl);
    },

    setWidth: function(value) {
        if (parseInt(value) == value) value += "px";
        this.width = value;

        if (value.indexOf("px") != -1) {
            mini.setWidth(this.el, value);
        } else {
            this.el.style.width = value;
        }
        this._sizeChanged();
    },
    setHeight: function(value) {
        if (parseInt(value) == value) value += "px";
        this.height = value;
        if (value.indexOf("px") != -1) {
            mini.setHeight(this.el, value);
        } else {
            this.el.style.height = value;
        }
        this._sizeChanged();
    },
    setBody: function(value) {
        if (!value) return;
        if (!mini.isArray(value)) value = [value];
        for (var i = 0, l = value.length; i < l; i++) {
            mini.append(this._contentEl, value[i]);
        }
    },
    getAttrs: function(el) {
        var attrs = mini.Popup.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["popupEl", "popupCls", "showAction", "hideAction", "xAlign", "yAlign", "modalStyle",
            "onbeforeopen", "open", "onbeforeclose", "onclose"
        ]);
        mini._ParseBool(el, attrs, ["showModal", "showShadow", "allowDrag", "allowResize"]);
        mini._ParseInt(el, attrs, ["showDelay", "hideDelay", "xOffset", "yOffset",
            "minWidth", "minHeight", "maxWidth", "maxHeight"
        ]);
        var cs = mini.getChildNodes(el, true);
        attrs.body = cs;
        return attrs;
    }

});
mini.regClass(mini.Popup, "popup");


mini.Popup_prototype = {

    isPopup: false,

    popupEl: null,
    popupCls: "",

    showAction: "mouseover",
    hideAction: "outerclick",
    showDelay: 300,
    hideDelay: 500,

    xAlign: "left",
    yAlign: "below",
    xOffset: 0,
    yOffset: 0,

    minWidth: 50,
    minHeight: 25,
    maxWidth: 2000,
    maxHeight: 2000,

    showModal: false,
    showShadow: true,

    modalStyle: "opacity:0.2",

    _dragCls: "mini-popup-drag",
    _resizeCls: "mini-popup-resize",
    allowDrag: false,
    allowResize: false,

    _unbindPopupEl: function() {
        if (!this.popupEl) return;
        mini.un(this.popupEl, "click", this.__OnLeftClick, this);
        mini.un(this.popupEl, "contextmenu", this.__OnRightClick, this);
        mini.un(this.popupEl, "mouseover", this.__OnMouseOver, this);

    },
    _bindPopupEl: function() {
        if (!this.popupEl) return;
        mini.on(this.popupEl, "click", this.__OnLeftClick, this);
        mini.on(this.popupEl, "contextmenu", this.__OnRightClick, this);
        mini.on(this.popupEl, "mouseover", this.__OnMouseOver, this);
    },
    doShow: function(e) {
        var ev = {
            popupEl: this.popupEl,
            htmlEvent: e,
            cancel: false
        };

        this.fire("BeforeOpen", ev);
        if (ev.cancel == true) return;

        this.fire("opening", ev);
        if (ev.cancel == true) return;

        if (!this.popupEl) {
            this.show();
        } else {
            var options = {};
            if (e) options.xy = [e.pageX, e.pageY];
            this.showAtEl(this.popupEl, options);
        }
    },
    doHide: function(e) {
        var ev = {
            popupEl: this.popupEl,
            htmlEvent: e,
            cancel: false
        };
        this.fire("BeforeClose", ev);
        if (ev.cancel == true) return;
        this.close();
    },

    show: function(left, top) {

        this.showAtPos(left, top);
    },
    showAtPos: function(x, y) {



        this.render(document.body);

        if (!x) x = "center";
        if (!y) y = "middle";

        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";

        this._measureSize();

        var vbox = mini.getViewportBox();
        var box = mini.getBox(this.el);



        if (x == "left") x = 0;
        if (x == 'center') x = vbox.width / 2 - box.width / 2;
        if (x == "right") x = vbox.width - box.width;

        if (y == "top") y = 0;
        if (y == "middle") y = vbox.y + vbox.height / 2 - box.height / 2;
        if (y == "bottom") y = vbox.height - box.height;

        if (x + box.width > vbox.right) x = vbox.right - box.width;
        if (y + box.height > vbox.bottom) y = vbox.bottom - box.height - 20;

        this._Show(x, y);
    },

    _doModal: function() {
        jQuery(this._modalEl).remove();
        if (!this.showModal) return;
        if (this.visible == false) return;

        var dd = document.documentElement;
        var scrollWidth = parseInt(Math.max(document.body.scrollWidth, dd ? dd.scrollWidth : 0));
        var scrollHeight = parseInt(Math.max(document.body.scrollHeight, dd ? dd.scrollHeight : 0));

        var vbox = mini.getViewportBox();
        var height = vbox.height;
        if (height < scrollHeight) height = scrollHeight;

        var width = vbox.width;
        if (width < scrollWidth) width = scrollWidth;

        this._modalEl = mini.append(document.body, '<div class="mini-modal"></div>');
        this._modalEl.style.height = height + "px";
        this._modalEl.style.width = width + "px";
        this._modalEl.style.zIndex = mini.getStyle(this.el, 'zIndex') - 1;
        mini.setStyle(this._modalEl, this.modalStyle);
    },
    _doShim: function() {
        if (!mini_useShims) return;
        if (!this._shimEl) {
            var iframe = "<iframe frameborder='0' style='position: absolute; z-index: -1; width: 0; height: 0; top: 0;left:0;scrolling:no;'></iframe>";
            this._shimEl = mini.append(document.body, iframe);
        }

        function doShim() {
            this._shimEl.style.display = "";
            var box = mini.getBox(this.el);
            var s = this._shimEl.style;
            s.width = box.width + "px";
            s.height = box.height + "px";
            s.left = box.x + "px";
            s.top = box.y + "px";

            var zindex = mini.getStyle(this.el, 'zIndex');
            if (!isNaN(zindex)) {
                this._shimEl.style.zIndex = zindex - 3;
            }
        }
        this._shimEl.style.display = "none";
        if (this._doShimTimer) {
            clearTimeout(this._doShimTimer);
            this._doShimTimer = null;
        }
        var me = this;
        this._doShimTimer = setTimeout(function() {
            me._doShimTimer = null;
            doShim.call(me);
        }, 20);
    },
    _doShadow: function() {
        if (!this.shadowEl) {
            this.shadowEl = mini.append(document.body, '<div class="mini-shadow"></div>');
        }

        this.shadowEl.style.display = this.showShadow ? "" : "none";
        if (this.showShadow) {
            function doShadow() {
                this.shadowEl.style.display = "";
                var box = mini.getBox(this.el);
                var s = this.shadowEl.style;
                s.width = box.width + "px";
                s.height = box.height + "px";
                s.left = box.x + "px";
                s.top = box.y + "px";

                var zindex = mini.getStyle(this.el, 'zIndex');
                if (!isNaN(zindex)) {
                    this.shadowEl.style.zIndex = zindex - 2;
                }
            }
            this.shadowEl.style.display = "none";
            if (this._doShadowTimer) {
                clearTimeout(this._doShadowTimer);
                this._doShadowTimer = null;
            }
            var me = this;

            this._doShadowTimer = setTimeout(function() {
                me._doShadowTimer = null;
                doShadow.call(me);
            }, 20);
        }
    },
    _measureSize: function() {
        this.el.style.display = "";
        var box = mini.getBox(this.el);

        if (box.width > this.maxWidth) {
            mini.setWidth(this.el, this.maxWidth);
            box = mini.getBox(this.el);
        }
        if (box.height > this.maxHeight) {
            mini.setHeight(this.el, this.maxHeight);
            box = mini.getBox(this.el);
        }
        if (box.width < this.minWidth) {
            mini.setWidth(this.el, this.minWidth);
            box = mini.getBox(this.el);
        }
        if (box.height < this.minHeight) {
            mini.setHeight(this.el, this.minHeight);
            box = mini.getBox(this.el);
        }
    },
    _getWindowOffset: function(options) {
        return [0, 0];
    },
    showAtEl: function(el, options) {
        el = mini.byId(el);
        if (!el) return;
        if (!this.isRender() || this.el.parentNode != document.body) {
            this.render(document.body);
        }

        var c = {
            atEl: el,
            popupEl: this.el,
            xAlign: this.xAlign,
            yAlign: this.yAlign,
            xOffset: this.xOffset,
            yOffset: this.yOffset,
            popupCls: this.popupCls


        };
        mini.copyTo(c, options);

        mini.addClass(el, c.popupCls);
        el.popupCls = c.popupCls;
        this._popupEl = el;

        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";

        this.doLayout();
        this._measureSize();

        var vbox = mini.getViewportBox();
        var box = mini.getBox(this.el);
        var pbox = mini.getBox(el);
        var xy = c.xy;
        var h = c.xAlign,
            v = c.yAlign;

        var x = vbox.width / 2 - box.width / 2,
            y = 0;
        if (xy) {
            x = xy[0];
            y = xy[1];
        }

        switch (c.xAlign) {
            case "outleft":
                x = pbox.x - box.width;
                break;
            case "left":
                x = pbox.x;
                break;
            case "center":
                x = pbox.x + pbox.width / 2 - box.width / 2;
                break;
            case "right":
                x = pbox.right - box.width;
                break;
            case "outright":
                x = pbox.right;
                break;
            default:

                break;
        }

        switch (c.yAlign) {
            case "above":
                y = pbox.y - box.height;
                break;
            case "top":
                y = pbox.y;
                break;
            case "middle":
                y = pbox.y + pbox.height / 2 - box.height / 2;
                break;
            case "bottom":
                y = pbox.bottom - box.height;
                break;
            case "below":
                y = pbox.bottom;
                break;
            default:

                break;
        }
        x = parseInt(x);
        y = parseInt(y);

        var winOffset = this._getWindowOffset(options);

        if (c.outYAlign || c.outXAlign) {
            if (c.outYAlign == "above") {
                if (y + box.height > vbox.bottom) {
                    var top = pbox.y - vbox.y;
                    var bottom = vbox.bottom - pbox.bottom;
                    if (top > bottom) {
                        y = pbox.y - box.height;
                    }
                }
            }

            if (c.outYAlign == "below") {
                if (y + box.height > vbox.bottom) {
                    var top = pbox.y - vbox.y;
                    var bottom = vbox.bottom - pbox.bottom;
                    if (top > bottom) {


                        y = pbox.y - box.height;
                    }
                }

            }
            if (c.outXAlign == "outleft") {
                if (x + box.width > vbox.right) {
                    var left = pbox.x - vbox.x;
                    var right = vbox.right - pbox.right;
                    if (left > right) {
                        x = pbox.x - box.width;
                    }
                }
            }
            if (c.outXAlign == "right") {
                if (x + box.width > vbox.right) {
                    x = pbox.right - box.width;




                }
            }

            if (c.alwaysView) {

                if (y < 0) y = 0;

                if (y + box.height > vbox.bottom) y = vbox.bottom - box.height;
            }

            this._Show(x + winOffset[0], y + winOffset[1]);
        } else {
            this.showAtPos(x + c.xOffset + winOffset[0], y + c.yOffset + winOffset[1]);
        }
    },
    _Show: function(x, y) {
        this.el.style.display = "";
        this.el.style.zIndex = mini.getMaxZIndex();
        mini.setX(this.el, x);
        mini.setY(this.el, y);

        this.setVisible(true);

        if (this.hideAction == "mouseout") {
            mini.on(document, "mousemove", this.__OnBodyMouseMove, this);
        }
        var sf = this;
        this._doShadow();

        this._doModal();


        this._doShim();

        mini.layoutIFrames(this.el);

        this.isPopup = true;

        mini.on(document, "mousedown", this.__OnBodyMouseDown, this);

        mini.on(window, "resize", this.__OnWindowResize, this);

        this.fire("Open");
    },
    open: function() {
        this.show();
    },
    close: function() {
        this.hide();
    },
    hide: function() {

        if (!this.el) return;
        if (this.popupEl) mini.removeClass(this.popupEl, this.popupEl.popupCls);
        if (this._popupEl) mini.removeClass(this._popupEl, this._popupEl.popupCls);
        this._popupEl = null;
        jQuery(this._modalEl).remove();

        if (this.shadowEl) this.shadowEl.style.display = "none";
        if (this._shimEl) this._shimEl.style.display = "none";
        mini.un(document, "mousemove", this.__OnBodyMouseMove, this);
        mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
        mini.un(window, "resize", this.__OnWindowResize, this);

        this.setVisible(false);

        this.isPopup = false;


        this.fire("Close");
    },

    setPopupEl: function(el) {
        el = mini.byId(el);
        if (!el) return;
        this._unbindPopupEl();
        this.popupEl = el;
        this._bindPopupEl();
    },

    setPopupCls: function(value) {
        this.popupCls = value;
    },
    setShowAction: function(value) {
        this.showAction = value;
    },
    setHideAction: function(value) {
        this.hideAction = value;
    },
    setShowDelay: function(value) {
        this.showDelay = value;
    },
    setHideDelay: function(value) {
        this.hideDelay = value;
    },

    setXAlign: function(value) {
        this.xAlign = value;
    },
    setYAlign: function(value) {
        this.yAlign = value;
    },
    setxOffset: function(value) {
        value = parseInt(value);
        if (isNaN(value)) value = 0;
        this.xOffset = value;
    },
    setyOffset: function(value) {
        value = parseInt(value);
        if (isNaN(value)) value = 0;
        this.yOffset = value;
    },

    setShowModal: function(value) {
        this.showModal = value;
    },
    setShowShadow: function(value) {

        this.showShadow = value;
    },

    setMinWidth: function(value) {
        if (isNaN(value)) return;
        this.minWidth = value;
    },
    setMinHeight: function(value) {
        if (isNaN(value)) return;
        this.minHeight = value;
    },
    setMaxWidth: function(value) {
        if (isNaN(value)) return;
        this.maxWidth = value;
    },
    setMaxHeight: function(value) {
        if (isNaN(value)) return;
        this.maxHeight = value;
    },

    setAllowDrag: function(value) {
        this.allowDrag = value;
        mini.removeClass(this.el, this._dragCls);
        if (value) {
            mini.addClass(this.el, this._dragCls);
        }
    },
    setAllowResize: function(value) {
        this.allowResize = value;
        mini.removeClass(this.el, this._resizeCls);
        if (value) {
            mini.addClass(this.el, this._resizeCls);
        }
    },


    __OnLeftClick: function(e) {
        if (this._inAniming) return;
        if (this.showAction != "leftclick") return;
        var allowPopup = jQuery(this.popupEl).attr("allowPopup");
        if (String(allowPopup) == "false") return;
        this.doShow(e);
    },
    __OnRightClick: function(e) {
        if (this._inAniming) return;
        if (this.showAction != "rightclick") return;
        var allowPopup = jQuery(this.popupEl).attr("allowPopup");
        if (String(allowPopup) == "false") return;

        e.preventDefault();
        this.doShow(e);

    },
    __OnMouseOver: function(e) {
        if (this._inAniming) return;
        if (this.showAction != "mouseover") return;
        var allowPopup = jQuery(this.popupEl).attr("allowPopup");
        if (String(allowPopup) == "false") return;

        clearTimeout(this._hideTimer);
        this._hideTimer = null;


        if (this.isPopup) return;


        var sf = this;
        this._showTimer = setTimeout(function() {
            sf.doShow(e);
        }, this.showDelay);
    },
    __OnBodyMouseMove: function(e) {
        if (this.hideAction != "mouseout") return;
        this._tryHide(e);
    },

    __OnBodyMouseDown: function(e) {
        if (this.hideAction != "outerclick") return;
        if (!this.isPopup) return;
	if (jQuery(e.target).closest(".mini-popup")[0]) return;
        if (this.within(e)

            ||
            (this.popupEl && mini.isAncestor(this.popupEl, e.target))
        ) {} else {
            this.doHide(e);
        }
    },
    _tryHide: function(e) {
        if (mini.isAncestor(this.el, e.target) ||
            (this.popupEl && mini.isAncestor(this.popupEl, e.target))
        ) {} else {
            clearTimeout(this._showTimer);
            this._showTimer = null;
            if (this._hideTimer) return;

            var sf = this;
            this._hideTimer = setTimeout(function() {
                sf.doHide(e);
            }, this.hideDelay);

        }
    },
    __OnWindowResize: function(e) {
        if (this.isDisplay() && !mini.isIE6) {
            this._doModal();
        }
    },
    within: function(e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        var controls = mini.getChildControls(this);

        for (var i = 0, l = controls.length; i < l; i++) {
            var c = controls[i];

            if (c.within(e)) return true;
        }

        return false;
    }
};

mini.copyTo(mini.Popup.prototype, mini.Popup_prototype);


mini.Button = function() {

    mini.Button.superclass.constructor.apply(this, arguments);

}
mini.extend(mini.Button, mini.Control, {


    text: "",
    iconCls: "",
    iconStyle: "",
    plain: false,

    checkOnClick: false,
    checked: false,
    groupName: "",

    img: "",

    _plainCls: "mini-button-plain",
    _hoverCls: "mini-button-hover",
    _pressedCls: "mini-button-pressed",
    _checkedCls: "mini-button-checked",
    _disabledCls: "mini-button-disabled",

    allowCls: "",

    _clearBorder: false,

    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        this._allowUpdate = kv.text || kv.iconStyle || kv.iconCls || kv.iconPosition;

        mini.Button.superclass.set.call(this, kv);

        if (this._allowUpdate === false) {
            this._allowUpdate = true;
            this.doUpdate();
        }

        return this;
    },
    uiCls: "mini-button",
    _create: function() {
        this.el = document.createElement("a");

        this.el.className = "mini-button";
        this.el.hideFocus = true;
        this.el.href = "javascript:void(0)";


        this.doUpdate();
    },
    _initEvents: function() {
        mini._BindEvents(function() {
            mini_onOne(this.el, "mousedown", this.__OnMouseDown, this);
            mini_onOne(this.el, "click", this.__OnClick, this);



        }, this);
    },
    destroy: function(removeEl) {
        if (this.el) {
            this.el.onclick = null;
            this.el.onmousedown = null;
        }
        if (this.menu) this.menu.owner = null;
        this.menu = null;
        mini.Button.superclass.destroy.call(this, removeEl);
    },

    doUpdate: function() {
        if (this._allowUpdate === false) return;


        var cls = "",
            text = this.text;
        var hasIcon = this.iconStyle || this.iconCls || this.img;


        if (hasIcon && text) {
            cls = " mini-button-icon-text ";
        } else if (hasIcon && text === "") {
            cls = " mini-button-icon-only ";
            text = "&nbsp;";
        } else {
            if (text == "") text = "&nbsp;";
        }

        var iconStyle = this.iconStyle || "";
        if (!iconStyle && this.img) iconStyle = 'background-image:url(' + this.img + ')';


        var iconHtml = '';
        if (hasIcon) {
            iconHtml = '<span class="mini-button-icon mini-iconfont ' + this.iconCls + '" style="' + iconStyle + '"></span>';
        }



        var s = '<span class="mini-button-text ' + cls + '">' + iconHtml + text + '</span>';


        if (this.allowCls) {
            s = s + '<span class="mini-button-allow ' + this.allowCls + '"></span>';
        }

        this.el.innerHTML = s;

    },
    href: "",
    setHref: function(value) {
        this.href = value;
        this.el.href = value;
        var el = this.el;
        setTimeout(function() {
            el.onclick = null;
        }, 100);
    },
    getHref: function() {
        return this.href;
    },
    target: "",
    setTarget: function(value) {
        this.target = value;
        this.el.target = value;
    },
    getTarget: function() {
        return this.target;
    },
    setText: function(value) {
        if (this.text != value) {
            this.text = value;
            this.doUpdate();
        }
    },
    getText: function() {
        return this.text;
    },
    setIconCls: function(value) {
        this.iconCls = value;
        this.doUpdate();
    },
    getIconCls: function() {
        return this.iconCls;
    },
    setIconStyle: function(value) {
        this.iconStyle = value;
        this.doUpdate();
    },
    getIconStyle: function() {
        return this.iconStyle;
    },

    setImg: function(value) {
        this.img = value;
        this.doUpdate();
    },
    getImg: function() {
        return this.img;
    },
    setIconPosition: function(value) {
        this.iconPosition = "left";
        this.doUpdate();
    },
    getIconPosition: function() {
        return this.iconPosition;
    },

    setPlain: function(value) {
        this.plain = value;
        if (value) this.addCls(this._plainCls);
        else this.removeCls(this._plainCls);
    },
    getPlain: function() {
        return this.plain;
    },
    setGroupName: function(value) {
        this.groupName = value;
    },
    getGroupName: function() {
        return this.groupName;
    },
    setCheckOnClick: function(value) {
        this.checkOnClick = value;
    },
    getCheckOnClick: function() {
        return this.checkOnClick;
    },
    setChecked: function(value) {

        var fire = this.checked != value;
        this.checked = value;
        if (value) this.addCls(this._checkedCls);
        else this.removeCls(this._checkedCls);
        if (fire) {
            this.fire("CheckedChanged");
        }
    },
    getChecked: function() {
        return this.checked;
    },
    doClick: function() {
        this.__OnClick(null);
    },

    __OnClick: function(e) {
        if (!this.href && e) {
            e.preventDefault();
        }
        if (this.readOnly || this.enabled == false) return;
        this.focus();
        if (this.checkOnClick) {
            if (this.groupName) {
                var groupName = this.groupName;
                var buttons = mini.findControls(function(control) {
                    if (control.type == "button" && control.groupName == groupName) return true;
                });
                if (buttons.length > 0) {
                    for (var i = 0, l = buttons.length; i < l; i++) {
                        var button = buttons[i];
                        if (button != this) button.setChecked(false);
                    }
                    this.setChecked(true);
                } else {
                    this.setChecked(!this.checked);
                }
            } else {
                this.setChecked(!this.checked);
            }
        }

        this.fire("click", {
            htmlEvent: e
        });

    },
    __OnMouseDown: function(e) {
        if (this.isReadOnly()) return;

        this.addCls(this._pressedCls);
        mini.on(document, "mouseup", this.__OnDocMouseUp, this);
    },
    __OnDocMouseUp: function(e) {
        this.removeCls(this._pressedCls);
        mini.un(document, "mouseup", this.__OnDocMouseUp, this);
    },
    onClick: function(fn, scope) {
        this.on("click", fn, scope);
    },

    getAttrs: function(el) {
        var attrs = mini.Button.superclass.getAttrs.call(this, el);

        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs, ["text", "href", "iconCls", "iconStyle", "iconPosition", "groupName", "menu",
            "onclick", "oncheckedchanged", "target", "img"
        ]);
        mini._ParseBool(el, attrs, ["plain", "checkOnClick", "checked"]);
        return attrs;
    }
});
mini.regClass(mini.Button, "button");



mini.MenuButton = function() {

    mini.MenuButton.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.MenuButton, mini.Button, {
    uiCls: "mini-menubutton",
    allowCls: "mini-button-menu",
    setMenu: function(value) {

        if (mini.isArray(value)) {
            value = {
                type: "menu",
                items: value
            };
        }
        if (typeof value == "string") {
            var el = mini.byId(value);
            if (!el) return;

            mini.parse(value);
            value = mini.get(value);
        }

        if (this.menu !== value) {
            this.menu = mini.getAndCreate(value);
            this.menu.setPopupEl(this.el);
            this.menu.setPopupCls("mini-button-popup");
            this.menu.setShowAction("leftclick");
            this.menu.setHideAction("outerclick");
            this.menu.setXAlign("left");
            this.menu.setYAlign("below");

            this.menu.hide();
            this.menu.owner = this;

            this.menu.addCls("mini-menu-open");
        }
    },
    setEnabled: function(value) {
        this.enabled = value;
        if (value) {
            this.removeCls(this._disabledCls);
        } else {
            this.addCls(this._disabledCls);
        }

        jQuery(this.el).attr("allowPopup", !!value)
    }
});
mini.regClass(mini.MenuButton, "menubutton");



mini.SplitButton = function() {
    mini.SplitButton.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.SplitButton, mini.MenuButton, {
    uiCls: "mini-splitbutton",
    allowCls: "mini-button-split"
});
mini.regClass(mini.SplitButton, "splitbutton");


mini.CheckBox = function() {
    mini.CheckBox.superclass.constructor.apply(this, arguments);

}
mini.extend(mini.CheckBox, mini.Control, {
    formField: true,
    _clearText: false,

    text: "",
    checked: false,
    defaultValue: false,

    trueValue: true,
    falseValue: false,

    checkedCls: "mini-checkbox-checked",

    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }
        var me = this;

        if (!mini.isNull(kv.trueValue)) {
            me.setTrueValue(kv.trueValue);
            delete kv.trueValue;
        }
        if (!mini.isNull(kv.falseValue)) {
            me.setFalseValue(kv.falseValue);
            delete kv.falseValue;
        }

        mini.CheckBox.superclass.set.call(this, kv);


        return this;
    },

    uiCls: "mini-checkbox",
    _create: function() {
        var ckid = this.uid + "$check";
        this.el = document.createElement("span");
        this.el.className = "mini-checkbox";
        this.el.innerHTML = '<input id="' + ckid + '" name="' + this.id + '" type="checkbox" class="mini-checkbox-check"><span class="mini-checkbox-icon"></span><label for="' + ckid + '" onclick="return false;">' + this.text + '</label>';

        this._checkEl = this.el.firstChild;
        this._labelEl = this.el.lastChild;

    },
    destroy: function(removeEl) {
        if (this._checkEl) {
            this._checkEl.onmouseup = null;
            this._checkEl.onclick = null;
            this._checkEl = null;
        }
        mini.CheckBox.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function() {
        mini._BindEvents(function() {
            mini.on(this.el, "click", this.__onClick, this);

            this._checkEl.onmouseup = function() {
                return false;
            }
            var sf = this;
            this._checkEl.onclick = function() {
                if (sf.isReadOnly()) return false
            }

            this._checkEl.checked = this.checked;

        }, this);

    },
    setName: function(value) {
        this.name = value;
        mini.setAttr(this._checkEl, "name", this.name);
    },
    setText: function(value) {
        if (this.text !== value) {
            this.text = value;

            this._labelEl.innerHTML = value;
        }
    },
    getText: function() {
        return this.text;
    },
    setChecked: function(value) {
        if (value === true) value = true;
        else if (value === this.trueValue) value = true;
        else if (value == "true") value = true;
        else if (value == "True") value = true;
        else if (String(value) === "1") value = true;
        else if (value == "Y") value = true;
        else value = false;

        if (this.checked !== value) {
            this.checked = !!value;
            this._checkEl.checked = this.checked;

            this.value = this.getValue();
        }

        var el = $(this.el);
        if (this.checked) {
            el.addClass(this.checkedCls);
        } else {
            el.removeClass(this.checkedCls);
        }

    },
    getChecked: function() {
        return this.checked;
    },
    setValue: function(value) {

        if (this.checked !== value) {
            this.setChecked(value);
            this.value = this.getValue();
        }
    },
    getValue: function() {
        return String(this.checked == true ? this.trueValue : this.falseValue);
    },
    getFormValue: function() {
        return this.getValue();
    },
    setTrueValue: function(value) {
        this._checkEl.value = value;
        this.trueValue = value;
    },
    getTrueValue: function() {
        return this.trueValue;
    },
    setFalseValue: function(value) {
        this.falseValue = value;
    },
    getFalseValue: function() {
        return this.falseValue;
    },

    __onClick: function(e) {

        if (this.isReadOnly()) return;

        this.setChecked(!this.checked);

        this.fire("checkedchanged", {
            checked: this.checked
        });
        this.fire("valuechanged", {
            value: this.getValue()
        });

        this.fire("click", e, this);

    },

    getAttrs: function(el) {
        var attrs = mini.CheckBox.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs, ["text", "oncheckedchanged", "onclick", "onvaluechanged"]);

        mini._ParseBool(el, attrs, ["enabled"]);

        var checked = mini.getAttr(el, "checked");

        if (checked) {
            attrs.checked = (checked == "true" || checked == "checked") ? true : false;
        }

        var trueValue = jq.attr("trueValue");
        if (trueValue) {
            attrs.trueValue = trueValue;
            trueValue = parseInt(trueValue);
            if (!isNaN(trueValue)) {
                attrs.trueValue = trueValue;
            }
        }
        var falseValue = jq.attr("falseValue");
        if (falseValue) {
            attrs.falseValue = falseValue;
            falseValue = parseInt(falseValue);
            if (!isNaN(falseValue)) {
                attrs.falseValue = falseValue;
            }
        }

        return attrs;
    }
});

mini.regClass(mini.CheckBox, "checkbox");

mini.Radio = function() {
    mini.Radio.superclass.constructor.apply(this, arguments);
}

mini.extend(mini.Radio, mini.CheckBox, {
    uiCls: "mini-radio",
    checkedCls: "mini-radio-checked",
    _create: function() {
        var ckid = this.uid + "$check";
        this.el = document.createElement("span");
        this.el.className = "mini-radio";
        this.el.innerHTML = '<input id="' + ckid + '" name="' + this.name + '"  value="' + this.value + '" type="radio" class="mini-radio-check"><span class="mini-radio-icon"></span><label for="' + ckid + '" onclick="return false;">' + this.text + '</label>';
        this._checkEl = this.el.firstChild;
        this._labelEl = this.el.lastChild;
    },
    setGroupName: function(value) {
        this.groupName = value;
    },
    getGroupName: function() {
        return this.groupName;
    },
    getAttrs: function(el) {
        var attrs = mini.Radio.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, ["value"]);
        return attrs;
    },
    setChecked: function(value) {
        if (value === true) value = true;
        else if (value === this.trueValue) value = true;
        else if (value == "true") value = true;
        else if (value == "True") value = true;
        else if (String(value) === "1") value = true;
        else if (value == "Y") value = true;
        else value = false;

        if (this.checked !== value) {
            this.checked = !!value;
            this._checkEl.checked = this.checked;

            this.value = this.getValue();
        }

        var el = $(this.el);
        if (this.checked) {
            el.addClass(this.checkedCls);
        } else {
            el.removeClass(this.checkedCls);
        }

    },
    setValue: function(value) {
        this._checkEl.value = value;
        this.value = value;
    },
    getValue: function() {
        return this.value;
    },
    __onClick: function(e) {
        if (this.isReadOnly()) return;
        if (this.checked) return;

        var name = this.name;
        var radios = mini.findControls(function(control) {
            if (control.type == "radio" && control.name == name) return true;
        });
        if (radios.length > 0) {
            for (var i = 0, l = radios.length; i < l; i++) {
                var radio = radios[i];
                if (radio != this) radio.setChecked(false);
            }
            this.setChecked(true);
        }
        this.fire("checkedchanged", {
            checked: this.checked
        });
        this.fire("valuechanged", {
            value: this.getValue()
        });

        this.fire("click", e, this);
    },

})

mini.regClass(mini.Radio, "radio");


mini.TextBox = function() {
    mini.TextBox.superclass.constructor.apply(this, arguments);


}
mini.extend(mini.TextBox, mini.ValidatorBase, {
    name: "",
    formField: true,

    selectOnFocus: false,

    allowInput: true,

    minWidth: 10,
    minHeight: 15,

    maxLength: 5000,

    emptyText: "",

    text: "",
    value: "",
    defaultValue: "",


    height: 21,

    _emptyCls: "mini-textbox-empty",
    _focusCls: "mini-textbox-focus",
    _disabledCls: "mini-textbox-disabled",

    uiCls: "mini-textbox",
    _InputType: "text",
    _create: function() {
        var html = '<input  type="' + this._InputType + '" class="mini-textbox-input" autocomplete="off"/>';
        if (this._InputType == "textarea") {
            html = '<textarea  class="mini-textbox-input" autocomplete="off"/></textarea>';
        }
        html = '<span class="mini-textbox-border">' + html + '</span>';
        html += '<input type="hidden"/>';

        this.el = document.createElement("span");
        this.el.className = "mini-textbox";
        this.el.innerHTML = html;


        this._borderEl = this.el.firstChild;
        this._textEl = this._borderEl.firstChild;
        this._valueEl = this._borderEl.lastChild;








        this._doEmpty();
    },
    _initEvents: function() {

        mini._BindEvents(function() {

            mini_onOne(this._textEl, "drop", this.__OnDropText, this);
            mini_onOne(this._textEl, "change", this.__OnInputTextChanged, this);
            mini_onOne(this._textEl, "focus", this.__OnFocus, this);
            mini_onOne(this.el, "mousedown", this.__OnMouseDown, this);

            var v = this.value;
            this.value = null;
            if (this.el) {
                this.setValue(v);
            }


        }, this);
        this.on("validation", this.__OnValidation, this);
    },
    _inputEventsInited: false,
    _initInputEvents: function() {
        if (this._inputEventsInited) return;
        this._inputEventsInited = true;



        mini.on(this._textEl, "blur", this.__OnBlur, this);
        mini.on(this._textEl, "keydown", this.__OnInputKeyDown, this);
        mini.on(this._textEl, "keyup", this.__OnInputKeyUp, this);
        mini.on(this._textEl, "keypress", this.__OnInputKeyPress, this);

        mini_onOne(this.el, "click", this.__OnClick, this);
    },
    destroy: function(removeEl) {
        if (this.el) {

            this.el.onmousedown = null;
        }
        if (this._textEl) {
            var textEl = this._textEl;

            if (textEl._placeholder_label) {
                textEl._placeholder_label.onmousedown = null;
                textEl._placeholder_label = null;
            }

            textEl.onpropertychange = textEl.ondrop = textEl.onchange = textEl.onfocus = null;
            mini.clearEvent(textEl);
            this._textEl = null;
        }
        if (this._valueEl) {
            mini.clearEvent(this._valueEl);
            this._valueEl = null;
        }
        mini.TextBox.superclass.destroy.call(this, removeEl);
    },

    doLayout: function() {
        if (this._doLabelLayout) {
            this._labelLayout();
        }
    },

    setHeight: function(value) {
        if (parseInt(value) == value) value += "px";
        this.height = value;
        if (this._InputType == "textarea") {
            this.el.style.height = value;
            this.doLayout();
        }
    },

    setName: function(value) {
        if (this.name != value) {
            this.name = value;

            if (this._valueEl) mini.setAttr(this._valueEl, "name", this.name);
        }
    },
    setValue: function(value) {
        if (value === null || value === undefined) value = "";
        value = String(value);
        if (value.length > this.maxLength) {
            value = value.substring(0, this.maxLength);
        }
        if (this.value !== value) {
            this.value = value;
            this._valueEl.value = this._textEl.value = value;
            this._doEmpty();
        }
    },
    getValue: function() {

        return this.value;
    },
    getFormValue: function() {
        var value = this.value;
        if (value === null || value === undefined) value = "";
        return String(value);
    },
    setAllowInput: function(value) {
        if (this.allowInput != value) {
            this.allowInput = value;
            this.doUpdate();
        }
    },
    getAllowInput: function() {
        return this.allowInput;
    },
    _placeholdered: false,
    _doEmpty: function() {
        this._textEl.placeholder = this.emptyText;
        if (this.emptyText) {
            mini._placeholder(this._textEl);
        }
    },
    setEmptyText: function(value) {
        if (this.emptyText != value) {
            this.emptyText = value;
            this._doEmpty();
        }
    },
    getEmptyText: function() {
        return this.emptyText;
    },
    getPlaceholder: function() {
        return this.getEmptyText();
    },
    setPlaceholder: function(value) {
        this.setEmptyText(value);
    },
    setMaxLength: function(value) {

        this.maxLength = value;

        mini.setAttr(this._textEl, "maxLength", value);

        if (this._InputType == "textarea" && mini.isIE) {
            mini.on(this._textEl, "keyup", this.__OnMaxLengthKeyUp, this);
            mini.on(this._textEl, "keypress", this.__OnMaxLengthKeyUp, this);
            mini.on(this._textEl, "paste", this.__OnPaste, this);
        }
    },
    __OnPaste: function(e) {
        var sf = this;

        setTimeout(function() {

            var value = sf._textEl.value;
            if (value.length > sf.maxLength) {
                sf._textEl.value = value.substring(0, sf.maxLength);

            }


            sf.__OnInputTextChanged();

        }, 0)
    },
    __OnMaxLengthKeyUp: function(e) {

        if (this._textEl.value.length >= this.maxLength) {

            this.__OnPaste(e);
            e.preventDefault();

        }
    },
    getMaxLength: function() {
        return this.maxLength;
    },
    setReadOnly: function(value) {
        if (this.readOnly != value) {
            this.readOnly = value;
            this.doUpdate();
        }
    },
    setEnabled: function(value) {
        if (this.enabled != value) {
            this.enabled = value;
            this.doUpdate();

        }
    },
    doUpdate: function() {
        if (this.enabled) {
            this.removeCls(this._disabledCls);
        } else {
            this.addCls(this._disabledCls);
        }
        if (this.isReadOnly() || this.allowInput == false) {
            this._textEl.readOnly = true;
            mini.addClass(this.el, "mini-textbox-readOnly");
        } else {

            this._textEl.readOnly = false;
            mini.removeClass(this.el, "mini-textbox-readOnly");
        }
        if (this.required) {
            this.addCls(this._requiredCls);
        } else {
            this.removeCls(this._requiredCls);
        }

        if (this.enabled) {
            this._textEl.disabled = false;
        } else {
            this._textEl.disabled = true;
        }
    },
    focus: function() {

        var that = this;
        setTimeout(function() {
            try {
                that._textEl.focus();

                if (mini.isIE) {
                    var o = that._textEl.createTextRange();
                    o.collapse(false);
                    o.select();
                }
            } catch (e) {}
        }, 10);
    },
    blur: function() {
        try {
            this._textEl.blur();
        } catch (e) {}
    },
    selectText: function() {

        var me = this;

        function doSelect() {
            try {
                me._textEl.select();
            } catch (ex) {}
        }
        doSelect();



    },
    getTextEl: function() {
        return this._textEl;
    },
    getInputText: function() {
        return this._textEl.value;
    },
    setSelectOnFocus: function(value) {
        this.selectOnFocus = value;
    },
    getSelectOnFocus: function(value) {
        return this.selectOnFocus;
    },

    _errorIconEl: null,
    getErrorIconEl: function() {
        if (!this._errorIconEl) {
            this._errorIconEl = mini.append(this.el, '<span class="mini-errorIcon"></span>');
        }
        return this._errorIconEl;
    },
    _RemoveErrorIcon: function() {
        if (this._errorIconEl) {
            var el = this._errorIconEl;
            jQuery(el).remove();
        }
        this._errorIconEl = null;
    },

    __OnClick: function(e) {
        if (!this.enabled) return;
        this.fire("click", {
            htmlEvent: e
        });
    },
    __OnMouseDown: function(e) {

        var sf = this;


        if (this._InputType == "textarea") return;

        if (!mini.isAncestor(this._textEl, e.target)) {
            setTimeout(function() {
                sf.focus();
                mini.selectRange(sf._textEl, 10000, 10000);
            }, 1);
        } else {
            setTimeout(function() {
                try {
                    sf._textEl.focus();
                } catch (ex) {}
            }, 1);
        }
    },
    __OnInputTextChanged: function(e, valid) {


        var value = this.value;
        this.setValue(this._textEl.value);

        if (value !== this.getValue() || valid === true) {
            this._OnValueChanged();
        }
    },
    __OnDropText: function(e) {
        var me = this;
        setTimeout(function() {
            me.__OnInputTextChanged(e);
        }, 0);
    },
    __OnInputKeyDown: function(e) {
        var ex = {
            htmlEvent: e
        };
        this.fire("keydown", ex);

        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }
        if (e.keyCode == 27 || e.keyCode == 13 || e.keyCode == 9) {

            if (this._InputType == "textarea" && e.keyCode == 13) {} else {

                this.__OnInputTextChanged(null);
                if (e.keyCode == 13) {
                    var me = this;

                    me.fire("enter", ex);

                }
            }

        }
        if (e.keyCode == 27) {
            e.preventDefault();
        }
    },
    __OnInputKeyUp: function(e) {

        this.fire("keyup", {
            htmlEvent: e
        });
    },
    __OnInputKeyPress: function(e) {
        this.fire("keypress", {
            htmlEvent: e
        });
    },
    __OnFocus: function(e) {

        this.doUpdate();

        if (this.isReadOnly()) {
            return;
        }
        this._focused = true;
        this.addCls(this._focusCls);
        this._initInputEvents();







        if (this.selectOnFocus) {
            var me = this;
            setTimeout(function() {
                me.selectText();
            }, 1);
        }

        this.fire("focus", {
            htmlEvent: e
        });
    },
    __OnBlur: function(e) {
        this._focused = false;
        var sf = this;
        setTimeout(function() {
            if (sf._focused == false) {
                sf.removeCls(sf._focusCls);
            }
        }, 2);









        this.fire("blur", {
            htmlEvent: e
        });


        if (this.validateOnLeave && this.isEditable()) {
            this._tryValidate();
        }
    },
    inputStyle: "",
    setInputStyle: function(value) {
        this.inputStyle = value;
        mini.setStyle(this._textEl, value);
    },

    getAttrs: function(el) {
        var attrs = mini.TextBox.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs, ["value", "text", "emptyText", "placeholder", "inputStyle",
            "onenter", "onkeydown", "onkeyup", "onkeypress", "onclick",
            "maxLengthErrorText", "minLengthErrorText", "onfocus", "onblur",

            "vtype",
            "emailErrorText", "urlErrorText", "floatErrorText", "intErrorText", "dateErrorText", 'evalErrorText',
            "minErrorText", "maxErrorText", "rangeLengthErrorText", "rangeErrorText", "rangeCharErrorText",
            "eqtoFieldErrorText"
        ]);
        mini._ParseBool(el, attrs, ["allowInput", "selectOnFocus"]);
        mini._ParseInt(el, attrs, ["maxLength", "minLength", "minHeight", "minWidth"]);





        return attrs;
    },

    vtype: "",
    setVtype: function(value) {
        this.vtype = value;
    },
    getVtype: function() {
        return this.vtype;
    },
    __OnValidation: function(e) {

        if (e.isValid == false) return;

        mini._ValidateVType(this.vtype, e.value, e, this);



    },
    setEmailErrorText: function(value) {
        this.emailErrorText = value;
    },
    getEmailErrorText: function() {
        return this.emailErrorText;
    },
    setUrlErrorText: function(value) {
        this.urlErrorText = value;
    },
    getUrlErrorText: function() {
        return this.urlErrorText;
    },
    setFloatErrorText: function(value) {
        this.floatErrorText = value;
    },
    getFloatErrorText: function() {
        return this.floatErrorText;
    },
    setIntErrorText: function(value) {
        this.intErrorText = value;
    },
    getIntErrorText: function() {
        return this.intErrorText;
    },
    setDateErrorText: function(value) {
        this.dateErrorText = value;
    },
    getDateErrorText: function() {
        return this.dateErrorText;
    },
    setMaxLengthErrorText: function(value) {
        this.maxLengthErrorText = value;
    },
    getMaxLengthErrorText: function() {
        return this.maxLengthErrorText;
    },
    setMinLengthErrorText: function(value) {
        this.minLengthErrorText = value;
    },
    getMinLengthErrorText: function() {
        return this.minLengthErrorText;
    },
    setMaxErrorText: function(value) {
        this.maxErrorText = value;
    },
    getMaxErrorText: function() {
        return this.maxErrorText;
    },
    setMinErrorText: function(value) {
        this.minErrorText = value;
    },
    getMinErrorText: function() {
        return this.minErrorText;
    },
    setRangeLengthErrorText: function(value) {
        this.rangeLengthErrorText = value;
    },
    getRangeLengthErrorText: function() {
        return this.rangeLengthErrorText;
    },
    setRangeCharErrorText: function(value) {
        this.rangeCharErrorText = value;
    },
    getRangeCharErrorText: function() {
        return this.rangeCharErrorText;
    },
    setRangeErrorText: function(value) {
        this.rangeErrorText = value;
    },
    getRangeErrorText: function() {
        return this.rangeErrorText;
    },
    setEqtoFieldErrorText: function(value) {
        this.eqtoFieldErrorText = value;
    },
    getEqtoFieldErrorText: function() {
        return this.eqtoFieldErrorText;
    },
    setEvalErrorText: function(value) {
        this.evalErrorText = value;
    },
    getEvalErrorText: function() {
        return this.evalErrorText;
    }
});

mini.regClass(mini.TextBox, 'textbox');


mini.Password = function() {
    mini.Password.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Password, mini.TextBox, {
    uiCls: "mini-password",
    _InputType: "password",



    getValue: function() {
        return this._textEl.value;
    }
});
mini.regClass(mini.Password, 'password');


mini.TextArea = function() {
    mini.TextArea.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.TextArea, mini.TextBox, {
    maxLength: 10000000,



    height: '',
    minHeight: 50,
    _InputType: "textarea",
    uiCls: "mini-textarea",
    doLayout: function() {
        if (!this.canLayout()) return;
        mini.TextArea.superclass.doLayout.call(this);

        var h = mini.getHeight(this.el);

        if (mini.isIE6) {
            mini.setHeight(this._borderEl, h);
        }
        h -= 2;
        if (h < 0) h = 0;
        this._textEl.style.height = h + "px";
    }
});
mini.regClass(mini.TextArea, 'textarea');




mini.ButtonEdit = function() {

    mini.ButtonEdit.superclass.constructor.apply(this, arguments);


    var isReadOnly = this.isReadOnly();
    if (isReadOnly || this.allowInput == false) {
        this._textEl.readOnly = true;
    }
    if (this.enabled == false) {
        this.addCls(this._disabledCls);
    }
    if (isReadOnly) {
        this.addCls(this._readOnlyCls);
    }
    if (this.required) {
        this.addCls(this._requiredCls);
    }
}
mini.extend(mini.ButtonEdit, mini.ValidatorBase, {
    name: "",
    formField: true,

    selectOnFocus: false,
    // validateOnLeave: false,

    showButton: true,

    buttonToolTip: "",
    closeToolTip: "",

    showClose: false,

    emptyText: "",

    defaultValue: "",
    defaultText: "",
    value: "",
    text: "",

    maxLength: 1000,
    minLength: 0,

    inputType: 'text',
    height: 21,

    inputAsValue: false,

    allowInput: true,
    _noInputCls: "mini-buttonedit-noInput",
    _readOnlyCls: "mini-buttonedit-readOnly",
    _disabledCls: "mini-buttonedit-disabled",

    _emptyCls: "mini-buttonedit-empty",
    _focusCls: "mini-buttonedit-focus",


    _buttonCls: "mini-buttonedit-button",
    _buttonHoverCls: "mini-buttonedit-button-hover",
    _buttonPressedCls: "mini-buttonedit-button-pressed",

    _closeCls: "mini-buttonedit-close",

    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var text = kv.text;
        delete kv.text;

        this._allowUpdate = !(kv.enabled == false || kv.allowInput == false || kv.readOnly);

        mini.ButtonEdit.superclass.set.call(this, kv);

        if (this._allowUpdate === false) {
            this._allowUpdate = true;
            this.doUpdate();
        }

        if (!mini.isNull(text)) {
            this.setText(text);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }
        return this;
    },
    uiCls: "mini-buttonedit",

    setButtons: function(val) {
        var me = this;
        jQuery(".mini-buttonedit-button:not(.mini-buttonedit-trigger)", this.el).remove();
        me.buttons = val || [];

        var html = '';

        function createButton(button) {
            html += me._createButtonHtml(button.name, button.iconCls, button.tooltip);
        }

        for (var i = 0, l = me.buttons.length; i < l; i++) {
            var button = me.buttons[i];
            if (!button.name) button.name = "button" + i;
            createButton(button);
        }

        $(".mini-buttonedit-button", this.el).remove();

        mini.append(me._buttonsEl, html);

        me._doInputLayout(false);

    },

    getButtons: function() {
        return this.buttons || [];
    },

    getButtonByName: function(name) {
        var buttons = this.getButtons();
        for (var i = 0, l = buttons.length; i < l; i++) {
            var o = buttons[i];
            if (o.name && o.name == name) return o;
        }
        return null;
    },

    _createButtonHtml: function(name, iconCls, tooltip) {
        name = name || "";
        iconCls = iconCls || "";
        tooltip = tooltip || '';
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" ' +
            'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span title="' + tooltip + '" name="' + name + '" class="mini-buttonedit-button mini-buttonedit-' + name + '" ' + hover + '><span class="mini-buttonedit-icon ' + iconCls + '"></span></span>';
    },

    _getButtonsHTML: function() {

        var s = '<span class="mini-buttonedit-close" name="close"></span>' + this._getButtonHtml('trigger', '', this.buttonToolTip);
        return '<span class="mini-buttonedit-buttons">' + s + '</span>';
    },

    _getButtonHtml: function(name, iconCls, tooltip) {
        return this._createButtonHtml(name, iconCls, tooltip);
    },

    _create: function() {
        this.el = document.createElement("span");
        this.el.className = "mini-buttonedit";

        var s = this._getButtonsHTML();
        this.el.innerHTML = '<span class="mini-buttonedit-border"><input type="' + (this.inputType || 'text') + '" class="mini-buttonedit-input" autocomplete="off"/>' +
            s + '</span><input name="' + this.name + '" type="hidden"/>'

        this._borderEl = this.el.firstChild;
        this._textEl = this._borderEl.firstChild;
        this._valueEl = this.el.lastChild;

        this._buttonsEl = this._borderEl.lastChild;
        this._buttonEl = this._buttonsEl.lastChild;
        this._closeEl = this._buttonEl.previousSibling;

        this._doEmpty();
    },
    destroy: function(removeEl) {

        if (this._textEl) {
            this._textEl.onchange = this._textEl.onfocus = null;
            mini.clearEvent(this._textEl);

            this._textEl = null;
        }

        this._borderEl = this._buttonsEl = this._buttonEl = this._closeEl = this._valueEl = null;

        mini.ButtonEdit.superclass.destroy.call(this, removeEl);
    },
    _deferSetText: true,
    _initEvents: function() {
        mini._BindEvents(function() {
            mini_onOne(this.el, "mousedown", this.__OnMouseDown, this);
            mini_onOne(this._textEl, "focus", this.__OnFocus, this);
            mini_onOne(this._textEl, "change", this.__OnInputTextChanged, this);

            var v = this.text;
            this.text = null;
            if (this.el) {
                if (this._deferSetText) {
                    this.setText(v);
                }
            }
        }, this);

    },
    _inputEventsInited: false,
    _initInputEvents: function() {
        if (this._inputEventsInited) return;
        this._inputEventsInited = true;

        mini.on(this.el, "click", this.__OnClick, this);
        mini.on(this._textEl, "blur", this.__OnBlur, this);
        mini.on(this._textEl, "keydown", this.__OnInputKeyDown, this);
        mini.on(this._textEl, "keyup", this.__OnInputKeyUp, this);
        mini.on(this._textEl, "keypress", this.__OnInputKeyPress, this);
    },
    _buttonWidth: 20,
    _closeWidth: 20,
    _doInputLayout: function(doLayout) {

        this._buttonEl.style.display = this.showButton ? "inline-block" : "none";
        this._buttonEl.title = this.buttonToolTip;

        if (this._closeEl) {
            this._closeEl.style.display = this.showClose ? "inline-block" : "none";
            this._closeEl.title = this.closeToolTip;
        }

        if (mini.isNull(mini.ButtonEdit._paddingOffset)) {
            var padding = mini.getPaddings(this._borderEl);
            mini.ButtonEdit._paddingOffset = padding.left;

        }

        var buttonsWidth = this._buttonsEl.offsetWidth;

        var w = buttonsWidth + (buttonsWidth > 0 ? 0 : mini.ButtonEdit._paddingOffset);
        if (w == 2) {
            this._noLayout = true;
        } else {
            this._noLayout = false;
        }
        this._borderEl.style["paddingRight"] = w + "px";
        if (doLayout !== false) {
            this.doLayout();
        }
    },
    doLayout: function() {
        if (this._noLayout) {
            this._doInputLayout(false);
        }
        if (this._doLabelLayout) {
            this._labelLayout();
        }

    },
    setHeight: function(value) {
        if (parseInt(value) == value) value += "px";
        this.height = value;

    },
    focus: function() {
        try {
            this._textEl.focus();
            var sf = this;
            setTimeout(function() {
                if (sf._focused) {
                    sf._textEl.focus();
                }

            }, 10);
        } catch (e) {}
    },
    blur: function() {
        try {
            this._textEl.blur();

        } catch (e) {}
    },
    selectText: function() {
        this._textEl.select();
    },

    getTextEl: function() {
        return this._textEl;
    },
    setName: function(value) {
        this.name = value;

        if (this._valueEl) mini.setAttr(this._valueEl, "name", this.name);
    },
    setText: function(value) {

        if (value === null || value === undefined) value = "";
        var fire = this.text !== value;
        this.text = value;
        this._textEl.value = value;

        this._doEmpty();

    },
    getText: function() {
        var text = this._textEl.value;
        return text;

    },

    setValue: function(value) {
        if (value === null || value === undefined) value = "";
        var fire = this.value !== value;
        this.value = value;
        this._valueEl.value = this.getFormValue();
        if (this._valueEl.value)
            this._tryValidate(); // hack 2016-12-21, fix插入值, 没有移除验证

    },
    getValue: function() {
        return this.value;
    },
    getFormValue: function() {
        var value = this.value;
        if (value === null || value === undefined) value = "";
        return String(value);
    },

    _doEmpty: function() {
        this._textEl.placeholder = this.emptyText;
        if (this.emptyText) {
            mini._placeholder(this._textEl);
        }
    },
    _doInputType: function() {
        this._textEl.type = this.inputType;
    },
    setInputType: function(value) {
        if (this.inputType != value) {
            this.inputType = value;
            this._doInputType();
        }
    },
    getInputType: function() {
        return this.inputType;
    },
    setEmptyText: function(value) {
        if (this.emptyText != value) {
            this.emptyText = value;
            this._doEmpty();
        }
    },
    getEmptyText: function() {
        return this.emptyText;
    },
    getPlaceholder: function() {
        return this.getEmptyText();
    },
    setPlaceholder: function(value) {
        this.setEmptyText(value);
    },
    setMaxLength: function(value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.maxLength = value;
        this._textEl.maxLength = value;
    },
    getMaxLength: function() {
        return this.maxLength;
    },
    setMinLength: function(value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.minLength = value;
    },
    getMinLength: function() {
        return this.minLength;
    },
    setEnabled: function(value) {
        mini.ButtonEdit.superclass.setEnabled.call(this, value);


    },
    _doReadOnly: function() {
        var readOnly = this.isReadOnly();
        if (readOnly || this.allowInput == false) {
            this._textEl.readOnly = true;
        } else {
            this._textEl.readOnly = false;
        }
        if (readOnly) {
            this.addCls(this._readOnlyCls);
        } else {
            this.removeCls(this._readOnlyCls);
        }
        if (this.allowInput) {
            this.removeCls(this._noInputCls);
        } else {
            this.addCls(this._noInputCls);
        }

        if (this.enabled) {
            this._textEl.disabled = false;
        } else {
            this._textEl.disabled = true;
        }
    },
    setAllowInput: function(value) {
        this.allowInput = value;
        this._doReadOnly();
    },
    getAllowInput: function() {
        return this.allowInput;
    },
    setInputAsValue: function(value) {
        this.inputAsValue = value;
    },
    getInputAsValue: function() {
        return this.inputAsValue;
    },

    autoClear: false,
    setAutoClear: function(value) {
        this.autoClear = value;
    },
    getAutoClear: function() {
        return this.autoClear;
    },

    setButtonToolTip: function(value) {
        this.buttonToolTip = value;
    },
    getButtonToolTip: function() {
        return this.buttonToolTip;
    },




    _errorIconEl: null,
    getErrorIconEl: function() {
        if (!this._errorIconEl) {
            this._errorIconEl = mini.append(this.el, '<span class="mini-errorIcon"></span>');
        }
        return this._errorIconEl;
    },
    _RemoveErrorIcon: function() {
        if (this._errorIconEl) {
            var el = this._errorIconEl;
            jQuery(el).remove();
        }
        this._errorIconEl = null;
    },

    __OnClick: function(e) {

        if (this.enabled == false) return;
        this.fire("click", {
            htmlEvent: e
        });

        if (this.isReadOnly()) return;

        if (!mini.isAncestor(this._borderEl, e.target)) return;

        var t = new Date();

        if (mini.isAncestor(this._buttonEl, e.target)) {
            this._OnButtonClick(e);
        }


        if (mini.findParent(e.target, this._closeCls)) {


            if (this.autoClear) {

                if ((this.value && this.value !== 0) || this.text !== "") {
                    this.setValue("");
                    this.setText("");
                    this._OnValueChanged();

                }
            }

            this.fire("closeclick", {
                htmlEvent: e
            });
        }









        this._handlerButtonElClick(e);

    },

    _handlerButtonElClick: function(e) {
        var btnEl = mini.findParent(e.target, "mini-buttonedit-button")
        if (btnEl && btnEl != this._buttonEl && btnEl != this._closeEl) {
            var name = jQuery(btnEl).attr("name");
            var button = this.getButtonByName(name);


            var event = {
                sender: this,
                button: button,
                htmlEvent: e
            };
            if (button.handler) button.handler(event);

        }
    },

    __OnMouseDown: function(e) {

        if (this.isReadOnly() || this.enabled == false) return;

        if (!mini.isAncestor(this._borderEl, e.target)) return;

        if (!mini.isAncestor(this._textEl, e.target)) {
            this._clickTarget = e.target;
            var sf = this;
            setTimeout(function() {
                sf.focus();
                mini.selectRange(sf._textEl, 1000, 1000);
            }, 1);
            if (mini.isAncestor(this._buttonEl, e.target)) {
                var up = mini.findParent(e.target, "mini-buttonedit-up");
                var down = mini.findParent(e.target, "mini-buttonedit-down");
                if (up) {
                    mini.addClass(up, this._buttonPressedCls);
                    this._OnButtonMouseDown(e, "up");
                } else if (down) {
                    mini.addClass(down, this._buttonPressedCls);
                    this._OnButtonMouseDown(e, "down");
                } else {
                    mini.addClass(this._buttonEl, this._buttonPressedCls);
                    this._OnButtonMouseDown(e);
                }
            }
            mini.on(document, "mouseup", this.__OnDocMouseUp, this);

            var btnEl = mini.findParent(e.target, "mini-buttonedit-button")
            if (btnEl) {
                mini.addClass(btnEl, this._buttonPressedCls);
            }

        }
    },
    __OnDocMouseUp: function(e) {

        this._clickTarget = null;









        var me = this;
        setTimeout(function() {
            var doms = me._buttonEl.getElementsByTagName("*");
            for (var i = 0, l = doms.length; i < l; i++) {
                mini.removeClass(doms[i], me._buttonPressedCls);
            }
            mini.removeClass(me._buttonEl, me._buttonPressedCls);
            mini.removeClass(me.el, me._pressedCls);

            jQuery(".mini-buttonedit-button", me._buttonsEl).removeClass(me._buttonPressedCls);

        }, 80);
        mini.un(document, "mouseup", this.__OnDocMouseUp, this);
    },
    __OnFocus: function(e) {

        this.doUpdate();
        this._initInputEvents();
        if (this.isReadOnly()) return;

        this._focused = true;
        this.addCls(this._focusCls);



        if (this.selectOnFocus) {
            this.selectText();
        }
        this.fire("focus", {
            htmlEvent: e
        });
    },
    __doFocusCls: function() {
        if (this._focused == false) {
            this.removeCls(this._focusCls);
        }
    },
    __fireBlur: function(e) {



        var sf = this;

        function f() {
            if (sf._focused == false) {
                sf.removeCls(sf._focusCls);

                if (sf.validateOnLeave && sf.isEditable()) {

                    sf._tryValidate();
                }

                this.fire("blur", {
                    htmlEvent: e
                });
            }

        }
        setTimeout(function() {
            f.call(sf);
        }, 2);

    },
    __OnBlur: function(e) {

        var me = this;

        me._focused = false;
        setTimeout(function() {
            me.__fireBlur(e);

        }, 10);


    },
    __OnInputKeyDown: function(e) {
        var ex = {
            htmlEvent: e
        };
        this.fire("keydown", ex);
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }

        if (e.keyCode == 27 || e.keyCode == 13 || e.keyCode == 9) {
            var sf = this;
            sf.__OnInputTextChanged(null);
            if (e.keyCode == 13) {
                var me = this;

                me.fire("enter", ex);

            }
        }
        if (e.keyCode == 27) {
            e.preventDefault();
        }
    },
    __OnInputTextChanged: function() {

        var v = this._textEl.value;
        if (v == this.text) return;
        var value = this.getValue();


        this.setText(v);
        this.setValue(v);
        if (value !== this.getFormValue()) {
            this._OnValueChanged();
        }

    },
    __OnInputKeyUp: function(e) {
        this.fire("keyup", {
            htmlEvent: e
        });
    },
    __OnInputKeyPress: function(e) {
        this.fire("keypress", {
            htmlEvent: e
        });
    },

    _OnButtonClick: function(htmlEvent) {
        var e = {
            htmlEvent: htmlEvent,
            cancel: false
        };
        this.fire("beforebuttonclick", e);
        if (e.cancel == true) return;

        this.fire("buttonclick", e);
    },
    _OnButtonMouseDown: function(htmlEvent, spinType) {
        this.focus();
        this.addCls(this._focusCls);

        this.fire("buttonmousedown", {
            htmlEvent: htmlEvent,
            spinType: spinType
        });
    },

    onButtonClick: function(fn, scope) {
        this.on("buttonclick", fn, scope);
    },
    onButtonMouseDown: function(fn, scope) {
        this.on("buttonmousedown", fn, scope);
    },
    onTextChanged: function(fn, scope) {
        this.on("textchanged", fn, scope);
    },

    textName: "",
    setTextName: function(value) {
        this.textName = value;
        if (this._textEl) mini.setAttr(this._textEl, "name", this.textName);
    },
    getTextName: function() {
        return this.textName;
    },

    setSelectOnFocus: function(value) {
        this.selectOnFocus = value;
    },
    getSelectOnFocus: function(value) {
        return this.selectOnFocus;
    },
    setShowClose: function(value) {
        this.showClose = value;
        this._doInputLayout();
    },
    getShowClose: function(value) {
        return this.showClose;
    },

    setShowButton: function(value) {
        this.showButton = value;
        this._doInputLayout();
    },
    getShowButton: function() {
        return this.showButton;
    },

    inputStyle: "",
    setInputStyle: function(value) {
        this.inputStyle = value;
        mini.setStyle(this._textEl, value);
    },

    getAttrs: function(el) {
        var attrs = mini.ButtonEdit.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs, ["value", "text", "inputType", "textName", "emptyText", "placeholder", "inputStyle", "defaultText",
            "onenter", "onkeydown", "onkeyup", "onkeypress",
            "onbuttonclick", "onbuttonmousedown", "ontextchanged", "onfocus", "onblur",
            "oncloseclick", "onclick", "buttons", "buttonToolTip"
        ]);
        mini._ParseBool(el, attrs, ["allowInput", "inputAsValue", "selectOnFocus", "showClose", "showButton", "autoClear"]);
        mini._ParseInt(el, attrs, ["maxLength", "minLength"]);



        var buttons = attrs["buttons"];
        if (buttons) {
            buttons = eval("(" + buttons + ")");
            attrs.buttons = buttons || null;
        }

        return attrs;
    }
});
mini.regClass(mini.ButtonEdit, 'buttonedit');







mini.PopupEdit = function() {
    mini.PopupEdit.superclass.constructor.apply(this, arguments);
    this._createPopup();

    this.el.className += ' mini-popupedit';
}
mini.extend(mini.PopupEdit, mini.ButtonEdit, {
    uiCls: "mini-popupedit",
    popup: null,

    popupCls: "mini-buttonedit-popup",

    _hoverCls: "mini-buttonedit-hover",
    _pressedCls: "mini-buttonedit-pressed",

    _destroyPopup: true,
    destroy: function(removeEl) {
        if (this.isShowPopup()) {
            this.hidePopup();
        }
        if (this.popup) {
            if (this._destroyPopup) {

                this.popup.destroy();
            }
            this.popup = null;
        }
        if (this._popupInner) {
            this._popupInner.owner = null;
            this._popupInner = null;
        }

        if (this.el) {
            this.el.onmouseover = this.el.onmouseout = null;
        }

        this._listbox = this.tree = null;

        mini.PopupEdit.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function() {
        mini.PopupEdit.superclass._initEvents.call(this);

        mini._BindEvents(function() {
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);
            mini_onOne(this.el, "mouseout", this.__OnMouseOut, this);



        }, this);
    },






    __OnBlur: function(e) {

        this._focused = false;
        if (this._clickTarget && mini.isAncestor(this.el, this._clickTarget)) return;
        if (this.isShowPopup()) return;
        mini.PopupEdit.superclass.__OnBlur.call(this, e);
    },
    __OnMouseOver: function(e) {
        if (this.isReadOnly() || this.allowInput) return;
        if (mini.findParent(e.target, "mini-buttonedit-border")) {

            var btnEl = mini.findParent(e.target, "mini-buttonedit-button");
            if (btnEl && btnEl != this._buttonEl) {} else {

                this.addCls(this._hoverCls);

            }
        }
    },
    __OnMouseOut: function(e) {
        if (this.isReadOnly() || this.allowInput) return;
        this.removeCls(this._hoverCls);
    },
    __OnMouseDown: function(e) {
        if (this.isReadOnly()) return;
        mini.PopupEdit.superclass.__OnMouseDown.call(this, e);
        if (this.allowInput == false && mini.findParent(e.target, "mini-buttonedit-border")) {
            mini.addClass(this.el, this._pressedCls);

            mini.on(document, "mouseup", this.__OnDocMouseUp, this);
        }
    },
    __OnInputKeyDown: function(e) {
        this.fire("keydown", {
            htmlEvent: e
        });
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }
        if (e.keyCode == 9) {
            this.hidePopup();
            return;
        }
        if (e.keyCode == 27) {
            this.hidePopup();
            return;
        }
        if (e.keyCode == 13) {
            this.fire("enter");
        }

        if (this.isShowPopup()) {

            if (e.keyCode == 13 || e.keyCode == 27) {
                e.stopPropagation();
            }
        }
    },
    __OnInputTextChanged: function($) {
        if (this.isShowPopup()) this._textChanged = true;
        else {
            this._textChanged = false;
            mini.PopupEdit.superclass.__OnInputTextChanged.call(this, $)
        }
    },
    within: function(e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this.popup.within(e)) return true;
        return false;
    },

    popupWidth: "100%",
    popupMinWidth: 50,
    popupMaxWidth: 2000,

    popupHeight: "",
    popupMinHeight: 30,
    popupMaxHeight: 2000,

    showPopupOnClick: false,

    setPopup: function(value) {
        if (typeof value == "string") {
            mini.parse(value);
            value = mini.get(value);
        }
        var p = mini.getAndCreate(value);
        if (!p) return;
        p.setVisible(false);

        this._popupInner = p;

        p.owner = this;

        p.on("beforebuttonclick", this.__OnPopupButtonClick, this);
    },

    getPopup: function() {
        if (!this.popup) {
            this._createPopup();
        }
        return this.popup;
    },
    _createPopup: function() {
        this.popup = new mini.Popup();
        this.popup.setShowAction("none");
        this.popup.setHideAction("outerclick");
        this.popup.setPopupEl(this.el);

        this.popup.on("BeforeClose", this.__OnPopupBeforeClose, this);
        this.popup.on("close", this.__OnPopupClose, this);
        mini.on(this.popup.el, "keydown", this.__OnPopupKeyDown, this);
    },
    __OnPopupClose: function(e) {

    },
    __OnPopupBeforeClose: function(e) {
        if (this.within(e.htmlEvent)) e.cancel = true;
        else {
            this._unDocumentMousewheel();
        }
    },
    __OnPopupKeyDown: function(e) {},
    showPopup: function() {


        var ex = {
            cancel: false
        };
        if (this._firebeforeshowpopup !== false) {
            this.fire("beforeshowpopup", ex);
            if (ex.cancel == true) return false;
        }

        var popup = this.getPopup();




        this._syncShowPopup();

        popup.on("Close", this.__OnPopupHide, this);

        this._onDocumentMousewheel();

        this.fire("showpopup");
    },
    _unDocumentMousewheel: function() {
        mini.un(document, "mousewheel", this.__OnDocumentMousewheel, this);
        this._mousewheelXY = null;

    },
    _onDocumentMousewheel: function() {
        this._unDocumentMousewheel();

        this._mousewheelXY = mini.getXY(this.el);
        mini.on(document, "mousewheel", this.__OnDocumentMousewheel, this);

    },
    __OnDocumentMousewheel: function(e) {
        var that = this;


        function doWheel() {
            if (!that.isShowPopup()) return;
            var box = that._mousewheelXY;
            var xy = mini.getXY(that.el);
            if (box[0] != xy[0] || box[1] != xy[1]) {
                that.hidePopup();
            } else {
                setTimeout(doWheel, 300);
            }

        }

        setTimeout(doWheel, 300);
    },









    _syncShowPopup: function() {
        var popup = this.getPopup();

        if (this._popupInner && this._popupInner.el.parentNode != this.popup._contentEl) {
            this.popup._contentEl.appendChild(this._popupInner.el);
            this._popupInner.setVisible(true);
        }

        var box = mini.getBox(this._borderEl);

        var w = this.popupWidth;
        if (this.popupWidth == "100%") w = box.width;

        popup.show();

        popup.setWidth(w);

        var h = parseInt(this.popupHeight);
        if (!isNaN(h)) {
            popup.setHeight(h);
        } else {
            popup.setHeight("auto");
        }

        popup.setMinWidth(this.popupMinWidth);
        popup.setMinHeight(this.popupMinHeight);
        popup.setMaxWidth(this.popupMaxWidth);
        popup.setMaxHeight(this.popupMaxHeight);

        var options = {
            xAlign: "left",
            yAlign: "below",
            outYAlign: "above",
            outXAlign: "right",
            popupCls: this.popupCls,
            alwaysView: this.alwaysView
        };

        this._doShowAtEl(this._borderEl, options);
    },
    _doShowAtEl: function(el, options) {
        var popup = this.getPopup();
        popup.showAtEl(el, options);
    },
    __OnPopupHide: function(e) {
        if (this._textChanged) {
            this._textChanged = false;
            this.__OnInputTextChanged()
        }
        this.__doFocusCls();
        this.fire("hidepopup");
    },
    hidePopup: function() {
        if (this.isShowPopup()) {
            var popup = this.getPopup();

            popup.close();

            if (this._autoBlur !== false) {
                this.blur();
            }



        }
    },
    isShowPopup: function() {
        if (this.popup && this.popup.isDisplay()) return true;
        else return false;
    },

    alwaysView: false,
    setAlwaysView: function(value) {
        this.alwaysView = value;
    },
    getAlwaysView: function() {
        return this.alwaysView;
    },

    setPopupWidth: function(value) {
        this.popupWidth = value;
    },
    setPopupMaxWidth: function(value) {
        this.popupMaxWidth = value;
    },
    setPopupMinWidth: function(value) {
        this.popupMinWidth = value;
    },
    getPopupWidth: function(value) {
        return this.popupWidth;
    },
    getPopupMaxWidth: function(value) {
        return this.popupMaxWidth;
    },
    getPopupMinWidth: function(value) {
        return this.popupMinWidth;
    },
    setPopupHeight: function(value) {
        this.popupHeight = value;
    },
    setPopupMaxHeight: function(value) {
        this.popupMaxHeight = value;
    },
    setPopupMinHeight: function(value) {
        this.popupMinHeight = value;
    },
    getPopupHeight: function(value) {
        return this.popupHeight;
    },
    getPopupMaxHeight: function(value) {
        return this.popupMaxHeight;
    },
    getPopupMinHeight: function(value) {
        return this.popupMinHeight;
    },
    setShowPopupOnClick: function(value) {

        this.showPopupOnClick = value;
    },
    getShowPopupOnClick: function(value) {
        return this.showPopupOnClick;
    },

    __OnClick: function(e) {

        if (this.enabled == false) return;
        this.fire("click", {
            htmlEvent: e
        });

        if (this.isReadOnly()) return;

        if (mini.isAncestor(this._buttonEl, e.target)) {
            this._OnButtonClick(e);
        }
        if (mini.findParent(e.target, this._closeCls)) {

            if (this.isShowPopup()) {
                this.hidePopup();
            }







            if (this.autoClear) {

                if ((this.value && this.value !== 0) || this.text !== "") {
                    this.setValue("");
                    this.setText("");
                    this._OnValueChanged();

                }
            }

            this.fire("closeclick", {
                htmlEvent: e
            });
            return;
        }


        if (this.allowInput == false || mini.isAncestor(this._buttonEl, e.target) || this.showPopupOnClick) {

            var btnEl = mini.findParent(e.target, "mini-buttonedit-button");
            if (btnEl && btnEl != this._buttonEl) {


            } else {

                if (this.isShowPopup()) {
                    this.hidePopup();
                } else {
                    var sf = this;
                    setTimeout(function() {

                        sf.showPopup();
                    }, 1);
                }
            }
        }


        this._handlerButtonElClick(e);

    },
    __OnPopupButtonClick: function(e) {
        if (e.name == "close") this.hidePopup();
        e.cancel = true;
    },
    getAttrs: function(el) {
        var attrs = mini.PopupEdit.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["popupWidth", "popupHeight", "popup", "onshowpopup", "onhidepopup", "onbeforeshowpopup"]);
        mini._ParseInt(el, attrs, ["popupMinWidth", "popupMaxWidth", "popupMinHeight", "popupMaxHeight"]);

        mini._ParseBool(el, attrs, ["showPopupOnClick", "alwaysView"]);


        return attrs;
    }

});
mini.regClass(mini.PopupEdit, 'popupedit');


mini.ComboBox = function() {
    this.data = [];
    this.columns = [];
    mini.ComboBox.superclass.constructor.apply(this, arguments);

    this._initInput();
}
mini.extend(mini.ComboBox, mini.PopupEdit, {
    _initInput: function() {
        var me = this;
        if (isFirefox) {
            this._textEl.oninput = function() {
                me._tryQuery();
            }
        }
    },

    text: '',
    value: '',

    valueField: "id",
    textField: "text",
    dataField: "",

    delimiter: ',',

    multiSelect: false,
    data: [],
    url: "",

    valueInCheckOrder: true,

    columns: [],

    allowInput: false,

    valueFromSelect: false,

    popupMaxHeight: 200,

    __input: function() {
        this._tryQuery()
    },
    setDelimiter: function($) {
        this.delimiter = $;
        if (this._listbox) this._listbox.delimiter = $
    },
    getDelimiter: function() {
        return this.delimiter
    },
    setAutoFocusItem: function($) {
        this.autoFocusItem = $
    },
    getAutoFocusItem: function() {
        return this.autoFocusItem
    },
    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var text = kv.text;
        delete kv.text;
        var value = kv.value;
        delete kv.value;
        var url = kv.url;
        delete kv.url;
        var data = kv.data;
        delete kv.data;

        mini.ComboBox.superclass.set.call(this, kv);

        if (!mini.isNull(data)) {
            this.setData(data);

            kv.data = data;
        }
        if (!mini.isNull(url)) {
            this.setUrl(url);

            kv.url = url;
        }
        if (!mini.isNull(value)) {
            this.setValue(value);

            kv.value = value;
        }

        if (!mini.isNull(text)) {
            this.setText(text);
        }


        return this;
    },


    uiCls: "mini-combobox",


    _createPopup: function() {
        mini.ComboBox.superclass._createPopup.call(this);

        this._listbox = new mini.ListBox();
        this.listbox = this._listbox;
        this._listbox.delimiter = this.delimiter;
        this._listbox.setBorderStyle("border:0;");
        this._listbox.setStyle("width:100%;height:auto;");
        this._listbox.render(this.popup._contentEl);
        this._listbox.on("beforeitemclick", this.__OnBeforeItemClick, this);
        this._listbox.on("itemclick", this.__OnItemClick, this);
        this._listbox.on("drawcell", this.__OnItemDrawCell, this);

        var me = this;
        this._listbox.on("beforeload", function(e) {
            me.fire("beforeload", e);
        }, this);
        this._listbox.on("preload", function(e) {
            me.fire("preload", e);
        }, this);
        this._listbox.on("load", function(e) {
            me.data = e.data;
            me.fire("load", e);
        }, this);
        this._listbox.on("loaderror", function(e) {
            me.fire("loaderror", e);
        }, this);
    },
    showPopup: function() {
        var ex = {
            cancel: false
        };
        this.fire("beforeshowpopup", ex);
        this._firebeforeshowpopup = false;
        if (ex.cancel == true) return;


        this._listbox.setHeight("auto");
        mini.ComboBox.superclass.showPopup.call(this);
        var h = this.popup.el.style.height;
        if (h == "" || h == "auto") {
            this._listbox.setHeight("auto");
        } else {
            this._listbox.setHeight("100%");
        }
	var C = this;
        if (!C.multiSelect) {
            var _ = jQuery("table .mini-listbox-checkbox", C._listbox.el),
                A = _.css("display");
            _.css("display", "table-cell");
            _.css("display", A)
        }
        this._listbox.setValueInCheckOrder(this.valueInCheckOrder);

        this._listbox.setValue(this.value);
	if (this.autoFocusItem && (this.value == "" || mini.isNull(this.value))) this._listbox._focusItem(0)




    },

    changeOnSelectMethod: false,
    isSelected: function($) {
        return this._listbox.isSelected($)
    },
    _syncValueText: function() {
        var _ = this._listbox.getSelecteds(),
            $ = this._listbox.getValueAndText(_);
        this.setValue($[0]);
        this.setText($[1])
    },
    selectAll: function() {
        this._listbox.selectAll();
        this._syncValueText()
    },
    deselectAll: function() {
        this._listbox.deselectAll();
        this._syncValueText()
    },
    deselect: function(item) {
        this._listbox.deselect(item);
	this._syncValueText();
    },

    select: function(item) {
        this._listbox.deselectAll();
        item = this.getItem(item);
        if (item) {
            this._listbox.select(item);
            this.__OnItemClick({
                item: item
            }, false);

            if (this.changeOnSelectMethod) {
                this._OnValueChanged();
            }
        }
    },
    selects: function(items) {
        if (!items) return;
        var vts = this._listbox.getValueAndText(items);
        this.setValue(vts[0]);

        this._listbox.setValue(this.value);
    },
    getItem: function(item) {
        return typeof item == "object" ? item : this.data[item];
    },
    indexOf: function(item) {
        return this.data.indexOf(item);
    },
    getAt: function(index) {
        return this.data[index];
    },
    load: function(data) {

        if (typeof data == "string") {
            this.setUrl(data);
        } else {
            this.setData(data);
        }
    },
    _eval: function(_) {
        return eval('(' + _ + ')');
    },
    setData: function(data) {

        if (typeof data == "string") {
            data = this._eval(data);



        }
        if (!mini.isArray(data)) data = [];
        this._listbox.setData(data);
        this.data = this._listbox.data;



        this.doDataChange();



    },
    getData: function() {
        return this.data;
    },

    clearOnLoad: true,

    setClearOnLoad: function(value) {
        this.clearOnLoad = value;
    },
    getClearOnLoad: function() {
        return this.clearOnLoad
    },

    doDataChange: function() {
        var vts = this._listbox.getValueAndText(this.value);
        var value = vts[0],
            text = vts[1];

        if (value === "" && !this.clearOnLoad) {
            value = this.value;
            text = this.text;

            this.value = null;
        }

        this.text = this._textEl.value = text;
        this.setValue(value);
    },

    setUrl: function(url) {
        this.getPopup();

        this._listbox.setUrl(url);
        this.url = this._listbox.url;
        this.data = this._listbox.data;
        this.doDataChange();
    },
    getUrl: function() {
        return this.url;
    },
    setValueField: function(valueField) {
        this.valueField = valueField;
        if (this._listbox) {
            this._listbox.setValueField(valueField);
        }
    },
    getValueField: function() {
        return this.valueField;
    },
    setTextField: function(value) {
        if (this._listbox) this._listbox.setTextField(value);
        this.textField = value;
    },
    getTextField: function() {
        return this.textField;
    },

    pinyinField: "tag",
    setPinyinField: function(value) {

        this.pinyinField = value;
    },
    getPinyinField: function() {
        return this.pinyinField;
    },

    setDisplayField: function(value) {
        this.setTextField(value);
    },
    setDataField: function(value) {
        if (this._listbox) this._listbox.setDataField(value);
        this.dataField = value;
    },
    getDataField: function() {
        return this.dataField;
    },

    setValueInCheckOrder: function(value) {
        this.valueInCheckOrder = value;
        this._listbox.valueInCheckOrder = value;
    },
    getValueInCheckOrder: function() {
        return this.valueInCheckOrder;
    },






    setValue: function(value) {
        if (mini.isNull(value)) value = "";

        var vts = this._listbox.getValueAndText(value);
        var v = vts[0],
            text = vts[1];
        if (text === "" || mini.isNull(text)) text = value;

        if (this.valueFromSelect && (v === "" || mini.isNull(v))) {
            value = text = "";
        }

        this.value = value;

        this._valueEl.value = this.value;
        this.text = this._textEl.value = text;

        this._doEmpty();






    },
    setMultiSelect: function(value) {
        if (this.multiSelect != value) {
            this.multiSelect = value;
            if (this._listbox) {
                this._listbox.setMultiSelect(value);
                this._listbox.setShowCheckBox(value);
            }
        }
    },
    getMultiSelect: function() {
        return this.multiSelect;
    },
    setColumns: function(value) {
        if (!mini.isArray(value)) value = [];
        this.columns = value;
        this._listbox.setColumns(value);
    },
    getColumns: function() {
        return this.columns;
    },
    showNullItem: false,
    setShowNullItem: function(value) {
        if (this.showNullItem != value) {
            this.showNullItem = value;
            this._listbox.setShowNullItem(value);
        }
    },
    getShowNullItem: function() {
        return this.showNullItem;
    },
    setNullItemText: function(value) {
        if (this.nullItemText != value) {
            this.nullItemText = value;
            this._listbox.setNullItemText(value);
        }
    },
    getNullItemText: function() {
        return this.nullItemText;
    },
    setValueFromSelect: function(value) {
        this.valueFromSelect = value;
    },
    getValueFromSelect: function() {
        return this.valueFromSelect;
    },

    _OnValueChanged: function() {
        if (this.validateOnChanged) {
            this._tryValidate();
        }
        var sf = this;

        function changed() {
            var value = sf.getValue();
            var selecteds = sf.getSelecteds();
            var selected = selecteds[0];
            sf.fire("valuechanged", {
                value: value,
                selecteds: selecteds,
                selected: selected
            });
        }
        setTimeout(function() {
            changed();
        }, 50);

    },
    getSelecteds: function() {
        return this._listbox.findItems(this.value);
    },
    getSelected: function() {
        return this.getSelecteds()[0];
    },
    __OnItemDrawCell: function(e) {

        this.fire("drawcell", e);
    },
    __OnBeforeItemClick: function(_) {
        var $ = {
            item: _.item,
            cancel: false
        };
        this.fire("beforeitemclick", $);
        if ($.cancel) _.cancel = true
    },
    __OnItemClick: function(e, fire) {

        var ev = {
            item: e.item,
            cancel: false
        };

        if (fire !== false) {
            this.fire("beforeitemclick", ev);
            if (ev.cancel) return;
        }



        var items = this._listbox.getSelecteds();

        var vts = this._listbox.getValueAndText(items);



        var value = this.getValue();
        this.setValue(vts[0]);
        this.setText(vts[1]);






        if (e) {
            if (fire !== false) {
                if (value != this.getValue()) {
                    var sf = this;
                    setTimeout(function() {
                        sf._OnValueChanged();
                    }, 1);
                }

                if (!this.multiSelect) {
                    this.hidePopup();
                }

                this.focus();


                this.fire("itemclick", {
                    item: e.item
                });
            }
        }
    },
    __OnInputKeyDown: function(e, userOldText) {
        var ex = {
            htmlEvent: e
        };
        this.fire("keydown", ex);


        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }

        if (e.keyCode == 9) {
            if (this.isShowPopup()) {
                this._autoBlur = false;
                this.hidePopup();
                delete this._autoBlur
            }
            return;
        }

        if (this.isReadOnly()) return;


        switch (e.keyCode) {
            case 27:
                e.preventDefault();
                if (this.isShowPopup()) {
                    e.stopPropagation();
                }

                this.hidePopup();
                this.focus();
                break;
            case 13:
                if (this.isShowPopup()) {
                    e.preventDefault();
                    e.stopPropagation();

                    var index = this._listbox.getFocusedIndex();
                    if (index != -1) {
                        var item = this._listbox.getAt(index);

                        var ev = {
                            item: item,
                            cancel: false
                        };
                        this.fire("beforeitemclick", ev);
                        if (ev.cancel == false) {
                            if (this.multiSelect) {

                            } else {
                                this._listbox.deselectAll();
                                this._listbox.select(item);
                            }
                            var items = this._listbox.getSelecteds();
                            var vts = this._listbox.getValueAndText(items);
                            this.setValue(vts[0]);
                            this.setText(vts[1]);
                            this._OnValueChanged();
                        }
                    }
                    this.hidePopup();
                    this.focus();
                } else {
                    this.fire("enter", ex);
                }
                break;
            case 37:
                break;
            case 38:
                e.preventDefault();
                var index = this._listbox.getFocusedIndex();
                if (index == -1) {
                    index = 0;
                    if (!this.multiSelect) {
                        var item = this._listbox.findItems(this.value)[0];
                        if (item) {
                            index = this._listbox.indexOf(item);
                        }
                    }
                }
                if (this.isShowPopup()) {
                    if (!this.multiSelect) {
                        index -= 1;
                        if (index < 0) index = 0;
                        this._listbox._focusItem(index, true);
                    }
                }
                break;
            case 39:
                break;
            case 40:
                e.preventDefault();

                var index = this._listbox.getFocusedIndex();
                if (index == -1) {
                    index = -1;
                    if (!this.multiSelect) {
                        var item = this._listbox.findItems(this.value)[0];
                        if (item) {
                            index = this._listbox.indexOf(item);
                        }
                    }
                }
                if (this.isShowPopup()) {
                    if (!this.multiSelect) {
                        index += 1;
                        if (index > this._listbox.getCount() - 1) index = this._listbox.getCount() - 1;
                        this._listbox._focusItem(index, true);
                    }
                } else {
                    this.showPopup();
                    if (!this.multiSelect) {
                        this._listbox._focusItem(index, true);
                    }
                }
                break;
            default:
                if (this.allowInput == false) {} else {
                    this._tryQuery(this._textEl.value);
                }
                break;
        }
    },
    __OnInputKeyUp: function(e) {
        this.fire("keyup", {
            htmlEvent: e
        });


    },
    __OnInputKeyPress: function(e) {
        this.fire("keypress", {
            htmlEvent: e
        });
    },
    _tryQuery: function(oldText) {

        var sf = this;
        setTimeout(function() {
            var text = sf._textEl.value;
            if (text != oldText) {
                sf._doQuery(text);

            }
        }, 10);
    },
    _doQuery: function(key) {
        if (!this.autoFilter) return;
        if (this.multiSelect == true) return;
        var view = [];









        key = key.toUpperCase();
        for (var i = 0, l = this.data.length; i < l; i++) {
            var o = this.data[i];
            var text = mini._getMap(this.textField, o);
            var pinyin = mini._getMap(this.pinyinField, o);

            text = text ? String(text).toUpperCase() : "";
            pinyin = pinyin ? String(pinyin).toUpperCase() : "";
            if (text.indexOf(key) != -1 || pinyin.indexOf(key) != -1) {
                view.push(o);
            }
        }
        this._listbox.setData(view);
        this._filtered = true;
        if (key !== "" || this.isShowPopup()) {
            this.showPopup();



            var index = 0;

            if (this._listbox.getShowNullItem()) index = 1;
            var me = this;

            me._listbox._focusItem(index, true);

        }
    },
    __OnPopupHide: function(e) {







        if (this._textEl.value == "") this._listbox._blurItem();

        if (this._filtered) {
            this._filtered = false;
            if (this._listbox.el) {
                this._listbox.setData(this.data);
            }
        }
        this.__doFocusCls();
        this.fire("hidepopup");
    },





    findItems: function(value) {
        return this._listbox.findItems(value);
    },
    __OnInputTextChanged: function(e) {

        if (this.isShowPopup()) return;
        if (this.multiSelect == false) {

            var text = this._textEl.value;



            var data = this.getData();
            var selected = null;
            for (var i = 0, l = data.length; i < l; i++) {
                var item = data[i];
                var itemText = item[this.textField];
                if (itemText == text) {
                    selected = item;
                    break;
                }
            }
            if (selected) {
                this._listbox.setValue(selected ? selected[this.valueField] : "");

                var v = this._listbox.getValue();
                var vts = this._listbox.getValueAndText(v);

                var value = this.getValue();

                this.setValue(v);
                this.setText(vts[1]);
            } else {
                if (this.valueFromSelect) {
                    this.setValue("");
                    this.setText("");
                } else {
                    this.setValue(text);
                    this.setText(text);
                }
            }
            if (value != this.getValue()) {
                var sf = this;

                sf._OnValueChanged();

            }


        }









    },
    ajaxAsync: false,
    setAjaxAsync: function(value) {
        this.ajaxAsync = value;
        this._listbox.setAjaxAsync(value);
    },
    setAjaxData: function(value) {
        this.ajaxData = value;
        this._listbox.setAjaxData(value);
    },
    setAjaxType: function(value) {
        this.ajaxType = value;
        this._listbox.setAjaxType(value);
    },
    autoFilter: true,

    setAutoFilter: function(value) {
        this.autoFilter = value;
    },
    getAutoFilter: function() {
        return this.autoFilter;
    },


    getAttrs: function(el) {

        var attrs = mini.ComboBox.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["url", "data", "textField", "valueField", "displayField", "nullItemText", "pinyinField",
            "ondrawcell", "onbeforeload", "onpreload", "onload", "onloaderror", "onitemclick", "onbeforeitemclick"
        ]);
        mini._ParseBool(el, attrs, ["multiSelect", "ajaxAsync", "showNullItem", "valueFromSelect", "valueInCheckOrder", "clearOnLoad", "autoFilter"]);

        if (attrs.displayField) attrs.textField = attrs.displayField;

        var valueField = attrs.valueField || this.valueField;
        var textField = attrs.textField || this.textField;
        if (el.nodeName.toLowerCase() == "select") {

            var data = [];
            for (var i = 0, l = el.length; i < l; i++) {
                var op = el.options[i];
                var o = {};
                o[textField] = op.text;
                o[valueField] = op.value;

                data.push(o);
            }
            if (data.length > 0) {
                attrs.data = data;
            }
        } else {
            var cs = mini.getChildNodes(el);
            for (var i = 0, l = cs.length; i < l; i++) {
                var node = cs[i];
                var property = jQuery(node).attr("property");
                if (!property) continue;
                property = property.toLowerCase();
                if (property == "columns") {
                    attrs.columns = mini._ParseColumns(node);
                } else if (property == "data") {
                    attrs.data = node.innerHTML;
                }
            }
        }
        return attrs;
    }
});
mini.regClass(mini.ComboBox, 'combobox');


mini.DatePicker = function() {
    mini.DatePicker.superclass.constructor.apply(this, arguments);
    mini.addClass(this.el, "mini-datepicker");

    this.on("validation", this.__OnValidation, this);
}

mini.extend(mini.DatePicker, mini.PopupEdit, {
    valueFormat: "",
    format: "yyyy-MM-dd",


    maxDate: null,
    minDate: null,

    popupWidth: "",

    viewDate: new Date(),
    showTime: false,
    timeFormat: 'H:mm',

    showYesterdayButton: false,
    showTodayButton: true,
    showClearButton: true,
    showOkButton: false,

    valueType: "date",

    uiCls: "mini-datepicker",

    _getCalendar: function() {

        if (!mini.DatePicker._Calendar) {
            var calendar = mini.DatePicker._Calendar = new mini.Calendar();

            calendar.setStyle("border:0;");
        }
        return mini.DatePicker._Calendar;
    },

    destroy: function(removeEl) {
        if (this._destroyPopup) {

        }
        this._calendar = null;

        mini.DatePicker.superclass.destroy.call(this, removeEl);
    },
    _createPopup: function() {

        mini.DatePicker.superclass._createPopup.call(this);

        this._calendar = this._getCalendar();
    },
    __OnPopupClose: function(e) {
        if (this._calendar) {
            this._calendar.hideMenu();
        }
    },
    _monthPicker: false,
    showPopup: function() {
        var ex = {
            cancel: false
        };
        this.fire("beforeshowpopup", ex);
        if (ex.cancel == true) return;

        this._calendar = this._getCalendar();
        this._calendar.beginUpdate();
        this._calendar._allowLayout = false;
        if (this._calendar.el.parentNode != this.popup._contentEl) {
            this._calendar.render(this.popup._contentEl);
        }

        this._calendar.set({
            monthPicker: this._monthPicker,
            showTime: this.showTime,
            timeFormat: this.timeFormat,
            showClearButton: this.showClearButton,
            showYesterdayButton: this.showYesterdayButton,
            showTodayButton: this.showTodayButton,
            showOkButton: this.showOkButton,
            showWeekNumber: this.showWeekNumber
        });

        this._calendar.setValue(this.value);

        if (this.value) {
            this._calendar.setViewDate(this.value);
        } else {
            this._calendar.setViewDate(this.viewDate);
        }



        function doUpdate() {
            this._calendar.hideMenu();

            if (this._calendar._target) {
                var obj = this._calendar._target;
                this._calendar.un("timechanged", obj.__OnTimeChanged, obj);
                this._calendar.un("dateclick", obj.__OnDateClick, obj);
                this._calendar.un("drawdate", obj.__OnDrawDate, obj);
            }
            this._calendar.on("timechanged", this.__OnTimeChanged, this);
            this._calendar.on("dateclick", this.__OnDateClick, this);
            this._calendar.on("drawdate", this.__OnDrawDate, this);

            this._calendar.endUpdate();

            this._calendar._allowLayout = true;
            this._calendar.doLayout();

            this._calendar.focus();

            this._calendar._target = this;
        }

        var me = this;

        doUpdate.call(me);


        mini.DatePicker.superclass.showPopup.call(this);
    },
    hidePopup: function() {

        mini.DatePicker.superclass.hidePopup.call(this);

        this._calendar.un("timechanged", this.__OnTimeChanged, this);
        this._calendar.un("dateclick", this.__OnDateClick, this);
        this._calendar.un("drawdate", this.__OnDrawDate, this);


        this._calendar.hideMenu();
    },
    within: function(e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this._calendar.within(e)) return true;
        return false;
    },
    __OnPopupKeyDown: function(e) {
        if (e.keyCode == 13) {
            this.__OnDateClick();
        }
        if (e.keyCode == 27) {
            this.hidePopup();
            this.focus();
        }
    },
    minDateErrorText: '',
    maxDateErrorText: '',
    __OnValidation: function(e) {

        if (e.isValid == false) return;
        var date = this.value;

        if (!mini.isDate(date)) return;
        var maxDate = mini.parseDate(this.maxDate);
        var minDate = mini.parseDate(this.minDate);
        var maxDateErrorText = this.maxDateErrorText || mini.VTypes.maxDateErrorText;
        var minDateErrorText = this.minDateErrorText || mini.VTypes.minDateErrorText;
        if (mini.isDate(maxDate)) {
            if (date.getTime() > maxDate.getTime()) {
                e.isValid = false;
                e.errorText = String.format(maxDateErrorText, mini.formatDate(maxDate, this.format));
            }
        }
        if (mini.isDate(minDate)) {
            if (date.getTime() < minDate.getTime()) {
                e.isValid = false;
                e.errorText = String.format(minDateErrorText, mini.formatDate(minDate, this.format));
            }
        }

    },
    __OnDrawDate: function(e) {
        var date = e.date;
        var maxDate = mini.parseDate(this.maxDate);
        var minDate = mini.parseDate(this.minDate);
        if (mini.isDate(maxDate)) {
            if (date.getTime() > maxDate.getTime()) {
                e.allowSelect = false;
            }
        }
        if (mini.isDate(minDate)) {
            if (date.getTime() < minDate.getTime()) {
                e.allowSelect = false;
            }
        }

        this.fire("drawdate", e);
    },
    __OnDateClick: function(e) {
        if (!e) return;
        if (this.showOkButton && e.action != "ok") return;

        var date = this._calendar.getValue();
        var value = this.getFormValue('U');

        this.setValue(date);

        if (value !== this.getFormValue('U')) {
            this._OnValueChanged();
        }

        this.hidePopup();

        this.focus();
    },
    __OnTimeChanged: function(e) {
        if (this.showOkButton) return;
        var date = this._calendar.getValue();
        this.setValue(date);
        this._OnValueChanged();
    },
    setFormat: function(value) {
        if (typeof value != "string") return;
        if (this.format != value) {
            this.format = value;
            this._textEl.value = this._valueEl.value = this.getFormValue();
        }
    },
    getFormat: function() {
        return this.format;
    },
    setValueFormat: function(value) {
        if (typeof value != "string") return;
        if (this.valueFormat != value) {
            this.valueFormat = value;
        }
    },
    getValueFormat: function() {
        return this.valueFormat;
    },



    setValue: function(value) {

        var me = this;

        if (me.valueType == "date") {
            value = mini.parseDate(value);
        } else {
            if (mini.isDate(value)) value = mini.formatDate(value, me.format);
        }

        if (mini.isNull(value)) value = "";
        if (mini.isDate(value)) {
            value = new Date(value.getTime());
            if (mini.isDate(value) && isNaN(value.getTime())) {
                value = "";
            }
        }
        if (this.value != value) {
            this.value = value;

        }
        this.text = this._textEl.value = this._valueEl.value = this.getFormValue();
    },
    nullValue: "",
    setNullValue: function(value) {
        if (value == "null") value = null;
        this.nullValue = value;
    },
    getNullValue: function() {
        return this.nullValue;
    },

    getValue: function() {
        if (this.valueType != "date") return this.value;
        if (!mini.isDate(this.value)) return this.nullValue;
        var v = this.value;
        if (this.valueFormat) {
            v = mini.formatDate(v, this.valueFormat);
        }
        return v;
    },

    getFormValue: function(format) {
        if (this.valueType != "date") return this.value;
        if (!mini.isDate(this.value)) return "";
        format = format || this.format;
        return mini.formatDate(this.value, format);
    },

    setViewDate: function(value) {
        value = mini.parseDate(value);
        if (!mini.isDate(value)) return;
        this.viewDate = value;
    },
    getViewDate: function() {
        return this._calendar.getViewDate();
    },
    setShowTime: function(value) {
        if (this.showTime != value) {
            this.showTime = value;

        }
    },
    getShowTime: function() {
        return this.showTime;
    },
    setTimeFormat: function(value) {
        if (this.timeFormat != value) {
            this.timeFormat = value;

        }
    },
    getTimeFormat: function() {
        return this.timeFormat;
    },

    setShowYesterdayButton: function(value) {
        this.showYesterdayButton = value;

    },
    getShowYesterdayButton: function() {
        return this.showYesterdayButton;
    },
    setShowTodayButton: function(value) {
        this.showTodayButton = value;

    },
    getShowTodayButton: function() {
        return this.showTodayButton;
    },
    setShowClearButton: function(value) {
        this.showClearButton = value;

    },
    getShowClearButton: function() {
        return this.showClearButton;
    },
    setShowOkButton: function(value) {
        this.showOkButton = value;
    },
    getShowOkButton: function() {
        return this.showOkButton;
    },
    setShowWeekNumber: function(value) {
        this.showWeekNumber = value;
    },
    getShowWeekNumber: function() {
        return this.showWeekNumber;
    },
    setMaxDate: function(value) {
        this.maxDate = value;
    },
    getMaxDate: function() {
        return this.maxDate;
    },
    setMinDate: function(value) {
        this.minDate = value;
    },
    getMinDate: function() {
        return this.minDate;
    },

    setMaxDateErrorText: function(value) {
        this.maxDateErrorText = value;
    },
    getMaxDateErrorText: function() {
        return this.maxDateErrorText;
    },
    setMinDateErrorText: function(value) {
        this.minDateErrorText = value;
    },
    getMinDateErrorText: function() {
        return this.minDateErrorText;
    },

    __OnInputTextChanged: function(e) {
        var v = this._textEl.value;
        var value = this.getFormValue('U');


        if (this.valueType == "date") {
            var d = mini.parseDate(v);


            if (!d || isNaN(d)) {
                d = null;
            }

        }

        this.setValue(v);



        if (value !== this.getFormValue('U')) {
            this._OnValueChanged();
        }

    },
    __OnInputKeyDown: function(e) {
        var ex = {
            htmlEvent: e
        };
        this.fire("keydown", ex);
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }

        if (e.keyCode == 9) {
            if (this.isShowPopup()) {
                this.hidePopup();
            }
            return;
        }

        if (this.isReadOnly()) return;

        switch (e.keyCode) {
            case 27:
                e.preventDefault();
                if (this.isShowPopup()) {
                    e.stopPropagation();
                }

                this.hidePopup();
                break;
            case 9:
            case 13:

                if (this.isShowPopup()) {
                    e.preventDefault();
                    e.stopPropagation();


                    this.hidePopup();
                    this.focus();

                } else {
                    this.__OnInputTextChanged(null);
                    var me = this;
                    setTimeout(function() {
                        me.fire("enter", ex);
                    }, 10);
                }
                break;
            case 37:
                break;
            case 38:
                e.preventDefault();
                break;
            case 39:
                break;
            case 40:
                if (this.keyNavEnabled) {
                    e.preventDefault();
                    this.showPopup()
                }
                break;
            default:
                break;
        }
    },

    getAttrs: function(el) {
        var attrs = mini.DatePicker.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["format", "viewDate", "timeFormat", "ondrawdate", "minDate", "maxDate", "valueType",
            "valueFormat", "nullValue", "minDateErrorText", "maxDateErrorText"
        ]);
        mini._ParseBool(el, attrs, ["showTime", "showTodayButton", "showClearButton", "showOkButton", "showWeekNumber", "showYesterdayButton"]);


        return attrs;
    }
});

mini.regClass(mini.DatePicker, 'datepicker');


mini.MonthPicker = function() {
    mini.MonthPicker.superclass.constructor.apply(this, arguments);

}

mini.extend(mini.MonthPicker, mini.DatePicker, {
    uiCls: 'mini-monthpicker',
    valueFormat: "",
    format: "yyyy-MM",
    _monthPicker: true
});
mini.regClass(mini.MonthPicker, 'monthpicker');


mini.Calendar = function() {
    this.viewDate = new Date();
    this._selectedDates = [];
    mini.Calendar.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Calendar, mini.Control, {
    width: 220,
    height: 160,

    monthPicker: false,

    _clearBorder: false,

    viewDate: null,
    _selectedDate: "",
    _selectedDates: [],
    multiSelect: false,

    firstDayOfWeek: 0,
    yesterdayText: "Yesterday",
    todayText: "Today",
    clearText: "Clear",
    okText: "OK",
    cancelText: "Cancel",
    daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    format: "MMM, yyyy",

    timeFormat: 'H:mm',

    showTime: false,
    currentTime: true,

    rows: 1,
    columns: 1,

    headerCls: "",
    bodyCls: "",
    footerCls: "",

    _todayCls: "mini-calendar-today",
    _weekendCls: "mini-calendar-weekend",
    _otherMonthCls: "mini-calendar-othermonth",
    _selectedDateCls: "mini-calendar-selected",

    showHeader: true,
    showFooter: true,
    showWeekNumber: false,
    showDaysHeader: true,
    showMonthButtons: true,
    showYearButtons: true,
    showTodayButton: true,
    showClearButton: true,
    showOkButton: false,

    showYesterdayButton: false,

    isWeekend: function(date) {
        var day = date.getDay();
        return day == 0 || day == 6;
    },
    getFirstDateOfMonth: function(date) {

        var date = new Date(date.getFullYear(), date.getMonth(), 1);

        return mini.getWeekStartDate(date, this.firstDayOfWeek);
    },
    getShortWeek: function(week) {
        return this.daysShort[week];
    },

    uiCls: "mini-calendar",
    _create: function() {
        var s = '<tr style="width:100%;"><td style="width:100%;"></td></tr>';
        s += '<tr ><td><div class="mini-calendar-footer">' +
            '<span style="display:inline-block;"><input name="time" class="mini-timespinner mini-calendar-timespinner" format="' + this.timeFormat + '"/>' +
            '<span class="mini-calendar-footerSpace"></span></span>' +
            '<span class="mini-calendar-tadayButton">' + this.todayText + '</span>'

            +
            '<span class="mini-calendar-footerSpace"></span>' +
            '<span class="mini-calendar-clearButton">' + this.clearText + '</span>' +
            '<span class="mini-calendar-okButton">' + this.okText + '</span>' +
            '<a href="#" class="mini-calendar-focus" style="position:absolute;left:-10px;top:-10px;width:0px;height:0px;outline:none" hideFocus></a>' +
            '</div></td></tr>';

        var html = '<table class="mini-calendar" cellpadding="0" cellspacing="0">' + s + '</table>';

        var d = document.createElement("div");
        d.innerHTML = html;
        this.el = d.firstChild;

        var trs = this.el.getElementsByTagName("tr");
        var tds = this.el.getElementsByTagName("td");

        this._innerEl = tds[0];
        this._footerEl = mini.byClass("mini-calendar-footer", this.el);

        this.timeWrapEl = this._footerEl.childNodes[0];
        this.todayButtonEl = this._footerEl.childNodes[1];
        this.footerSpaceEl = this._footerEl.childNodes[2];
        this.closeButtonEl = this._footerEl.childNodes[3];
        this.okButtonEl = this._footerEl.childNodes[4];
        this._focusEl = this._footerEl.lastChild;



        this.yesterdayButtonEl = mini.after(this.todayButtonEl, '<span class="mini-calendar-tadayButton yesterday">' + this.yesterdayText + '</span>');


        mini.parse(this._footerEl);
        this.timeSpinner = mini.getbyName('time', this.el);
        this.doUpdate();
    },
    focus: function() {
        try {
            this._focusEl.focus();
        } catch (e) {}
    },
    destroy: function(removeEl) {

        if (this.timeSpinner) {
            this.timeSpinner.destroy();
            this.timeSpinner = null;
        }

        this._innerEl = this._footerEl = this.timeWrapEl = this.todayButtonEl = this.footerSpaceEl = this.closeButtonEl = null;

        this._focusEl = this.okButtonEl = this.yesterdayButtonEl = null;

        this.timeSpinner = null;

        mini.Calendar.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function() {
        if (this.timeSpinner) this.timeSpinner.on("valuechanged", this.__OnTimeChanged, this);
        mini._BindEvents(function() {





            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "keydown", this.__OnKeyDown, this);

        }, this);









    },
    getDateEl: function(date) {
        if (!date) return null;
        var id = this.uid + "$" + mini.clearTime(date).getTime();
        return document.getElementById(id);
    },
    within: function(e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this.menuEl && mini.isAncestor(this.menuEl, e.target)) return true;
        return false;
    },


    setShowHeader: function(value) {
        this.showHeader = value;
        this.doUpdate();
    },
    getShowHeader: function() {
        return this.showHeader;
    },
    setShowFooter: function(value) {
        this.showFooter = value;
        this.doUpdate();
    },
    getShowFooter: function() {
        return this.showFooter;
    },
    setShowWeekNumber: function(value) {
        this.showWeekNumber = value;
        this.doUpdate();
    },
    getShowWeekNumber: function() {
        return this.showWeekNumber;
    },
    setShowDaysHeader: function(value) {
        this.showDaysHeader = value;
        this.doUpdate();
    },
    getShowDaysHeader: function() {
        return this.showDaysHeader;
    },
    setShowMonthButtons: function(value) {
        this.showMonthButtons = value;
        this.doUpdate();
    },
    getShowMonthButtons: function() {
        return this.showMonthButtons;
    },
    setShowYearButtons: function(value) {
        this.showYearButtons = value;
        this.doUpdate();
    },
    getShowYearButtons: function() {
        return this.showYearButtons;
    },
    setShowTodayButton: function(value) {
        this.showTodayButton = value;
        this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";
        this.doUpdate();
    },
    getShowTodayButton: function() {
        return this.showTodayButton;
    },
    setShowYesterdayButton: function(value) {
        this.showYesterdayButton = value;
        this.yesterdayButtonEl.style.display = this.showYesterdayButton ? "" : "none";
        this.doUpdate();
    },
    getShowYesterdayButton: function() {
        return this.showYesterdayButton;
    },
    setShowClearButton: function(value) {
        this.showClearButton = value;
        this.closeButtonEl.style.display = this.showClearButton ? "" : "none";
        this.doUpdate();
    },
    getShowClearButton: function() {
        return this.showClearButton;
    },
    setShowOkButton: function(value) {
        this.showOkButton = value;
        this.okButtonEl.style.display = this.showOkButton ? "" : "none";
        this.doUpdate();
    },
    getShowOkButton: function() {
        return this.showOkButton;
    },

    setViewDate: function(value) {
        value = mini.parseDate(value);
        if (!value) value = new Date();
        if (mini.isDate(value)) value = new Date(value.getTime());
        this.viewDate = value;
        this.doUpdate();
    },
    getViewDate: function() {
        return this.viewDate;
    },
    setSelectedDate: function(value) {
        value = mini.parseDate(value);
        if (!mini.isDate(value)) value = "";
        else value = new Date(value.getTime());

        var dateEl = this.getDateEl(this._selectedDate);
        if (dateEl) mini.removeClass(dateEl, this._selectedDateCls);


        this._selectedDate = value;
        if (this._selectedDate) this._selectedDate = mini.cloneDate(this._selectedDate);

        var dateEl = this.getDateEl(this._selectedDate);
        if (dateEl) mini.addClass(dateEl, this._selectedDateCls);

        this.fire("datechanged");

    },
    setSelectedDates: function(value) {
        if (!mini.isArray(value)) value = [];
        this._selectedDates = value;
        this.doUpdate();
    },
    getSelectedDate: function() {
        return this._selectedDate ? this._selectedDate : "";
    },
    setTime: function(time) {
        this.timeSpinner.setValue(time);
    },
    getTime: function() {
        return this.timeSpinner.getFormValue();
    },
    setValue: function(value) {
        this.setSelectedDate(value);
        if (!value) {
            value = new Date();
        }
        this.setTime(value);
    },
    getValue: function() {
        var d = this._selectedDate;
        if (d) {
            d = mini.clearTime(d);
            if (this.showTime) {

                var d2 = this.timeSpinner.getValue();

                if (d2) {
                    d.setHours(d2.getHours());
                    d.setMinutes(d2.getMinutes());
                    d.setSeconds(d2.getSeconds());
                }
            }
        }
        return d ? d : "";
    },
    getFormValue: function() {
        var d = this.getValue();
        if (d) return mini.formatDate(d, 'yyyy-MM-dd HH:mm:ss');
        return "";
    },
    isSelectedDate: function(date) {
        if (!date || !this._selectedDate) return false;
        return mini.clearTime(date).getTime() ==
            mini.clearTime(this._selectedDate).getTime();
    },
    setMultiSelect: function(value) {
        this.multiSelect = value;
        this.doUpdate();
    },
    getMultiSelect: function() {
        return this.multiSelect;
    },
    setRows: function(value) {
        if (isNaN(value)) return;
        if (value < 1) value = 1;
        this.rows = value;
        this.doUpdate();
    },
    getRows: function() {
        return this.rows;
    },
    setColumns: function(value) {
        if (isNaN(value)) return;
        if (value < 1) value = 1;
        this.columns = value;
        this.doUpdate();
    },
    getColumns: function() {
        return this.columns;
    },
    setShowTime: function(value) {
        if (this.showTime != value) {
            this.showTime = value;
            this.timeWrapEl.style.display = this.showTime ? '' : "none";
            this.doLayout();
        }
    },
    getShowTime: function() {
        return this.showTime;
    },
    setTimeFormat: function(value) {
        if (this.timeFormat != value) {

            this.timeSpinner.setFormat(value);
            this.timeFormat = this.timeSpinner.format;
        }
    },
    getTimeFormat: function() {
        return this.timeFormat;
    },
    doLayout: function() {

        if (!this.canLayout()) return;

        this.timeWrapEl.style.display = this.showTime ? '' : "none";
        this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";
        this.closeButtonEl.style.display = this.showClearButton ? "" : "none";


        this.yesterdayButtonEl.style.display = this.showYesterdayButton ? "" : "none";


        this.okButtonEl.style.display = this.showOkButton ? "" : "none";
        this.footerSpaceEl.style.display = (this.showClearButton && this.showTodayButton) ? "" : "none";

        this._footerEl.style.display = this.showFooter ? "" : "none";

        var views = this._innerEl.firstChild;

        var autoHeight = this.isAutoHeight();
        if (!autoHeight) {

            views.parentNode.style.height = "100px";
            h = jQuery(this.el).height();


            h -= jQuery(this._footerEl).outerHeight()

            views.parentNode.style.height = h + "px";
        } else {
            views.parentNode.style.height = "";
        }

        mini.layout(this._footerEl);


        if (this.monthPicker) this._tryShowMenu();
    },
    doUpdate: function() {
        if (!this._allowUpdate) return;

        var viewDate = new Date(this.viewDate.getTime());
        var isOne = this.rows == 1 && this.columns == 1;
        var h = 100 / this.rows;
        var s = '<table class="mini-calendar-views" border="0" cellpadding="0" cellspacing="0">';
        for (var i = 0, l = this.rows; i < l; i++) {
            s += '<tr >';
            for (var j = 0, k = this.columns; j < k; j++) {
                s += '<td style="height:' + h + '%">';

                s += this._CreateView(viewDate, i, j);

                s += '</td>';

                viewDate = new Date(viewDate.getFullYear(), viewDate.getMonth() + 1, 1);
            }
            s += '</tr>';
        }

        s += '</table>';
        this._innerEl.innerHTML = s;

        var el = this.el;
        setTimeout(function() {
            mini.repaint(el);
        }, 100);

        this.doLayout();
    },
    _CreateView: function(viewDate, row, column) {
        var month = viewDate.getMonth();
        var date = this.getFirstDateOfMonth(viewDate);
        var firstDateOfWeek = new Date(date.getTime());
        var todayTime = mini.clearTime(new Date()).getTime();
        var selectedTime = this.value ? mini.clearTime(this.value).getTime() : -1;

        var multiView = this.rows > 1 || this.columns > 1;

        var s = '';
        s += '<table class="mini-calendar-view" border="0" cellpadding="0" cellspacing="0">';

        if (this.showHeader) {
            s += '<tr ><td colSpan="10" class="mini-calendar-header"><div class="mini-calendar-headerInner">';
            if (row == 0 && column == 0) {
                s += '<div class="mini-calendar-prev">';
                if (this.showYearButtons) s += '<span class="mini-calendar-yearPrev"></span>';
                if (this.showMonthButtons) s += '<span class="mini-calendar-monthPrev"></span>';
                s += '</div>';
            }
            if (row == 0 && column == this.columns - 1) {
                s += '<div class="mini-calendar-next">';
                if (this.showMonthButtons) s += '<span class="mini-calendar-monthNext"></span>';
                if (this.showYearButtons) s += '<span class="mini-calendar-yearNext"></span>';
                s += '</div>';
            }
            s += '<span class="mini-calendar-title">' + mini.formatDate(viewDate, this.format); + '</span>';
            s += '</div></td></tr>';
        }


        if (this.showDaysHeader) {
            s += '<tr class="mini-calendar-daysheader"><td class="mini-calendar-space"></td>';
            if (this.showWeekNumber) {
                s += '<td sclass="mini-calendar-weeknumber"></td>';
            }

            for (var j = this.firstDayOfWeek, k = j + 7; j < k; j++) {
                var name = this.getShortWeek(j);
                s += '<td yAlign="middle">';
                s += name;
                s += '</td>';
                date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
            }
            s += '<td class="mini-calendar-space"></td></tr>';
        }


        date = firstDateOfWeek;
        for (var i = 0; i <= 5; i++) {
            s += '<tr class="mini-calendar-days"><td class="mini-calendar-space"></td>';
            if (this.showWeekNumber) {
                var num = mini.getWeek(date.getFullYear(), date.getMonth() + 1, date.getDate());
                if (String(num).length == 1) num = "0" + num;
                s += '<td class="mini-calendar-weeknumber" yAlign="middle">' + num + '</td>';
            }
            for (var j = this.firstDayOfWeek, k = j + 7; j < k; j++) {
                var weekend = this.isWeekend(date);
                var clearTime = mini.clearTime(date).getTime();
                var isToday = clearTime == todayTime;
                var isSelected = this.isSelectedDate(date);

                if (month != date.getMonth() && multiView) {
                    clearTime = -1;
                }

                var e = this._OnDrawDate(date);

                s += '<td yAlign="middle" id="';
                s += this.uid + "$" + clearTime;
                s += '" class="mini-calendar-date ';
                if (weekend) {
                    s += ' mini-calendar-weekend '
                }
                if (e.allowSelect == false) {
                    s += ' mini-calendar-disabled '
                }

                if (month != date.getMonth() && multiView) {} else {
                    if (isSelected) {
                        s += ' ' + this._selectedDateCls + ' ';
                    }
                    if (isToday) {
                        s += ' mini-calendar-today '
                    }
                }
                if (month != date.getMonth()) {
                    s += ' mini-calendar-othermonth ';
                }

                if (e.dateCls) s += ' ' + e.dateCls;

                s += '" style="';
                if (e.dateStyle) s += e.dateStyle;
                s += '">';

                if (month != date.getMonth() && multiView) {} else {

                    s += e.dateHtml;
                }
                s += '</td>';

                date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
            }
            s += '<td class="mini-calendar-space"></td></tr>';
        }
        s += '<tr class="mini-calendar-bottom" colSpan="10"><td ></td></tr>';

        s += '</table>';
        return s;
    },
    _OnDrawDate: function(date) {
        var e = {
            date: date,
            dateCls: "",
            dateStyle: "",
            dateHtml: date.getDate(),
            allowSelect: true

        };
        this.fire("drawdate", e);
        return e;
    },
    _OnDateClick: function(date, action) {


        var e = {
            date: date,
            action: action
        };
        this.fire("dateclick", e);

        this._OnValueChanged();
	this.hideMenu();
    },

    menuEl: null,
    menuYear: null,
    menuSelectMonth: null,
    menuSelectYear: null,
    _tryShowMenu: function() {
        if (!this.menuEl) {
            var that = this;

            setTimeout(function() {
                that.showMenu();
            }, 1);
        }
    },
    showMenu: function() {

        this.hideMenu();

        this.menuYear = parseInt(this.viewDate.getFullYear() / 10) * 10;
        this._menuselectMonth = this.viewDate.getMonth();
        this._menuselectYear = this.viewDate.getFullYear();

        var s = '<div class="mini-calendar-menu"></div>';
        this.menuEl = mini.append(document.body, s);
        this.updateMenu(this.viewDate);

        var box = this.getBox();







        if (this.el.style.borderWidth == "0px") {
            this.menuEl.style.border = "0";
        }
        mini.setBox(this.menuEl, box);







        mini.on(this.menuEl, "click", this.__OnMenuClick, this);
        mini.on(this.menuEl, "dblclick", this.__OnMenuDblClick, this);
        mini.on(document, "mousedown", this.__OnBodyMenuMouseDown, this);
    },




    hideMenu: function() {

        if (this.menuEl) {
            mini.un(this.menuEl, "click", this.__OnMenuClick, this);
            mini.un(document, "mousedown", this.__OnBodyMenuMouseDown, this);
            jQuery(this.menuEl).remove();
            this.menuEl = null;
        }
    },
    updateMenu: function() {
        if (!this.menuEl) return;
        var s = '<div class="mini-calendar-menu-months">';
        for (var i = 0, l = 12; i < l; i++) {
            var text = mini.getShortMonth(i);
            var cls = "";
            if (this._menuselectMonth == i) cls = "mini-calendar-menu-selected";
            s += '<a id="' + i + '" class="mini-calendar-menu-month ' + cls + '" href="javascript:void(0);" hideFocus onclick="return false">' + text + '</a>';
        }
        s += '<div style="clear:both;"></div></div>';


        s += '<div class="mini-calendar-menu-years">';
        for (var i = this.menuYear, l = this.menuYear + 10; i < l; i++) {
            var text = i;
            var cls = "";
            if (this._menuselectYear == i) cls = "mini-calendar-menu-selected";
            s += '<a id="' + i + '" class="mini-calendar-menu-year ' + cls + '" href="javascript:void(0);" hideFocus onclick="return false">' + text + '</a>';
        }
        s += '<div class="mini-calendar-menu-prevYear"></div><div class="mini-calendar-menu-nextYear"></div><div style="clear:both;"></div></div>';

        s += '<div class="mini-calendar-footer">' +
            '<span class="mini-calendar-okButton">' + this.okText + '</span>' +
            '<span class="mini-calendar-footerSpace"></span>' +
            '<span class="mini-calendar-cancelButton">' + this.cancelText + '</span>' +
            '</div><div style="clear:both;"></div>';

        this.menuEl.innerHTML = s;
    },
    __OnMenuClick: function(e) {

        var me = this,
            t = e.target,
            monthCls = "mini-calendar-menu-month",
            yearCls = "mini-calendar-menu-year",
            selCls = "mini-calendar-menu-selected";


        function updateMenu() {
            setTimeout(function() {
                me.updateMenu();
            }, 30);
        }

        var monthEl = mini.findParent(t, monthCls);
        var yearEl = mini.findParent(t, yearCls);

        if (monthEl) {
            this._menuselectMonth = parseInt(monthEl.id);


            $("." + monthCls, me.menuEl).removeClass(selCls);
            $(t).parent().find("#" + this._menuselectMonth).addClass(selCls);

        } else if (yearEl) {
            this._menuselectYear = parseInt(yearEl.id);


            $("." + yearCls, me.menuEl).removeClass(selCls);
            $(t).parent().find("#" + this._menuselectYear).addClass(selCls);
        } else if (mini.findParent(t, "mini-calendar-menu-prevYear")) {
            this.menuYear = this.menuYear - 1;
            this.menuYear = parseInt(this.menuYear / 10) * 10;
            updateMenu();
        } else if (mini.findParent(t, "mini-calendar-menu-nextYear")) {
            this.menuYear = this.menuYear + 11;
            this.menuYear = parseInt(this.menuYear / 10) * 10;
            updateMenu();
        } else if (mini.findParent(t, "mini-calendar-okButton")) {
            this.__getMonthYear();
        } else if (mini.findParent(t, "mini-calendar-cancelButton")) {
            if (this.monthPicker) {

                this._OnDateClick(null, "cancel");
            } else {
                this.hideMenu();
            }
        }
    },
    __OnMenuDblClick: function(e) {

        var yearEl = mini.findParent(e.target, "mini-calendar-menu-year");
        var monthEl = mini.findParent(e.target, "mini-calendar-menu-month");
        var dateEl = mini.findParent(e.target, "mini-calendar-date ");

        if (!yearEl && !monthEl && !dateEl) return;

        if (this.monthPicker) {

            if (!monthEl && !yearEl) return;
        }

        this.__getMonthYear();

    },
    __getMonthYear: function() {
        var date = new Date(this._menuselectYear, this._menuselectMonth, 1);
        if (this.monthPicker) {
            this.setViewDate(date);
            this.setSelectedDate(date);
            this._OnDateClick(date);
        } else {
            this.setViewDate(date);
            this.hideMenu();
        }
    },
    __OnBodyMenuMouseDown: function(e) {
        if (!mini.findParent(e.target, "mini-calendar-menu")) {
            if (!mini.findParent(e.target, "mini-monthpicker")) {

                this.hideMenu();


            }
        }
    },

    __OnClick: function(e) {
        var viewDate = this.viewDate;
        if (this.enabled == false) return;
        var t = e.target;
        var titleEl = mini.findParent(e.target, "mini-calendar-title");

        if (mini.findParent(t, "mini-calendar-monthNext")) {
            viewDate.setDate(1);
            viewDate.setMonth(viewDate.getMonth() + 1);
            this.setViewDate(viewDate);
        } else if (mini.findParent(t, "mini-calendar-yearNext")) {

            viewDate.setDate(1);
            viewDate.setFullYear(viewDate.getFullYear() + 1);
            this.setViewDate(viewDate);
        } else if (mini.findParent(t, "mini-calendar-monthPrev")) {
            viewDate.setMonth(viewDate.getMonth() - 1);
            this.setViewDate(viewDate);
        } else if (mini.findParent(t, "mini-calendar-yearPrev")) {
            viewDate.setFullYear(viewDate.getFullYear() - 1);
            this.setViewDate(viewDate);
        } else if (mini.findParent(t, "mini-calendar-tadayButton")) {


            var isYesterday = !!mini.findParent(t, "yesterday");

            var d = new Date();
            if (isYesterday) {
                d.setDate(d.getDate() - 1);
            }
            this.setViewDate(d);
            this.setSelectedDate(d);
            if (this.currentTime) {
                var td = new Date();
                this.setTime(td);
            }
            this._OnDateClick(d, "today");
        } else if (mini.findParent(t, "mini-calendar-clearButton")) {
            this.setSelectedDate(null);
            this.setTime(null);
            this._OnDateClick(null, "clear");
        } else if (mini.findParent(t, "mini-calendar-okButton")) {
            this._OnDateClick(null, "ok");



        } else if (titleEl) {
            this.showMenu();
        }

        var dateEl = mini.findParent(e.target, "mini-calendar-date");

        if (dateEl && !mini.hasClass(dateEl, "mini-calendar-disabled")) {
            var ids = dateEl.id.split("$");
            var time = parseInt(ids[ids.length - 1]);
            if (time == -1) return;
            var date = new Date(time);

            this._OnDateClick(date);
        }

    },
    __OnMouseDown: function(e) {
        if (this.enabled == false) return;
        var dateEl = mini.findParent(e.target, "mini-calendar-date");
        if (dateEl && !mini.hasClass(dateEl, "mini-calendar-disabled")) {
            var ids = dateEl.id.split("$");
            var time = parseInt(ids[ids.length - 1]);
            if (time == -1) return;
            var date = new Date(time);
            this.setSelectedDate(date);
        }
    },
    __OnTimeChanged: function(e) {
        this.fire("timechanged");
        this._OnValueChanged();
    },

    __OnKeyDown: function(e) {
        if (this.enabled == false) return;

        var date = this.getSelectedDate();
        if (!date) date = new Date(this.viewDate.getTime());
        switch (e.keyCode) {
            case 27:

                break;
            case 13:
                if (date) {

                    this._OnDateClick(date);
                }
                return;
                break;
            case 37:
                date = mini.addDate(date, -1, 'D');
                break;
            case 38:
                date = mini.addDate(date, -7, 'D');
                break;
            case 39:
                date = mini.addDate(date, 1, 'D');
                break;
            case 40:
                date = mini.addDate(date, 7, 'D');
                break;
            default:
                break;
        }
        var me = this;


        if (date.getMonth() != me.viewDate.getMonth()) {
            me.setViewDate(mini.cloneDate(date));
            me.focus();
        }

        var dateEl = this.getDateEl(date);
        if (dateEl && mini.hasClass(dateEl, "mini-calendar-disabled")) {
            return;
        }

        me.setSelectedDate(date);

        if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40) {
            e.preventDefault();
        }

    },

    _OnValueChanged: function() {
        this.fire("valuechanged");
    },

    getAttrs: function(el) {
        var attrs = mini.Calendar.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["viewDate", "rows", "columns",
            "ondateclick", "ondrawdate", "ondatechanged", "timeFormat", "ontimechanged", "onvaluechanged"
        ]);
        mini._ParseBool(el, attrs, ["multiSelect", "showHeader", "showFooter", "showWeekNumber", "showDaysHeader",
            "showMonthButtons", "showYearButtons", "showTodayButton", "showClearButton", "showYesterdayButton",
            "showTime", "showOkButton"
        ]);

        return attrs;
    }
});
mini.regClass(mini.Calendar, "calendar");





mini.ListBox = function() {
    mini.ListBox.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.ListBox, mini.ListControl, {
    formField: true,


    columns: null,
    columnWidth: 80,

    showNullItem: false,
    nullItemText: "",

    showEmpty: false,
    emptyText: "",

    showCheckBox: false,
    showAllCheckBox: true,
    multiSelect: false,

    _itemCls: "mini-listbox-item",
    _itemHoverCls: "mini-listbox-item-hover",
    _itemSelectedCls: "mini-listbox-item-selected",

    uiCls: "mini-listbox",
    _create: function() {
        var el = this.el = document.createElement("div");
        this.el.className = "mini-listbox";

        this.el.innerHTML = '<div class="mini-listbox-border"><div class="mini-listbox-header"></div><div class="mini-listbox-view"></div><input type="hidden"/></div><div class="mini-errorIcon"></div>';

        this._borderEl = this.el.firstChild;
        this._headerEl = this._borderEl.firstChild;
        this._viewEl = this._borderEl.childNodes[1];
        this._valueEl = this._borderEl.childNodes[2];

        this._errorIconEl = this.el.lastChild;

        this._scrollViewEl = this._viewEl;


        this._viewEl.innerHTML = '<div class="mini-grid-rows-content"></div>';

        this._contentEl = this._viewEl.firstChild;
    },
    _initEvents: function() {
        mini.ListBox.superclass._initEvents.call(this);
        mini._BindEvents(function() {
            mini_onOne(this._viewEl, "scroll", this.__OnScroll, this);


        }, this);

    },
    destroy: function(removeEl) {
        if (this._viewEl) {
            this._viewEl.onscroll = null;
            mini.clearEvent(this._viewEl);
            this._viewEl = null;
        }
        this._borderEl = this._headerEl = this._viewEl = this._valueEl = this._errorIconEl = this._scrollViewEl = this._contentEl = null;
        mini.ListBox.superclass.destroy.call(this, removeEl);
    },
    setColumns: function(value) {

        if (!mini.isArray(value)) value = [];
        this.columns = value;

        for (var i = 0, l = this.columns.length; i < l; i++) {
            var column = this.columns[i];

            if (column.type) {
                if (!mini.isNull(column.header) && typeof column.header !== "function") {
                    if (column.header.trim() == "") {
                        delete column.header;
                    }
                }
                var col = mini._getColumn(column.type);
                if (col) {
                    var _column = mini.copyTo({}, column);
                    mini.copyTo(column, col);
                    mini.copyTo(column, _column);
                }
            }

            var width = parseInt(column.width);
            if (mini.isNumber(width) && String(width) == column.width) column.width = width + "px";
            if (mini.isNull(column.width)) column.width = this.columnWidth + "px";
        }

        this.doUpdate();
    },
    isVisibleColumn: function($) {
        $ = this.getColumn($);
        if ($.visible == false) return false;
        return true
    },
    getColumn: function(index) {
        var t = typeof index;
        if (t == "number") return this.columns[index];
        else if (t == "object") return index;
        else {
            for (var i = 0, len = this.columns.length; i < len; i++) {
                var column = this.columns[i];
                if (column.name == index) return column
            }
            return null
        }
    },
    hideColumn: function($) {
        $ = this.getColumn($);
        if (!$) return;
        $.visible = false;
        this.doUpdate()
    },
    showColumn: function($) {
        $ = this.getColumn($);
        if (!$) return;
        $.visible = true;
        this.doUpdate()
    },
    getColumns: function() {
        return this.columns;
    },
    doUpdate: function() {
        if (this._allowUpdate === false) return;
        var hasColumns = this.columns && this.columns.length > 0;
        if (hasColumns) {
            mini.addClass(this.el, "mini-listbox-showColumns");
        } else {
            mini.removeClass(this.el, "mini-listbox-showColumns");
        }
        this._headerEl.style.display = hasColumns ? "" : "none";

        var sb = [];
        if (hasColumns) {
            sb[sb.length] = '<table class="mini-listbox-headerInner" cellspacing="0" cellpadding="0"><tr>';
            var ckAllId = this.uid + "$ck$all";
            sb[sb.length] = '<td class="mini-listbox-checkbox"><input type="checkbox" id="' + ckAllId + '"></td>';
            for (var j = 0, k = this.columns.length; j < k; j++) {
                var column = this.columns[j];
                var header = column.header;
                if (mini.isNull(header)) header = '&nbsp;';

                var w = column.width;
                if (mini.isNumber(w)) w = w + "px";

                sb[sb.length] = '<td class="';
                if (column.headerCls) sb[sb.length] = column.headerCls;
                sb[sb.length] = '" style="';
                if (column.headerStyle) sb[sb.length] = column.headerStyle + ";";
                if (w) {
                    sb[sb.length] = 'width:' + w + ';';
                }
                if (column.headerAlign) {
                    sb[sb.length] = 'text-align:' + column.headerAlign + ';';
                }
                sb[sb.length] = '">';
                sb[sb.length] = header;
                sb[sb.length] = '</td>';
            }
            sb[sb.length] = '</tr></table>';
        }
        this._headerEl.innerHTML = sb.join('');

        var sb = [];
        var data = this.data;

        sb[sb.length] = '<table class="mini-listbox-items" cellspacing="0" cellpadding="0">';

        if (this.showEmpty && data.length == 0) {

            sb[sb.length] = '<tr><td colspan="20">' + this.emptyText + '</td></tr>';
        } else {
            this._doNullItem();

            for (var i = 0, l = data.length; i < l; i++) {
                var item = data[i];

                var rowClsIndex = -1;
                var rowCls = " ";
                var rowStyleIndex = -1;
                var rowStyle = " ";

                sb[sb.length] = '<tr id="';
                sb[sb.length] = this._createItemId(i);
                sb[sb.length] = '" index="';
                sb[sb.length] = i;
                sb[sb.length] = '" class="mini-listbox-item ';

                if (item.enabled === false) {
                    sb[sb.length] = ' mini-disabled ';
                }

                rowClsIndex = sb.length;
                sb[sb.length] = rowCls;
                sb[sb.length] = '" style="';
                rowStyleIndex = sb.length;
                sb[sb.length] = rowStyle;
                sb[sb.length] = '">';

                var ckid = this._createCheckId(i);
                var ckName = this.name;
                var ckValue = this.getItemValue(item);

                var disable = '';
                if (item.enabled === false) {
                    disable = 'disabled';
                }


                if (item.__NullItem === true) {
                    sb[sb.length] = '<td class="mini-listbox-checkbox"></td>';
                } else {
                    sb[sb.length] = '<td class="mini-listbox-checkbox"><input ' + disable + ' id="' + ckid + '" type="checkbox" ></td>';
                }




                if (hasColumns) {
                    for (var j = 0, k = this.columns.length; j < k; j++) {
                        var column = this.columns[j];

                        var e = this._OnDrawCell(item, i, column);

                        var w = column.width;
                        if (typeof w == "number") w = w + "px";

                        sb[sb.length] = '<td class="';
                        if (e.cellCls) sb[sb.length] = e.cellCls;
                        sb[sb.length] = '" style="';
                        if (e.cellStyle) sb[sb.length] = e.cellStyle + ";";
                        if (w) {
                            sb[sb.length] = 'width:' + w + ';';
                        }
                        if (column.align) {
                            sb[sb.length] = 'text-align:' + column.align + ';';
                        }
                        sb[sb.length] = '">';
                        sb[sb.length] = e.cellHtml;
                        sb[sb.length] = '</td>';

                        if (e.rowCls) rowCls = e.rowCls;
                        if (e.rowStyle) rowStyle = e.rowStyle;
                    }
                } else {
                    var e = this._OnDrawCell(item, i, null);
                    sb[sb.length] = '<td class="';
                    if (e.cellCls) sb[sb.length] = e.cellCls;
                    sb[sb.length] = '" style="';
                    if (e.cellStyle) sb[sb.length] = e.cellStyle;
                    sb[sb.length] = '">';
                    sb[sb.length] = e.cellHtml;
                    sb[sb.length] = '</td>';

                    if (e.rowCls) rowCls = e.rowCls;
                    if (e.rowStyle) rowStyle = e.rowStyle;
                }

                sb[rowClsIndex] = rowCls;
                sb[rowStyleIndex] = rowStyle;

                sb[sb.length] = '</tr>';
            }
        }
        sb[sb.length] = '</table>';


        var innerHTML = sb.join("");

        this._viewEl.firstChild.innerHTML = innerHTML;

        this._doSelects();

        this.doLayout();
    },
    doLayout: function(isValid) {

        if (!this.canLayout()) return;

        if (this.columns && this.columns.length > 0) {
            mini.addClass(this.el, "mini-listbox-showcolumns");
        } else {
            mini.removeClass(this.el, "mini-listbox-showcolumns");
        }
        if (this.showCheckBox) {
            mini.removeClass(this.el, "mini-listbox-hideCheckBox");
        } else {
            mini.addClass(this.el, "mini-listbox-hideCheckBox");
        }

        var ckAllId = this.uid + "$ck$all";
        var ck = document.getElementById(ckAllId);
        if (ck) ck.style.display = this.showAllCheckBox ? "" : "none";

        var viewEl = this._viewEl;
        var autoHeight = this.isAutoHeight();

        if (autoHeight) viewEl.style.height = "auto";

        var h = this.getHeight(true);

        var w = mini.getWidth(this._borderEl, true);
        var elWidth = w;




        if (!mini.isIE6) viewEl.style.width = w + "px";





        var h2 = mini.getHeight(this._headerEl);
        h = h - h2;
        viewEl.style.height = h + "px";









        if (isIE) {
            var table1 = this._headerEl.firstChild,
                table2 = this._viewEl.firstChild.firstChild;
            if (this._viewEl.offsetHeight >= this._viewEl.scrollHeight) {
                table2.style.width = "100%";
                if (table1) table1.style.width = "100%";
            } else {

                var w = parseInt(table2.parentNode.offsetWidth) + 'px'

                if (table1) table1.style.width = w;
            }
        }
        if (this._viewEl.offsetHeight < this._viewEl.scrollHeight) {





            var scrollBarWidth = jQuery(this._viewEl).width() - jQuery(this._contentEl).width();
            this._headerEl.style.width = (elWidth - scrollBarWidth) + "px";

        } else {
            this._headerEl.style.width = "100%";
        }





    },
    setShowCheckBox: function(value) {
        this.showCheckBox = value;
        this.doLayout();
    },
    getShowCheckBox: function() {
        return this.showCheckBox;
    },
    setShowAllCheckBox: function(value) {
        this.showAllCheckBox = value;
        this.doLayout();
    },
    getShowAllCheckBox: function() {
        return this.showAllCheckBox;
    },
    setShowNullItem: function(value) {
        if (this.showNullItem != value) {
            this.showNullItem = value;

            this._doNullItem();

            this.doUpdate();
        }
    },
    getShowNullItem: function() {
        return this.showNullItem;
    },
    setNullItemText: function(value) {

        if (this.nullItemText != value) {
            this.nullItemText = value;

            this._doNullItem();

            this.doUpdate();
        }
    },
    getNullItemText: function() {
        return this.nullItemText;
    },

    _doNullItem: function() {
        for (var i = 0, l = this.data.length; i < l; i++) {
            var item = this.data[i];
            if (item.__NullItem) {
                this.data.removeAt(i);
                break;
            }
        }
        if (this.showNullItem) {
            var item = {
                __NullItem: true
            };
            item[this.textField] = "";
            item[this.valueField] = "";
            this.data.insert(0, item);
        }
    },









    _OnDrawCell: function(record, index, column) {
        var value = column ? mini._getMap(column.field, record) : this.getItemText(record);
        var e = {
            sender: this,
            index: index,
            rowIndex: index,
            record: record,
            item: record,
            column: column,
            field: column ? column.field : null,
            value: value,
            cellHtml: value,
            rowCls: null,
            cellCls: column ? (column.cellCls || '') : "",
            rowStyle: null,
            cellStyle: column ? (column.cellStyle || '') : ""
        };

        var hasColumns = this.columns && this.columns.length > 0;
        if (!hasColumns) {
            if (index == 0 && this.showNullItem) {
                e.cellHtml = this.nullItemText;
            }
        }
        if (e.autoEscape == true) {
            e.cellHtml = mini.htmlEncode(e.cellHtml);
        }

        if (column) {
            if (column.dateFormat) {
                if (mini.isDate(e.value)) e.cellHtml = mini.formatDate(value, column.dateFormat);
                else e.cellHtml = value;
            }
            var renderer = column.renderer;
            if (renderer) {
                fn = typeof renderer == "function" ? renderer : window[renderer];
                if (fn) {
                    e.cellHtml = fn.call(column, e);
                }
            }
        }

        this.fire("drawcell", e);

        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        return e;
    },
    __OnScroll: function(e) {
        this._headerEl.scrollLeft = this._viewEl.scrollLeft;
    },
    __OnClick: function(e) {

        var ckAllId = this.uid + "$ck$all";
        if (e.target.id == ckAllId) {
            var ck = document.getElementById(ckAllId);
            if (ck) {
                var checked = ck.checked;

                var value = this.getValue();;

                if (checked) {
                    this.selectAll();
                } else {
                    this.deselectAll();
                }
                this._OnSelectionChanged();

                if (value != this.getValue()) {
                    this._OnValueChanged();

                    this.fire("itemclick", {
                        htmlEvent: e
                    });
                }
            }
            return;
        }

        this._fireEvent(e, 'Click');
    },
    setValue: function($) {
        mini.ListBox.superclass.setValue.call(this, $);
        this._doCheckState()
    },
    _doCheckState: function() {
        var $ = this.uid + "$ck$all",
            _ = jQuery(document.getElementById($));
        if (this._isSelectedAll() && this.getSelecteds().length != 0) _.prop("checked", true);
        else _.prop("checked", false)
    },
    _OnValueChanged: function($) {
        mini.ListBox.superclass._OnValueChanged.call(this);
        this._doCheckState()
    },
    getAttrs: function(el) {
        var attrs = mini.ListBox.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["nullItemText", "ondrawcell"]);
        mini._ParseBool(el, attrs, ["showCheckBox", "showAllCheckBox", "showNullItem"]);

        if (el.nodeName.toLowerCase() != "select") {
            var cs = mini.getChildNodes(el);
            for (var i = 0, l = cs.length; i < l; i++) {
                var node = cs[i];
                var property = jQuery(node).attr("property");
                if (!property) continue;
                property = property.toLowerCase();
                if (property == "columns") {
                    attrs.columns = mini._ParseColumns(node);
                } else if (property == "data") {
                    attrs.data = node.innerHTML;
                }
            }
        }

        return attrs;
    }
});
mini.regClass(mini.ListBox, "listbox");


mini.CheckBoxList = function() {
    mini.CheckBoxList.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.CheckBoxList, mini.ListControl, {
    formField: true,
    _labelFieldCls: 'mini-labelfield-checkboxlist',

    multiSelect: true,
    repeatItems: 0,
    repeatLayout: "none",
    repeatDirection: "horizontal",

    _itemCls: "mini-checkboxlist-item",
    _itemHoverCls: "mini-checkboxlist-item-hover",
    _itemSelectedCls: "mini-checkboxlist-item-selected",

    _tableCls: "mini-checkboxlist-table",
    _tdCls: "mini-checkboxlist-td",
    _checkType: "checkbox",

    uiCls: "mini-checkboxlist",
    _create: function() {
        var el = this.el = document.createElement("div");
        this.el.className = this.uiCls;

        this.el.innerHTML = '<table cellpadding="0" border="0" cellspacing="0" style="display:table;"><tr><td><div class="mini-list-inner"></div><div class="mini-errorIcon"></div><input type="hidden" /></td></tr></table>';

        this.cellEl = el.getElementsByTagName("td")[0];
        this._innerEl = this.cellEl.firstChild;
        this._valueEl = this.cellEl.lastChild;
        this._errorIconEl = this.cellEl.childNodes[1];

        this._borderEl = this.el.firstChild;
        var A = this;
        mini_on(this.el, "keyup", function(e) {
            if (e.keyCode == 32) $(e.target).click()
        })
    },
    _getRepeatTable: function() {
        var table = [];
        if (this.repeatItems > 0) {
            if (this.repeatDirection == "horizontal") {
                var row = [];
                for (var i = 0, l = this.data.length; i < l; i++) {
                    var item = this.data[i];
                    if (row.length == this.repeatItems) {
                        table.push(row);
                        row = [];
                    }
                    row.push(item);
                }
                table.push(row);
            } else {
                var len = this.repeatItems > this.data.length ? this.data.length : this.repeatItems;
                for (var i = 0, l = len; i < l; i++) {
                    table.push([]);
                }
                for (var i = 0, l = this.data.length; i < l; i++) {
                    var item = this.data[i];
                    var index = i % this.repeatItems;
                    table[index].push(item);
                }
            }
        } else {
            table = [this.data.clone()];
        }
        return table;
    },
    doUpdate: function() {
        var data = this.data;
        var s = "";

        for (var i = 0, l = data.length; i < l; i++) {
            var item = data[i];
            item._i = i;
        }

        if (this.repeatLayout == "flow") {

            var table = this._getRepeatTable();
            for (var i = 0, l = table.length; i < l; i++) {
                var row = table[i];
                for (var j = 0, k = row.length; j < k; j++) {
                    var item = row[j];
                    s += this._createItemHtml(item, item._i);
                }
                if (i != l - 1) {
                    s += '<br/>';
                }
            }


        } else if (this.repeatLayout == "table") {
            var table = this._getRepeatTable();
            s += '<table class="' + this._tableCls + '" cellpadding="0" cellspacing="1">';
            for (var i = 0, l = table.length; i < l; i++) {
                var row = table[i];
                s += '<tr>';
                for (var j = 0, k = row.length; j < k; j++) {
                    var item = row[j];
                    s += '<td class="' + this._tdCls + '">';
                    s += this._createItemHtml(item, item._i);
                    s += '</td>';
                }
                s += '</tr>';
            }
            s += '</table>';
        } else {
            for (var i = 0, l = data.length; i < l; i++) {
                var item = data[i];
                s += this._createItemHtml(item, i);
            }
        }
        this._innerEl.innerHTML = s;

        for (var i = 0, l = data.length; i < l; i++) {
            var item = data[i];
            delete item._i;
        }
    },
    _createItemHtml: function(item, index) {
        var e = this._OnDrawItem(item, index);
        var id = this._createItemId(index);
        var ckId = this._createCheckId(index);
        var ckValue = this.getItemValue(item);

        var disable = '';

        var s = '<div id="' + id + '" index="' + index + '" class="' + this._itemCls + ' ';
        if (item.enabled === false) {
            s += ' mini-disabled ';
            disable = 'disabled';
        }

        var onclick = 'onclick="return false"';

        onclick = 'onmousedown="this._checked = this.checked;" onclick="this.checked = this._checked"';


        s += e.itemCls + '" style="' + e.itemStyle + '"><span class="mini-list-icon"></span><input style="display:none;" ' + onclick + ' ' + disable + ' value="' + ckValue + '" id="' + ckId + '" type="' + this._checkType + '" /><label for="' + ckId + '" onclick="return false;">';
        s += e.itemHtml + '</label></div>';
        return s;
    },
    _OnDrawItem: function(item, index) {
        var value = this.getItemText(item);
        var e = {
            index: index,
            item: item,
            itemHtml: value,
            itemCls: "",
            itemStyle: ""
        };
        this.fire("drawitem", e);

        if (e.itemHtml === null || e.itemHtml === undefined) e.itemHtml = "";

        return e;
    },

    setRepeatItems: function(value) {
        value = parseInt(value);
        if (isNaN(value)) value = 0;
        if (this.repeatItems != value) {
            this.repeatItems = value;
            this.doUpdate();
        }
    },
    getRepeatItems: function() {
        return this.repeatItems;
    },
    setRepeatLayout: function(value) {
        if (value != "flow" && value != "table") value = "none";
        if (this.repeatLayout != value) {
            this.repeatLayout = value;
            this.doUpdate();
        }
    },
    getRepeatLayout: function() {
        return this.repeatLayout;
    },
    setRepeatDirection: function(value) {
        if (value != "vertical") value = "horizontal";
        if (this.repeatDirection != value) {
            this.repeatDirection = value;
            this.doUpdate();
        }
    },
    getRepeatDirection: function() {
        return this.repeatDirection;
    },

    getAttrs: function(el) {
        var attrs = mini.CheckBoxList.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs, [
            "ondrawitem"
        ]);

        var repeatItems = parseInt(jq.attr("repeatItems"));
        if (!isNaN(repeatItems)) {
            attrs.repeatItems = repeatItems;
        }
        var repeatLayout = jq.attr("repeatLayout");
        if (repeatLayout) {
            attrs.repeatLayout = repeatLayout;
        }
        var repeatDirection = jq.attr("repeatDirection");
        if (repeatDirection) {
            attrs.repeatDirection = repeatDirection;
        }
        return attrs;
    }
});
mini.regClass(mini.CheckBoxList, "checkboxlist");


mini.RadioButtonList = function() {
    mini.RadioButtonList.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.RadioButtonList, mini.CheckBoxList, {
    multiSelect: false,

    _itemCls: "mini-radiobuttonlist-item",
    _itemHoverCls: "mini-radiobuttonlist-item-hover",
    _itemSelectedCls: "mini-radiobuttonlist-item-selected",

    _tableCls: "mini-radiobuttonlist-table",
    _tdCls: "mini-radiobuttonlist-td",
    _checkType: "radio",

    uiCls: "mini-radiobuttonlist"
});
mini.regClass(mini.RadioButtonList, "radiobuttonlist");


mini.TreeSelect = function() {
    this.data = [];
    mini.TreeSelect.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.TreeSelect, mini.PopupEdit, {
    valueFromSelect: false,

    text: '',
    value: '',

    autoCheckParent: false,
    expandOnLoad: false,

    valueField: "id",
    textField: "text",
    nodesField: "children",
    dataField: "",
    delimiter: ',',

    multiSelect: false,
    data: [],
    url: "",

    allowInput: false,

    showTreeIcon: false,
    showTreeLines: true,

    resultAsTree: false,
    parentField: "pid",
    checkRecursive: false,

    showFolderCheckBox: false,
    showRadioButton: false,

    popupHeight: 200,
    popupWidth: "100%",
    popupMaxHeight: 250,
    popupMinWidth: 100,
    setAjaxData: function($) {
        this.ajaxData = $;
        this.tree.setAjaxData($)
    },
    setAjaxType: function($) {
        this.ajaxType = $;
        this.tree.setAjaxType($)
    },
    setAjaxOptions: function($) {
        this.ajaxOptions = $;
        this.tree.setAjaxOptions($)
    },
    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var text = kv.text;
        delete kv.text;
        var url = kv.url;
        delete kv.url;
        var data = kv.data;
        delete kv.data;

        mini.TreeSelect.superclass.set.call(this, kv);

        if (!mini.isNull(data)) {
            this.setData(data);
        }
        if (!mini.isNull(url)) {
            this.setUrl(url);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }
        if (!mini.isNull(text)) {
            this.setText(text);
        }
        return this;
    },

    uiCls: "mini-treeselect",
    _createPopup: function() {
        mini.TreeSelect.superclass._createPopup.call(this);

        this.tree = new mini.Tree();
        this.tree.setShowTreeIcon(true);
        this.tree.setStyle("border:0;width:100%;height:100%;overflow:hidden;");
        this.tree.setResultAsTree(this.resultAsTree);
        this.tree.render(this.popup._contentEl);
        this.tree.setCheckRecursive(this.checkRecursive);
        this.tree.setShowFolderCheckBox(this.showFolderCheckBox);
        this.tree.setShowRadioButton(this.showRadioButton);
        this.tree.setExpandOnNodeClick(this.expandOnNodeClick);
        this.tree.checkOnTextClick = this.checkOnTextClick;
        if (!mini.isNull(this.defaultRowHeight)) this.tree.defaultRowHeight = this.defaultRowHeight;


        this.tree.on("nodeclick", this.__OnNodeClick, this);
        this.tree.on("nodecheck", this.__OnCheckedChanged, this);
        this.tree.on("expand", this.__OnTreeExpand, this);
        this.tree.on("collapse", this.__OnTreeCollapse, this);
        this.tree.on("beforenodecheck", this.__OnTreeBeforeNodeCheck, this);
        this.tree.on("beforenodeselect", this.__OnTreeBeforeNodeSelect, this);
        this.tree.on("drawnode", this.__OnDrawNode, this);
        this.tree.useAnimation = false;




        var me = this;
        this.tree.on("beforeload", function(e) {
            me.fire("beforeload", e);
        }, this);
        this.tree.on("load", function(e) {
            me.fire("load", e);
        }, this);
        this.tree.on("loaderror", function(e) {
            me.fire("loaderror", e);
        }, this);
    },
    __OnDrawNode: function(e) {
        this.fire("drawnode", e);
    },
    __OnTreeBeforeNodeCheck: function(e) {
        e.tree = e.sender;
        this.fire("beforenodecheck", e);
    },
    __OnTreeBeforeNodeSelect: function(e) {

        e.tree = e.sender;
        this.fire("beforenodeselect", e);
        if (e.cancel) {
            this._nohide = true;
        }
    },
    __OnTreeExpand: function(e) {

    },
    __OnTreeCollapse: function(e) {

    },
    findItems: function(value) {
        return this.tree.findNodes(this.tree.getIdField(), value);
    },



    findNodes: function(value) {
        return this.tree.getNodesByValue(value);
    },
    getSelectedNode: function() {


        return this.getSelectedNodes()[0];
    },


    getCheckedNodes: function(hasParent) {




        var nodes = this.tree.getNodesByValue(this.value);

        if (hasParent === false) hasParent = 'leaf';
        nodes = this.tree._dataSource.doGetCheckedNodes(nodes, hasParent);

        return nodes;

    },
    getSelectedNodes: function() {

        return this.tree.getNodesByValue(this.value);
    },
    getParentNode: function(node) {
        return this.tree.getParentNode(node);
    },
    getChildNodes: function(node) {
        return this.tree.getChildNodes(node);
    },









    showPopup: function() {







        var ex = {
            cancel: false
        };
        this.fire("beforeshowpopup", ex);
        this._firebeforeshowpopup = false;
        if (ex.cancel == true) return;


        var h = this.popup.el.style.height;






        mini.TreeSelect.superclass.showPopup.call(this);

        this.tree.setValue(this.value, false);

        if (this.expandOnPopup) {
            this.tree.expandPath(this.value);
        }

        this._nohide = false;
    },
    expandOnPopup: false,
    setExpandOnPopup: function(value) {
        this.expandOnPopup = value;
    },
    getExpandOnPopup: function() {
        return this.expandOnPopup;
    },





    __OnPopupHide: function(e) {
        if (this._textChanged) {
            this._textChanged = false;
            this.__OnInputTextChanged()
        }
        this.__doFocusCls();
        this.tree.clearFilter();
        this.fire("hidepopup");
    },
    getItem: function(item) {
        return typeof item == "object" ? item : this.data[item];
    },
    indexOf: function(item) {
        return this.data.indexOf(item);
    },
    getAt: function(index) {
        return this.data[index];
    },
    loadList: function(list, idField, parentField) {
        this.tree.loadList(list, idField, parentField);
        this.data = this.tree.getData();
        this._getCheckedValue();
    },
    getList: function() {
        return this.tree.getList();
    },
    load: function(data) {
        this.tree.load(data);
        this.data = this.tree.data;
        this._getCheckedValue();
    },
    _eval: function(_) {
        return eval('(' + _ + ')');
    },
    setData: function(data) {
        if (typeof data == "string") {
            data = this._eval(data);
        }
        if (!mini.isArray(data)) data = [];
        this.tree.setData(data);
        this.data = this.tree.data;
        this._getCheckedValue();
    },
    getData: function() {
        return this.data;
    },
    _getCheckedValue: function() {
        var value = this.tree.getValue();
        this.setValue(value);
    },
    setUrl: function(url) {
        this.getPopup();






        this.tree.setUrl(url);
        this.url = this.tree.url;
        this.data = this.tree.data;
        this._getCheckedValue();
    },

    getUrl: function() {
        return this.url;
    },
    virtualScroll: false,
    setVirtualScroll: function(value) {
        if (this.tree) this.tree.setVirtualScroll(value);
        this.virtualScroll = value;
    },
    getVirtualScroll: function() {
        return this.virtualScroll;
    },

    defaultRowHeight: 23,
    setDefaultRowHeight: function(value) {
        if (this.tree) this.tree.defaultRowHeight = value;
        this.defaultRowHeight = value;
    },
    getDefaultRowHeight: function() {
        return this.defaultRowHeight;
    },

    pinyinField: "tag",
    setPinyinField: function(value) {

        this.pinyinField = value;
    },
    getPinyinField: function() {
        return this.pinyinField;
    },

    setTextField: function(value) {
        if (this.tree) this.tree.setTextField(value);
        this.textField = value;
    },
    getTextField: function() {
        return this.textField;
    },
    setNodesField: function(value) {
        if (this.tree) this.tree.setNodesField(value);
        this.nodesField = value;
    },
    getNodesField: function() {
        return this.nodesField;
    },
    setDataField: function(value) {
        if (this.tree) this.tree.setDataField(value);
        this.dataField = value;
    },
    getDataField: function() {
        return this.dataField;
    },

    getValue: function() {
        var value = mini.TreeSelect.superclass.getValue.call(this);
        //if (this.valueFromSelect && value && this.findItems(value).length == 0) {
        //    return "";
        //}
        return value;
    },
    setValue: function(value) {


        var vts = this.tree.getValueAndText(value);
        if (vts[1] == "" && !this.valueFromSelect) {
            vts[0] = value;
            vts[1] = value;
        }
        this.value = value;

        this._valueEl.value = value;

        this.text = this._textEl.value = vts[1];


        this._doEmpty();


    },
    setMultiSelect: function(value) {
        if (this.multiSelect != value) {
            this.multiSelect = value;
            this.tree.setShowCheckBox(value);
            this.tree.setAllowSelect(!value);
            this.tree.setEnableHotTrack(!value);
        }
    },
    getMultiSelect: function() {
        return this.multiSelect;
    },
    __OnNodeClick: function(e) {

        if (this.multiSelect) return;

        var node = this.tree.getSelectedNode();
        var vts = this.tree.getValueAndText(node);
        var v = vts[0];

        var value = this.getValue();
        this.setValue(v);
        if (value != this.getValue()) {
            this._OnValueChanged();
        }

        if (this._nohide !== true) {
            this.hidePopup();
            this.focus();
        }
        this._nohide = false;
        this.fire("nodeclick", {
            node: e.node
        });
    },
    __OnCheckedChanged: function(e) {

        if (!this.multiSelect) return;

        var v = this.tree.getValue();

        var value = this.getValue();
        this.setValue(v);
        if (value != this.getValue()) {
            this._OnValueChanged();
        }
        this.focus();
    },


    __OnInputKeyDown: function(e) {
        var ex = {
            htmlEvent: e
        };
        this.fire("keydown", ex);
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }

        if (e.keyCode == 9) {
            if (this.isShowPopup()) {
                this.hidePopup();
            }
            return;
        }

        if (this.isReadOnly()) return;

        switch (e.keyCode) {
            case 27:
                if (this.isShowPopup()) {
                    e.stopPropagation();
                }

                this.hidePopup();
                break;
            case 13:
                var me = this;
                setTimeout(function() {
                    me.fire("enter", ex);
                }, 10);
                break;
            case 37:
                break;
            case 38:
                e.preventDefault();
                break;
            case 39:
                break;
            case 40:
                e.preventDefault();
                this.showPopup();
                break;
            default:
                if (this.allowInput == false) {} else {
                    var me = this;
                    setTimeout(function() {
                        me._doQuery();
                    }, 10);
                }
                break;
        }
    },
    _doQuery: function() {
        if (!this.autoFilter) return;
        if (this.multiSelect) return;
        var field = this.textField,
            pinyinField = this.pinyinField;
        var value = this._textEl.value.toLowerCase();
        this.tree.filter(function(node) {
            var text = String(node[field] ? node[field] : "").toLowerCase();
            var pinyin = String(node[pinyinField] ? node[pinyinField] : "").toLowerCase();

            if (text.indexOf(value) != -1 || pinyin.indexOf(value) != -1) {
                return true;
            } else return false;
        });
        this.tree.expandAll();
        this.showPopup();
    },


    setCheckRecursive: function(value) {

        this.checkRecursive = value;
        if (this.tree) this.tree.setCheckRecursive(value);
    },
    getCheckRecursive: function() {
        return this.checkRecursive;
    },
    setResultAsTree: function(value) {
        this.resultAsTree = value;
        if (this.tree) this.tree.setResultAsTree(value);
    },
    getResultAsTree: function() {
        return this.resultAsTree;
    },
    setParentField: function(value) {
        this.parentField = value;
        if (this.tree) this.tree.setParentField(value);
    },
    getParentField: function() {
        return this.parentField;
    },
    setValueField: function(valueField) {

        if (this.tree) this.tree.setIdField(valueField);
        this.valueField = valueField;
    },
    getValueField: function() {
        return this.valueField;
    },
    setShowTreeIcon: function(value) {
        this.showTreeIcon = value;
        if (this.tree) this.tree.setShowTreeIcon(value);
    },
    getShowTreeIcon: function() {
        return this.showTreeIcon;
    },
    setShowTreeLines: function(value) {
        this.showTreeLines = value;
        if (this.tree) this.tree.setShowTreeLines(value);
    },
    getShowTreeLines: function() {
        return this.showTreeLines;
    },
    setShowFolderCheckBox: function(value) {

        this.showFolderCheckBox = value;
        if (this.tree) this.tree.setShowFolderCheckBox(value);
    },
    getShowFolderCheckBox: function() {
        return this.showFolderCheckBox;
    },
    setShowRadioButton: function(value) {

        this.showRadioButton = value;
        if (this.tree) this.tree.setShowRadioButton(value);
    },
    getShowRadioButton: function() {
        return this.showRadioButton;
    },

    setAutoCheckParent: function(value) {

        this.autoCheckParent = value;
        if (this.tree) this.tree.setAutoCheckParent(value);
    },
    getAutoCheckParent: function() {
        return this.autoCheckParent;
    },
    setExpandOnLoad: function(value) {

        this.expandOnLoad = value;
        if (this.tree) this.tree.setExpandOnLoad(value);
    },
    getExpandOnLoad: function() {
        return this.expandOnLoad;
    },
    setValueFromSelect: function(value) {
        this.valueFromSelect = value;
    },
    getValueFromSelect: function() {
        return this.valueFromSelect;
    },
    ajaxAsync: false,
    setAjaxAsync: function(value) {
        this.ajaxAsync = value;
        this.tree.setAjaxAsync(value);
    },
    setAjaxData: function(value) {
        this.ajaxData = value;
        this.tree.setAjaxData(value);
    },
    setAjaxType: function(value) {
        this.ajaxType = value;
        this.tree.setAjaxType(value);
    },

    expandOnNodeClick: false,
    setExpandOnNodeClick: function(value) {
        this.expandOnNodeClick = value;
        if (this.tree) this.tree.setExpandOnNodeClick(value);
    },
    getExpandOnNodeClick: function() {
        return this.expandOnNodeClick;
    },

    autoFilter: true,

    setAutoFilter: function(value) {
        this.autoFilter = value;
    },
    getAutoFilter: function() {
        return this.autoFilter;
    },
    setCheckOnTextClick: function($) {
        if (this.tree) this.tree.checkOnTextClick = $;
        this.checkOnTextClick = $
    },
    getCheckOnTextClick: function() {
        return this.checkOnTextClick
    },
    getAttrs: function(el) {
        var attrs = mini.ComboBox.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["url", "data", "textField", "pinyinField", "valueField", "nodesField", "parentField", "onbeforenodecheck", "onbeforenodeselect",
            "expandOnLoad", "onnodeclick", "onbeforeload", "onload", "onloaderror", "ondrawnode"
        ]);
        mini._ParseBool(el, attrs, ["expandOnNodeClick", "ajaxAsync", "multiSelect", "resultAsTree", "checkRecursive", "showTreeIcon", "showTreeLines",
            "showFolderCheckBox", "showRadioButton",
            "autoCheckParent", "valueFromSelect", "virtualScroll", "expandOnPopup", "autoFilter"
        ]);
        mini._ParseInt(el, attrs, ["defaultRowHeight"]);

        if (attrs.expandOnLoad) {
            var level = parseInt(attrs.expandOnLoad);
            if (mini.isNumber(level)) {
                attrs.expandOnLoad = level;
            } else {
                attrs.expandOnLoad = attrs.expandOnLoad == "true" ? true : false;
            }
        }

        return attrs;
    }
});
mini.regClass(mini.TreeSelect, 'TreeSelect');
jQuery(function() {
    setTimeout(function() {
        try {
            var $ = mini.getActiveElement();
            if ($) {
                var A = jQuery($).closest(".mini-buttonedit,.mini-textbox");
                if (A.length) {
                    var B = mini.get(A[0]);
                    if (B) {
                        B.blur();
                        B.focus()
                    }
                }
            }
        } catch (_) {}
    }, 100)
});


mini.Spinner = function() {
    mini.Spinner.superclass.constructor.apply(this, arguments);
    this.setValue(this.minValue);
}
mini.extend(mini.Spinner, mini.ButtonEdit, {
    value: 0,
    minValue: 0,
    maxValue: 100,
    increment: 1,
    decimalPlaces: -1,
    changeOnMousewheel: true,
    allowLimitValue: true,

    allowLoopValue: false,

    allowNull: false,

    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;

        mini.Spinner.superclass.set.call(this, kv);

        if (!mini.isNull(value)) {
            this.setValue(value);
        }

        return this;
    },

    uiCls: "mini-spinner",
    _getButtonHtml: function() {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" ' +
            'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span name="trigger" class="mini-buttonedit-button mini-buttonedit-trigger" ' + hover + '><span class="mini-buttonedit-up"><span></span></span><span class="mini-buttonedit-down"><span></span></span></span>';
    },

    _initEvents: function() {
        mini.Spinner.superclass._initEvents.call(this);

        mini._BindEvents(function() {




            this.on("buttonmousedown", this.__OnButtonMouseDown, this);
            mini.on(this.el, "mousewheel", this.__OnMousewheel, this);
        }, this);

    },

    _ValueLimit: function() {
        if (this.allowLimitValue == false) return;
        if (mini.isNull(this.value) && this.allowNull) return;
        if (this.minValue > this.maxValue) {
            this.maxValue = this.minValue + 100;
        }
        if (this.value < this.minValue) {
            this.setValue(this.minValue);
        }
        if (this.value > this.maxValue) {
            this.setValue(this.maxValue);
        }
    },
    getFormValue: function() {
        var v = this.value;
        v = parseFloat(v);
        if (this.allowNull && isNaN(v)) return "";
        if (isNaN(v)) v = 0;
        var s = String(v).split(".");
        var s1 = s[0],
            s2 = s[1];
        if (!s2) s2 = "";
        if (this.decimalPlaces > 0) {
            for (var i = s2.length, l = this.decimalPlaces; i < l; i++) {
                s2 += "0";
            }
            s2 = "." + s2;
        } else {
            if (s2) s2 = "." + s2;
        }
        return s1 + s2;
    },

    setValue: function(value) {





        value = mini.parseFloat(value, this.culture, this.format);
        value = parseFloat(value);


        if (isNaN(value) && !this.allowNull) value = this.minValue;
        if (isNaN(value) && this.allowNull) value = null;
        if (value && this.decimalPlaces >= 0) value = parseFloat(value.toFixed(this.decimalPlaces));
        if (this.value != value) {
            this.value = value;
            this._ValueLimit();
            this._valueEl.value = this.value;

            this.text = this._textEl.value = this.getFormatValue();
        } else {
            this.text = this._textEl.value = this.getFormatValue();
        }
    },
    setMaxValue: function(value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        value = parseFloat(value);
        if (this.maxValue != value) {
            this.maxValue = value;
            this._ValueLimit();
        }
    },
    getMaxValue: function(value) {
        return this.maxValue;
    },
    setMinValue: function(value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        value = parseFloat(value);
        if (this.minValue != value) {
            this.minValue = value;
            this._ValueLimit();
        }
    },
    getMinValue: function(value) {
        return this.minValue;
    },
    setIncrement: function(value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        if (this.increment != value) {
            this.increment = value;
        }
    },
    getIncrement: function(value) {
        return this.increment;
    },
    setDecimalPlaces: function(value) {
        value = parseInt(value);
        if (isNaN(value) || value < 0) return;
        this.decimalPlaces = value;
    },
    getDecimalPlaces: function(value) {
        return this.decimalPlaces;
    },
    setChangeOnMousewheel: function(value) {
        this.changeOnMousewheel = value;
    },
    getChangeOnMousewheel: function(value) {
        return this.changeOnMousewheel;
    },
    setAllowLimitValue: function(value) {
        this.allowLimitValue = value;
    },
    getAllowLimitValue: function(value) {
        return this.allowLimitValue;
    },
    setAllowNull: function(value) {
        this.allowNull = value;
    },
    getAllowNull: function(value) {
        return this.allowNull;
    },
    format: "",
    setFormat: function(value) {
        if (typeof value != "string") return;
        if (this.format != value) {
            this.format = value;

            this.setText(this.getFormatValue())
        }
    },
    getFormat: function() {
        return this.format;
    },
    getFormatValue: function() {
        if (mini.isNull(this.value)) return "";
        if (this.format && mini.isNumber(this.value)) return mini.formatNumber(this.value, this.format, this.culture);
        return this.value;
    },
    setAllowLoopValue: function(value) {
        this.allowLoopValue = value;
    },
    getAllowLoopValue: function() {
        return this.allowLoopValue;
    },


    _SpinTimer: null,
    _StartSpin: function(Increment, time, count) {
        this._StopSpin();

        var sf = this;

        function loop(value) {
            if (Increment > 0) {
                if (value > sf.maxValue) sf.setValue(sf.minValue);
            } else {
                if (value < sf.minValue) sf.setValue(sf.maxValue);
            }
        }

        var nx = 1000000;
        var n1 = this.value * nx;
        var n2 = Increment * nx;
        var v = (n1 + n2) / nx;


        this.setValue(v);

        loop(v);




        var sourceCount = count;
        var now = new Date();
        this._SpinTimer = setInterval(function() {

            var v = sf.value + Increment;
            sf.setValue(v);

            loop(v);

            sf._OnValueChanged();

            count--;
            if (count == 0 && time > 50) {
                sf._StartSpin(Increment, time - 100, sourceCount + 3);

            }


            var now2 = new Date();
            if (now2 - now > 500) sf._StopSpin();
            now = now2;
        }, time);
        mini.on(document, "mouseup", this._OnDocumentMouseUp, this);

    },
    _StopSpin: function() {
        clearInterval(this._SpinTimer);
        this._SpinTimer = null;
    },
    __OnButtonMouseDown: function(e) {
        this._DownValue = this.getValue();

        this.__OnInputTextChanged();

        if (e.spinType == "up") {

            this._StartSpin(this.increment, 230, 2);
        } else {
            this._StartSpin(-this.increment, 230, 2);
        }
    },
    __OnInputKeyDown: function(e) {
        mini.Spinner.superclass.__OnInputKeyDown.call(this, e);

        var KEY = mini.Keyboard;

        if (this.isReadOnly()) return;

        switch (e.keyCode) {
            case KEY.Top:
                if (this.keyNavEnabled) {
                    this.setValue(this.value + this.increment);
                    this._OnValueChanged()
                }

                break;
            case KEY.Bottom:
                if (this.keyNavEnabled) {
                    this.setValue(this.value - this.increment);
                    this._OnValueChanged()
                }
                break;
        }
    },

    __OnMousewheel: function(e) {
        if (this.isReadOnly()) return;
        if (this.changeOnMousewheel == false) return;



        var wheelDelta = e.wheelDelta || e.originalEvent.wheelDelta;
        if (mini.isNull(wheelDelta)) wheelDelta = -e.originalEvent.detail * 24;
        var increment = this.increment;
        if (wheelDelta < 0) increment = -increment;


        var nx = 1000000;
        var n1 = this.value * nx;
        var n2 = increment * nx;
        var v = (n1 + n2) / nx;
        this.setValue(v);



        this._OnValueChanged();



        return false;
    },
    _OnDocumentMouseUp: function(e) {
        this._StopSpin();
        mini.un(document, "mouseup", this._OnDocumentMouseUp, this);

        if (this._DownValue != this.getValue()) {
            this._OnValueChanged();
        }
    },
    __OnInputTextChanged: function(e) {
        var _value = this.getValue();


        var value = mini.parseFloat(this._textEl.value, this.culture, this.format);
        this.setValue(value);









        if (_value != this.getValue()) {
            this._OnValueChanged();
        }
    },


    getAttrs: function(el) {
        var attrs = mini.Spinner.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["minValue", "maxValue", "increment", "decimalPlaces", "format"]);
        mini._ParseBool(el, attrs, ["allowLimitValue", "allowNull", "changeOnMousewheel", "allowLoopValue"]);


        return attrs;
    }

});
mini.regClass(mini.Spinner, 'spinner');




mini.TimeSpinner = function() {
    mini.TimeSpinner.superclass.constructor.apply(this, arguments);

    this.setValue("00:00:00");
}
mini.extend(mini.TimeSpinner, mini.ButtonEdit, {

    value: null,
    format: 'H:mm:ss',

    uiCls: "mini-timespinner",
    _getButtonHtml: function() {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" ' +
            'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '><span class="mini-buttonedit-up"><span></span></span><span class="mini-buttonedit-down"><span></span></span></span>';
    },
    _initEvents: function() {
        mini.TimeSpinner.superclass._initEvents.call(this);

        mini._BindEvents(function() {
            this.on("buttonmousedown", this.__OnButtonMouseDown, this);
            mini.on(this.el, "mousewheel", this.__OnMousewheel, this);
            mini.on(this._textEl, "keydown", this.__OnKeyDown, this);
        }, this);

    },
    setFormat: function(value) {
        if (typeof value != "string") return;
        var formats = ['H:mm:ss', 'HH:mm:ss', 'H:mm', 'HH:mm', 'H', 'HH', 'mm:ss'];


        if (this.format != value) {
            this.format = value;
            this.text = this._textEl.value = this.getFormattedValue();
        }
    },
    getFormat: function() {
        return this.format;
    },
    setValue: function(value) {


        value = mini.parseTime(value, this.format);
        if (!value) value = null;

        if (mini.isDate(value)) value = new Date(value.getTime());


        this.value = value;
        this.text = this._textEl.value = this.getFormattedValue();
        this._valueEl.value = this.getFormValue();

    },
    getValue: function() {
        return this.value == null ? null : new Date(this.value.getTime());
    },
    getFormValue: function() {
        if (!this.value) return "";
        return mini.formatDate(this.value, this.format);
    },
    getFormattedValue: function() {
        if (!this.value) return "";
        return mini.formatDate(this.value, this.format);
    },
    _ChangeValue: function(Increment, timeType) {
        var value = this.getValue();
        if (value) {
            switch (timeType) {
                case "hours":
                    var hours = value.getHours() + Increment;
                    if (hours > 23) hours = 23;
                    if (hours < 0) hours = 0;
                    value.setHours(hours);
                    break;
                case "minutes":
                    var minutes = value.getMinutes() + Increment;
                    if (minutes > 59) minutes = 59;
                    if (minutes < 0) minutes = 0;
                    value.setMinutes(minutes);
                    break;
                case "seconds":
                    var seconds = value.getSeconds() + Increment;
                    if (seconds > 59) seconds = 59;
                    if (seconds < 0) seconds = 0;
                    value.setSeconds(seconds);
                    break;
            }
        } else {
            value = "00:00:00";
        }

        this.setValue(value);

    },

    _SpinTimer: null,
    _StartSpin: function(Increment, time, count) {
        this._StopSpin();

        this._ChangeValue(Increment, this._timeType);



        var sf = this;
        var sourceCount = count;
        var now = new Date();
        this._SpinTimer = setInterval(function() {

            sf._ChangeValue(Increment, sf._timeType);

            count--;
            if (count == 0 && time > 50) {
                sf._StartSpin(Increment, time - 100, sourceCount + 3);

            }


            var now2 = new Date();
            if (now2 - now > 500) sf._StopSpin();
            now = now2;
        }, time);
        mini.on(document, "mouseup", this._OnDocumentMouseUp, this);

    },
    _StopSpin: function() {
        clearInterval(this._SpinTimer);
        this._SpinTimer = null;

    },
    __OnButtonMouseDown: function(e) {
        this._DownValue = this.getFormValue();
        this._timeType = "hours";
        if (e.spinType == "up") {
            this._StartSpin(1, 230, 2);
        } else {
            this._StartSpin(-1, 230, 2);
        }
    },









    _OnDocumentMouseUp: function(e) {
        this._StopSpin();
        mini.un(document, "mouseup", this._OnDocumentMouseUp, this);

        if (this._DownValue != this.getFormValue()) {
            this._OnValueChanged();
        }
    },
    __OnInputTextChanged: function(e) {

        var _value = this.getFormValue();

        this.setValue(this._textEl.value);

        if (_value != this.getFormValue()) {
            this._OnValueChanged();
        }
    },

    getAttrs: function(el) {
        var attrs = mini.TimeSpinner.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["format"]);

        return attrs;
    }

});
mini.regClass(mini.TimeSpinner, 'timespinner');


mini.HtmlFile = function() {
    mini.HtmlFile.superclass.constructor.apply(this, arguments);
    this.on("validation", this.__OnValidation, this);
}
mini.extend(mini.HtmlFile, mini.ButtonEdit, {

    buttonText: "\u6d4f\u89c8...",
    _buttonWidth: 56,

    limitType: "",


    limitTypeErrorText: "上传文件格式为：",

    allowInput: false,
    readOnly: true,
    _cellSpacing: 0,

    uiCls: "mini-htmlfile",
    _create: function() {
        mini.HtmlFile.superclass._create.call(this);

        this._fileEl = mini.append(this.el, '<input type="file" hideFocus class="mini-htmlfile-file" name="' + this.name + '" ContentEditable=false/>');
        mini.on(this._borderEl, "mousemove", this.__OnMouseMove, this);
        mini.on(this._fileEl, "change", this.__OnFileChange, this);
    },
    refreshFileEl: function() {
        this._fileEl = mini.findChild(this.el, 'mini-htmlfile-file');
    },
    destroy: function(removeEl) {

        if (!this.destroyed) {
            mini.clearEvent(this._borderEl);
            mini.clearEvent(this._fileEl);
        }
        mini.HtmlFile.superclass.destroy.call(this, removeEl);
    },
    _getButtonHtml: function() {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" ' +
            'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '>' + this.buttonText + '</span>';
    },
    __OnFileChange: function(e) {

        this.value = this._textEl.value = this._fileEl.value;
        this._OnValueChanged();

        e = {
            htmlEvent: e
        };
        this.fire("fileselect", e);
    },
    __OnMouseMove: function(e) {

        var x = e.pageX,
            y = e.pageY;
        var box = mini.getBox(this.el);

        x = (x - box.x - 10);
        y = (y - box.y - 10);

        if (this.enabled == false) {

            x = -40;
            y = -40;
        }
        this._fileEl.style.display = "";
        this._fileEl.style.left = x + 'px';
        this._fileEl.style.top = y + 'px';
    },
    __OnValidation: function(e) {
        if (!this.limitType) return;
        if (e.isValid == false) return;
        if (this.required == false && e.value == "") return;


        var vs = e.value.split(".");
        var fileType = ("*." + vs[vs.length - 1]).toLowerCase();
        var types = this.limitType.split(";");

        if (types.length > 0 && types.indexOf(fileType) == -1) {
            e.errorText = this.limitTypeErrorText + this.limitType;
            e.isValid = false;
        }
    },
    setName: function(value) {
        this.name = value;
        mini.setAttr(this._fileEl, "name", this.name);
    },
    getValue: function() {
        return this._textEl.value;
    },

    clear: function() {
        var file = this._fileEl;
        var form = document.createElement('form');
        form.style.position = "absolute";
        form.style.left = "-1000px";
        form.style.top = "-1000px";
        document.body.appendChild(form);

        var pos = file.previousSibling;
        form.appendChild(file);
        form.reset();
        $(file).insertAfter(pos);
        document.body.removeChild(form);

    },

    setButtonText: function(value) {
        this.buttonText = value;

        var el = mini.byClass('mini-buttonedit-button', this.el);
        if (el) el.innerHTML = value;

    },
    getButtonText: function() {
        return this.buttonText;
    },
    setLimitType: function(value) {
        this.limitType = value;
    },
    getLimitType: function() {
        return this.limitType;
    },

    getAttrs: function(el) {
        var attrs = mini.HtmlFile.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["limitType", "buttonText", "limitTypeErrorText", "onfileselect"]);

        return attrs;
    }
});
mini.regClass(mini.HtmlFile, "htmlfile");







mini.getCalculatedOffset = function(placement, pos, actualWidth, actualHeight) {
    if (placement == 'bottom') return {
        top: pos.top + pos.height,
        left: pos.left + pos.width / 2 - actualWidth / 2
    };
    if (placement == 'top') return {
        top: pos.top - actualHeight,
        left: pos.left + pos.width / 2 - actualWidth / 2
    };
    if (placement == 'left') return {
        top: pos.top + pos.height / 2 - actualHeight / 2,
        left: pos.left - actualWidth
    };

    if (placement == 'bottomleft') return {
        top: pos.top + pos.height,
        left: pos.left
    };
    if (placement == 'bottomright') return {
        top: pos.top + pos.height,
        left: pos.left + pos.width - actualWidth
    };
    if (placement == 'topleft') return {
        top: pos.top - actualHeight,
        left: pos.left
    };
    if (placement == 'topright') return {
        top: pos.top - actualHeight,
        left: pos.left + pos.width - actualWidth
    };

    return {
        top: pos.top + pos.height / 2 - actualHeight / 2,
        left: pos.left + pos.width
    };
}



mini.FileUpload = function(config) {
    this.postParam = {};
    mini.FileUpload.superclass.constructor.call(this, config);
    this.on("validation", this.__OnValidation, this);
}

mini.extend(mini.FileUpload, mini.ButtonEdit, {

    buttonText: "\u6d4f\u89c8...",
    _buttonWidth: 56,

    limitTypeErrorText: "上传文件格式为：",
    readOnly: true,
    _cellSpacing: 0,

    limitSize: '',
    limitType: '',
    typesDescription: "\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f",
    uploadLimit: 0,
    queueLimit: '',
    flashUrl: '',
    uploadUrl: '',
    showUploadProgress: true,
    postParam: null,

    uploadOnSelect: false,

    uiCls: "mini-fileupload",
    _create: function() {
        mini.FileUpload.superclass._create.call(this);

        mini.addClass(this.el, "mini-htmlfile");

        this._progressbarEl = mini.append(this._borderEl, '<div id="' + this._id + '$progressbar"  class="mini-fileupload-progressbar"><div id="' + this._id + '$complete" class="mini-fileupload-complete"></div></div>')

        this._completeEl = this._progressbarEl.firstChild;

        this._uploadId = this._id + "_button_placeholder";
        this._fileEl = mini.append(this.el, '<span id="' + this._uploadId + '"></span>');
        this.uploadEl = this._fileEl;

        mini.on(this._borderEl, "mousemove", this.__OnMouseMove, this);
    },
    _getButtonHtml: function() {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" ' +
            'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '>' + this.buttonText + '</span>';
    },
    destroy: function(removeEl) {
        if (this._innerEl) {
            mini.clearEvent(this._innerEl);

            this._innerEl = null;
        }
        if (this.swfUpload) {
            this.swfUpload.destroy();
            this.swfUpload = null;
        }
        if (!this.destroyed) {
            mini.clearEvent(this._borderEl);
        }
        mini.FileUpload.superclass.destroy.call(this, removeEl);
    },
    __OnMouseMove: function(evt) {

        if (this.enabled == false) return;
        var sf = this;

        if (!this.swfUpload) {

            var upload = new SWFUpload({
                file_post_name: this.name,
                upload_url: sf.uploadUrl,
                flash_url: sf.flashUrl,


                file_size_limit: sf.limitSize,
                file_types: sf.limitType,
                file_types_description: sf.typesDescription,
                file_upload_limit: parseInt(sf.uploadLimit),
                file_queue_limit: sf.queueLimit,


                file_queued_handler: mini.createDelegate(this.__on_file_queued, this),

                upload_error_handler: mini.createDelegate(this.__on_upload_error, this),
                upload_success_handler: mini.createDelegate(this.__on_upload_success, this),
                upload_complete_handler: mini.createDelegate(this.__on_upload_complete, this),
                upload_progress_handler: mini.createDelegate(this.__on_upload_progress, this),

                file_queue_error_handler: mini.createDelegate(this.__on_file_queued_error, this),


                button_image_url: 'http://about:blank;',
                button_placeholder_id: this._uploadId,
                button_width: 1000,
                button_height: 50,
                button_window_mode: "transparent",
                button_action: SWFUpload.BUTTON_ACTION.SELECT_FILE,


                debug: false

            });
            upload.flashReady();
            this.swfUpload = upload;

            var el = this.swfUpload.movieElement;
            el.style.zIndex = 1000;
            el.style.position = "absolute";
            el.style.left = "0px";
            el.style.top = "0px";
            el.style.width = "100%";
            el.style.height = "50px";

        } else {



        }
    },
    addPostParam: function(value) {
        mini.copyTo(this.postParam, value);
    },
    setPostParam: function(value) {
        this.addPostParam(value);
    },
    getPostParam: function() {
        return this.postParam;
    },
    setLimitType: function(value) {
        this.limitType = value;
        if (this.swfUpload) this.swfUpload.setFileTypes(this.limitType, this.typesDescription);
    },
    getLimitType: function() {
        return this.limitType;
    },
    setTypesDescription: function(str) {
        this.typesDescription = str;



        if (this.swfUpload) this.swfUpload.setFileTypes(this.limitType, this.typesDescription);
    },
    getTypesDescription: function() {
        return this.typesDescription;
    },
    setButtonText: function(value) {
        this.buttonText = value;
        this._buttonEl.innerHTML = value;
    },
    getButtonText: function() {
        return this.buttonText;
    },

    setUploadLimit: function(value) {
        this.uploadLimit = value;
    },

    setQueueLimit: function(value) {
        this.queueLimit = value;
    },
    setFlashUrl: function(value) {
        this.flashUrl = value;
    },

    setUploadUrl: function(value) {
        if (this.swfUpload) {
            this.swfUpload.setUploadURL(value);
        }
        this.uploadUrl = value
    },
    getUploadUrl: function() {
        return this.uploadUrl;
    },

    setName: function(value) {
        this.name = value;
    },

    startUpload: function(params) {

        var e = {
            cancel: false
        };
        this.fire("beforeupload", e);
        if (e.cancel == true) return;
        if (this.swfUpload) {
            this.swfUpload.setPostParams(this.postParam);
            this.swfUpload.startUpload()
        }
    },
    setShowUploadProgress: function(value) {

        this.showUploadProgress = value;
        this._progressbarEl.style.display = value ? "block" : "none";
    },
    getShowUploadProgress: function() {
        return this.showUploadProgress;
    },

    clear: function() {
        this.setValue("");
        this.setText("");
        if (this.swfUpload) {
            this.swfUpload.cancelUpload();
        }
    },


    __on_upload_progress: function(file, complete, total) {

        if (this.showUploadProgress) {
            var totalWidth = mini.getWidth(this._progressbarEl);
            var width = totalWidth * complete / total;
            mini.setWidth(this._completeEl, width);

        }
        this._progressbarEl.style.display = this.showUploadProgress ? "block" : "none";

        var e = {
            file: file,
            complete: complete,
            total: total
        };
        this.fire("uploadprogress", e);
    },

    __on_file_queued_error: function(file, code, msg) {
        var e = {
            file: file,
            code: code,
            msg: msg,
            message: msg
        };
        this.fire("queuederror", e);
    },
    __on_file_queued: function(file) {
        var stats = this.swfUpload.getStats();
        if (stats) {
            var len = stats.files_queued;
            if (len > 1) {
                for (var i = 0; i < len - 1; i++) {
                    this.swfUpload.cancelUpload();
                }
            }
        }

        var e = {
            file: file
        };

        if (this.uploadOnSelect) {
            this.startUpload();
        }

        this.setText(file.name);
        this.setValue(file.name);
        this.validate();
        this.fire("fileselect", e);
    },
    __on_upload_success: function(file, serverData) {
        var e = {
            file: file,
            serverData: serverData
        };
        this.fire("uploadsuccess", e);
        this._progressbarEl.style.display = "none";
    },
    __on_upload_error: function(file, code, message) {
        if (message == "File Cancelled") return;

        this._progressbarEl.style.display = "none";

        var e = {
            file: file,
            code: code,
            message: message
        };

        this.fire("uploaderror", e);

    },
    __on_upload_complete: function(e) {
        this._progressbarEl.style.display = "none";
        this.fire("uploadcomplete", e);
    },
    __fileError: function() {

    },
    getAttrs: function(el) {
        var attrs = mini.FileUpload.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, ["limitType", "limitSize", "flashUrl", "uploadUrl", "uploadLimit", "buttonText", "showUploadProgress",
            "onuploadsuccess", "onuploaderror", "onuploadcomplete", "onfileselect", "onuploadprogress",
            "onqueuederror"
        ]);

        mini._ParseBool(el, attrs, ["uploadOnSelect"]);

        if(attrs.flashUrl)
        	attrs.flashUrl = mini.parseUsePath(attrs.flashUrl);
        if(attrs.uploadUrl)
        	attrs.uploadUrl = mini.parseServerPath(attrs.uploadUrl);

        return attrs;
    }
});
mini.regClass(mini.FileUpload, "fileupload");

mini.WebUpload = function(config){
	mini.WebUpload.superclass.constructor.call(this, config);
	this.el.className += ' mini-fileupload';
}
mini.extend(mini.WebUpload, mini.FileUpload, {
	uiCls: "mini-webupload",
    mimeTypes: {},
	flashUrl: mini.parseUsePath("plugins/webuploader/Uploader.swf"),
	__OnMouseMove: function(evt) {
        if (this.enabled == false) return;
        var sf = this;
        var me = this;
        if (!this.uploader) {
            var e = {
                formData: {}
            };
            me.fire('webuploadinit', e);
            var formData = e.formData || {};
        	var uploader =  WebUploader.create({
		        // swf文件路径
		        swf:  sf.flashUrl || sf.swf,
		        // 文件接收服务端。
		        server: sf.uploadUrl || sf.server,
		        // 选择文件的按钮。可选。
		        // 内部根据当前运行是创建，可能是input元素，也可能是flash.
		        pick: {
		        	id: '#' + sf._uploadId,
		        	multiple: false
		        },
		        // 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
		        resize: false,
		        // 自动上传
		        // auto: true,
		        // 文件上传参数表，用来标记文件的所有者（如果是一篇文章的附件，就是文章的ID）
		        formData: $.extend({
		            owner: 'zhidian.webuploader'
		        }, me.postParam || {}, formData),
		        fileVal: 'fileupload',
		        // 单个文件大小限制（单位：byte），这里限制为 100M
		        fileSingleSizeLimit: 10 * 1024 * 1024,
                accept: sf.mimeTypes
		    });

		    try{
		    	// Authorization
		    	if(window.mini_rest_token){
			    	uploader.on('uploadBeforeSend', function(obj, data, headers){
						$.extend(headers, {
							Authorization: window.mini_rest_token
				    	});
				    })
		    	}
		    } catch(e) {}

        	uploader.on('uploadComplete', function (file) {
		        uploader.removeFile(file, true);
		    });
		    uploader.on('fileQueued', mini.createDelegate(this.__on_file_queued, this));
		   	uploader.on('uploadProgress', mini.createDelegate(this.__on_upload_progress, this));
		    uploader.on('uploadSuccess', mini.createDelegate(this.__on_upload_success, this));
		    uploader.on('uploadError', mini.createDelegate(this.__on_upload_error, this));
		    uploader.on('uploadComplete',  mini.createDelegate(this.__on_upload_complete, this));
            this.uploader = uploader;

        } else {

        }
    },
    destroy: function(removeEl) {
        if (this._innerEl) {
            mini.clearEvent(this._innerEl);
            this._innerEl = null;
        }
        if (this.uploader) {
            this.uploader.destroy();
            this.uploader = null;
        }
        if (!this.destroyed) {
            mini.clearEvent(this._borderEl);
        }
        mini.WebUpload.superclass.destroy.call(this, removeEl);
    },
    __on_upload_progress: function(file, percentage) {
        if (this.showUploadProgress) {
            var totalWidth = mini.getWidth(this._progressbarEl);
            var width = totalWidth * percentage;
            mini.setWidth(this._completeEl, width);

        }
        this._progressbarEl.style.display = this.showUploadProgress ? "block" : "none";

        var e = {
            file: file,
            percentage: percentage
        };
        this.fire("uploadprogress", e);
    },
    __on_file_queued: function(file) {
        var stats = this.uploader.getStats();
        if (stats) {
            var len = stats.queueNum;
            if (len > 1) {
            	var files = this.uploader.getFiles();
                for (var i = 0; i < len - 1; i++) {
                    this.uploader.removeFile(files[i], true);
                }
            }
        }
        var e = {
            file: file
        };

        if (this.uploadOnSelect) {
            this.startUpload();
        }

        this.setText(file.name);
        this.setValue(file.name);
        this.validate();
        this.fire("fileselect", e);
    },
    startUpload: function(params) {
        var e = {
            cancel: false
        };
        this.fire("beforeupload", e);
        if (e.cancel == true) return;
        if (this.uploader) {
            // this.uploader.setPostParams(this.postParam);
            this.uploader.upload()
        }
    },
    getAttrs: function(el) {
        var attrs = mini.WebUpload.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, ["fileSingleSizeLimit", "mimeTypes", "onwebuploadinit"
        ]);
        if (typeof attrs.mimeTypes == "string") {
            attrs.mimeTypes = eval('(' + attrs.mimeTypes + ')');
        }
        // mini._ParseBool(el, attrs, ["uploadOnSelect"]);
        return attrs;
    }
})
mini.regClass(mini.WebUpload, "webupload");


mini.ImgWebUpload = function(config){
	mini.ImgWebUpload.superclass.constructor.call(this, config);
	this.el.className += ' mini-webupload';
}

mini.extend(mini.ImgWebUpload, mini.WebUpload, {
	uiCls: "mini-imgwebupload",
	serverTextField: 'data',
    serverValueField: 'data',
    mimeTypes: {
        title: 'Images',
        extensions: 'gif,jpg,jpeg,bmp,png',
        mimeTypes: 'image/*'
    },
    __on_upload_success: function(file, serverData) {
        var e = {
            file: file,
            serverData: serverData
        };

        if(this.serverTextField){
        	var text = mini._getMap(this.serverTextField, serverData);
        	if(text) {
        		this.setText(text);
        	}
        }
		if(this.serverValueField){
        	var value = mini._getMap(this.serverValueField, serverData);
        	if(value) {
        		this.setValue(value);
        	}
        }
        this.fire("uploadsuccess", e);
        this._progressbarEl.style.display = "none";
    },
	setText: function(value) {
		mini.ImgWebUpload.superclass.setText.call(this, value);

    },
    setValue: function(value) {
    	mini.ImgWebUpload.superclass.setValue.call(this, value);
        if(value) {
            try {
                // hack
                if(/^https?/.test(value)){
                    $(this.el).css({
                        'backgroundImage': 'url('+ value +')'
                    })
                }
            } catch(e) {};
        }

    },
    getAttrs: function(el) {
        var attrs = mini.ImgWebUpload.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, ["serverTextField",
        	"serverValueField"
        ]);
        return attrs;
    }
})
mini.regClass(mini.ImgWebUpload, "imgwebupload");


mini.ProgressBar = function() {
    mini.ProgressBar.superclass.constructor.apply(this, arguments);

}

mini.extend(mini.ProgressBar, mini.Control, {
    formField: true,
    uiCls: "mini-progressbar",

    showText: false,
    textAlign: "center",
    text: "",
    format: "{0}%",
    value: 0,

    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;

        mini.ProgressBar.superclass.set.call(this, kv);

        if (!mini.isNull(value)) {
            this.setValue(value);
        }

        return this;
    },

    _create: function() {

        this.el = document.createElement("div");
        this.el.className = "mini-progressbar";

        var s = '<div class="mini-progressbar-border">' +
            '<div class="mini-progressbar-bar"></div>' +
            '<div class="mini-progressbar-text"></div>' +
            '</div>';


        this.el.innerHTML = s;
        this._borderEl = this.el.firstChild;
        this._barEl = this._borderEl.firstChild;
        this._textEl = this._borderEl.lastChild;


    },

    setText: function(value) {
        this.text = value;
        this._textEl.innerHTML = value;
    },

    setShowText: function(value) {
        this.showText = value;
        this._textEl.style.display = value ? "" : "none";
    },

    getShowText: function() {
        return this.showText;
    },

    setTextAlign: function(value) {

        this.textAlign = value
        this._textEl.style.textAlign = value;
    },

    getTextAlign: function() {
        return this.textAlign;
    },

    setValue: function(value) {
        value = parseFloat(value);
        if (isNaN(value)) value = 0;

        if (value < 0) value = 0;
        if (value > 100) value = 100;

        this.value = value;

        this._barEl.style.width = value + "%";

        var text = String.format(this.format, value);
        this.setText(text);
    },

    getValue: function() {
        return this.value;
    },

    getAttrs: function(el) {
        var attrs = mini.ProgressBar.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["text", "format", "textAlign"]);

        mini._ParseBool(el, attrs, ["showText"]);

        return attrs;
    }
})

mini.regClass(mini.ProgressBar, "progressbar");



mini.Form = function(el) {
    this.el = mini.byId(el);
    this.id = el;
    if (!this.el) throw new Error("form element not null");

    mini.Form.superclass.constructor.apply(this, arguments);

}
mini.extend(mini.Form, mini.Component, {

    el: null,

    getFields: function() {
        if (!this.el) return [];
        var controls = mini.findControls(function(control) {
            if (!control.el || control.formField != true) return false;
            if (mini.isAncestor(this.el, control.el)) return true;
            return false;
        }, this);
        return controls;
    },
    getFieldsMap: function() {
        var fields = this.getFields();
        var map = {};
        for (var i = 0, l = fields.length; i < l; i++) {
            var field = fields[i];
            if (field.name) {
                if (field.type == "radio") {
                    map[field.name] = (map[field.name] = []);
                    map[field.name].push(field);
                } else {
                    map[field.name] = field;
                }
            }
        }
        return map;
    },
    getField: function(name) {
        if (!this.el) return null;
        return mini.getbyName(name, this.el);
    },

    getData: function(formatted, deep) {
        if (mini.isNull(deep)) deep = true;
        var valueFn = formatted ? "getFormValue" : "getValue";
        var controls = this.getFields();
        var data = {};
        var radios = {};
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            var fn = control[valueFn];
            if (!fn) continue;

            if (control.type == "radio") {
                radios[control.name] || (radios[control.name] = []);
                radios[control.name].push(control);
                continue;
            }

            if (control.name) {
                if (deep == true) {
                    mini._setMap(control.name, fn.call(control), data);
                } else {
                    data[control.name] = fn.call(control);
                }
            }
            if (control.textName && control.getText) {
                if (deep == true) {
                    mini._setMap(control.textName, control.getText(), data);
                } else {
                    data[control.textName] = control.getText();
                }
            }
        }
        for (var i in radios) {
            var groups = radios[i];
            for (var j = 0; j < groups.length; j++) {
                var control = groups[j];
                if (control.getChecked() && control.name) {
                    if (deep == true) {
                        mini._setMap(control.name, fn.call(control), data);
                    } else {
                        data[control.name] = fn.call(control);
                    }
                }
            }
        }
        return data;
    },
    getFieldsData: function(fields) {
        fields || (fields = []);
        if (typeof fields == 'string') {
            fields = [fields];
        }
        var data = this.getData();
        return mini.pick(data, fields);
    },
    setData: function(options, all, deep) {
        if (mini.isNull(deep)) deep = true;
        if (typeof options != "object") options = {};
        var map = this.getFieldsMap();
        for (var name in map) {
            var control = map[name];
            if (!control) continue;
            if (mini.isArray(control) && control[0].type == 'radio') {
                for (var i = 0; i < control.length; i++) {
                    var field = control[i];
                    var v = options[name];
                    if (deep == true) {
                        v = mini._getMap(name, options);
                    }
                    if (v === undefined && all === false) continue;
                    if (v === null) v = "";

                    if (field.getValue() == v) {
                        field.setChecked(true);
                    }
                }
            } else {
                if (control.setValue) {
                    var v = options[name];
                    if (deep == true) {
                        v = mini._getMap(name, options);
                    }
                    if (v === undefined && all === false) continue;
                    if (v === null) v = "";
                    if (v && v.value !== undefined) {
                        v = v.value;
                    }
                    control.setValue(v);
                }
                if (control.setText && control.textName) {
                    var text = options[control.textName];
                    if (deep == true) {
                        text = mini._getMap(control.textName, options);
                    }
                    if (mini.isNull(text)) text = "";
                    control.setText(text);
                }

            }
        }

    },
    reset: function() {
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.setValue) continue;
            if (control.setText && control._clearText !== false) {
                var text = control.defaultText;
                if (mini.isNull(text)) text = "";
                control.setText(text);
            }
            control.setValue(control.defaultValue);
            if (control.clear) control.clear();
        }
        this.setIsValid(true);
    },
    clear: function() {
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.setValue) continue;
            if (control.setText && control._clearText !== false) {
                control.setText("");
            }
            control.setValue("");
            if (control.clear) control.clear();
        }
        this.setIsValid(true);
    },
    getValidateFields: function(disableValid) {
        function isDisplay(control) {
            return control.isDisplay(function(p) {
                if (mini.hasClass(p, 'mini-tabs-body')) return true;
            });
        }

        var fields = [];
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.validate || !control.isDisplay) continue;
            if (isDisplay(control) || control.forceValidate) {

                if (control.enabled || disableValid) {

                    fields.push(control);
                }
            }
        }
        return fields;
    },
    validate: function(all, disableValid) {
        var controls = this.getValidateFields(disableValid);
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            var succ = control.validate();
            if (succ == false && all === false) {
                break;
            }
        }
        return this.isValid();
    },
    isValid: function() {
        var controls = this.getValidateFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (control.isValid() == false) return false;
        }
        return true;
    },
    setIsValid: function(isValid) {
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.setIsValid) continue;
            control.setIsValid(isValid);
        }
    },

    getErrorTexts: function() {
        var errorTexts = [];
        var errors = this.getErrors();
        for (var i = 0, l = errors.length; i < l; i++) {
            var control = errors[i];
            errorTexts.push(control.errorText);
        }
        return errorTexts;
    },
    getErrors: function() {
        var errors = [];
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.isValid) continue;
            if (control.isValid() == false) {
                errors.push(control);
            }
        }
        return errors;
    },

    mask: function(options) {
        if (typeof options == "string") options = {
            html: options
        };
        options = options || {};
        options.el = this.el;
        if (!options.cls) options.cls = this._maskCls;
        mini.mask(options);
    },
    unmask: function() {
        mini.unmask(this.el);
    },
    _maskCls: "mini-mask-loading",
    loadingMsg: "Loading...",
    loading: function(msg) {
        this.mask(msg || this.loadingMsg);
    },

    __OnValueChanged: function(e) {

        this._changed = true;
    },
    _changed: false,
    setChanged: function(value) {
        this._changed = value;

        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];

            control.on("valuechanged", this.__OnValueChanged, this);
        }
    },
    isChanged: function() {
        return this._changed;
    },
    setEnabled: function(value) {
        this.eachField(function(control) {
            control.setEnabled(value);
        });
    },
    setReadOnly: function(value) {
        this.eachField(function(control) {
            control.setReadOnly(value);
        });
    },
    setAllowInput: function(value) {
        this.eachField(function(control) {
            control.setAllowInput && control.setAllowInput(value);
        });
    },
    eachField: function(fn, scope) {
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            fn.call(scope || this, control);
        }
    }
});



mini.Fit = function() {
    mini.Fit.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Fit, mini.Container, {

    style: "",
    _clearBorder: false,

    uiCls: "mini-fit",
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "mini-fit";
        this._bodyEl = this.el;
    },
    _initEvents: function() {

    },
    isFixedSize: function() {
        return false;
    },
    doLayout: function() {
        if (!this.canLayout()) return;

        var parentNode = this.el.parentNode;
        var childNodes = mini.getChildNodes(parentNode);
        if (parentNode == document.body) {
            this.el.style.height = "0px";
        }


        var height = mini.getHeight(parentNode, true);







        for (var i = 0, l = childNodes.length; i < l; i++) {
            var node = childNodes[i];
            var tagName = node.tagName ? node.tagName.toLowerCase() : "";
            if (node == this.el || (tagName == "style" || tagName == "script" || node.type == "hidden")) continue;
            var pos = mini.getStyle(node, "position");
            if (pos == "absolute" || pos == "fixed") continue;

            var h = mini.getHeight(node);

            var margin = mini.getMargins(node);
            height = height - h - margin.top - margin.bottom;
        }

        var border = mini.getBorders(this.el);
        var padding = mini.getPaddings(this.el);
        var margin = mini.getMargins(this.el);

        height = height - margin.top - margin.bottom;
        if (jQuery.boxModel) {
            height = height - padding.top - padding.bottom - border.top - border.bottom;
        }
        if (height < 0) height = 0;

        this.el.style.height = height + "px";


        try {
            childNodes = mini.getChildNodes(this.el);
            for (var i = 0, l = childNodes.length; i < l; i++) {
                var node = childNodes[i];
                mini.layout(node);
            }
        } catch (e) {}

    },
    set_bodyParent: function(value) {

        if (!value) return;

        var el = this._bodyEl;

        var p = value;
        while (p.firstChild) {
            try {
                el.appendChild(p.firstChild);
            } catch (e) {}
        }
        this.doLayout();
    },


    getAttrs: function(el) {
        var attrs = mini.Fit.superclass.getAttrs.call(this, el);

        attrs._bodyParent = el;

        return attrs;
    }
});
mini.regClass(mini.Fit, "fit");


mini.Panel = function() {
    this._initButtons();
    mini.Panel.superclass.constructor.apply(this, arguments);

    if (this.url) this.setUrl(this.url);

    this._contentEl = this._bodyEl;

    this._doVisibleEls();

    this._Resizer = new mini._Resizer(this);

    this._doTools();
}
mini.extend(mini.Panel, mini.Container, {
    width: 250,
    title: "",
    iconCls: "",
    iconStyle: "",

    allowResize: false,

    url: "",

    refreshOnExpand: false,
    maskOnLoad: true,

    collapseOnTitleClick: false,

    showCollapseButton: false,
    showCloseButton: false,
    closeAction: "display",
    showHeader: true,
    showToolbar: false,
    showFooter: false,

    fitBottom: false,

    headerCls: "",
    headerStyle: "",
    bodyCls: "",
    bodyStyle: "",
    footerCls: "",
    footerStyle: "",
    toolbarCls: "",
    toolbarStyle: "",

    minWidth: 180,
    minHeight: 100,
    maxWidth: 5000,
    maxHeight: 3000,

    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var toolbar = kv.toolbar;
        delete kv.toolbar;
        var footer = kv.footer;
        delete kv.footer;
        var url = kv.url;
        delete kv.url;

        var buttons = kv.buttons;
        delete kv.buttons;

        mini.Panel.superclass.set.call(this, kv);

        if (buttons) {
            this.setButtons(buttons);
        }
        if (toolbar) {
            this.setToolbar(toolbar);
        }
        if (footer) {
            this.setFooter(footer);
        }
        if (url) {
            this.setUrl(url);
        }

        this._allowLayout = _allowLayout;
        this.doLayout();

        return this;
    },

    uiCls: "mini-panel",
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "mini-panel";
        this.el.tabIndex = 0;

        var s = '<div class="mini-panel-border">' +
            '<div class="mini-panel-header" ><div class="mini-panel-header-inner" ><span class="mini-panel-icon mini-iconfont"></span><div class="mini-panel-title" ></div><div class="mini-tools" ></div></div></div>' +
            '<div class="mini-panel-viewport">' +
            '<div class="mini-panel-toolbar"></div>' +
            '<div class="mini-panel-body" ></div>' +
            '<div class="mini-panel-footer"></div>' +
            '<div class="mini-resizer-trigger"></div>' +
            '</div>' +
            '</div>';
        this.el.innerHTML = s;
        this.el.hideFocus = true;

        this._borderEl = this.el.firstChild;
        this._headerEl = this._borderEl.firstChild;
        this._viewportEl = this._borderEl.lastChild;

        this._toolbarEl = mini.byClass('mini-panel-toolbar', this.el);
        this._bodyEl = mini.byClass('mini-panel-body', this.el);
        this._footerEl = mini.byClass('mini-panel-footer', this.el);
        this._resizeGridEl = mini.byClass('mini-resizer-trigger', this.el);

        var hi = mini.byClass('mini-panel-header-inner', this.el);
        this._iconEl = mini.byClass('mini-panel-icon', this.el);
        this._titleEl = mini.byClass('mini-panel-title', this.el);
        this._toolsEl = mini.byClass('mini-tools', this.el);

        mini.setStyle(this._bodyEl, this.bodyStyle);


        this._doTitle();
    },
    destroy: function(removeEl) {

        this._doRemoveIFrame();
        this._iframeEl = null;

        try{
             mini.un(window, "resize", this.__OnWindowFitBottomResize, this);
        } catch(e) {};
        this._viewportEl = this._borderEl = this._bodyEl = this._footerEl = this._toolbarEl = null;
        this._toolsEl = this._titleEl = this._iconEl = this._resizeGridEl = null;
        mini.Panel.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function() {
        mini._BindEvents(function() {
            mini.on(this.el, "click", this.__OnClick, this);
        }, this);
    },

    _doVisibleEls: function() {
        this._headerEl.style.display = this.showHeader ? "" : "none";
        this._toolbarEl.style.display = this.showToolbar ? "" : "none";
        this._footerEl.style.display = this.showFooter ? "" : "none";
    },
    _setBodyWidth: true,
    doLayout: function() {
        if (!this.canLayout()) return;

        this._resizeGridEl.style.display = this.allowResize ? "" : "none";


        var autoHeight = this.isAutoHeight();
        var autoWidth = this.isAutoWidth();



        var w = this.getWidth(true);
        var elWidth = w;
        if (mini.isIE6) {

            mini.setWidth(this._bodyEl, w);
        }
        if (!autoHeight) {
            var vh = this.getViewportHeight();
            mini.setHeight(this._viewportEl, vh);

            var bh = this.getBodyHeight();

            mini.setHeight(this._bodyEl, bh);
        } else {

            this._viewportEl.style.height = "auto";
            this._bodyEl.style.height = "auto";

            if (this.isMaxHeight()) {
                var vh = this.getViewportHeight();
                mini.setHeight(this._viewportEl, vh);

                var bh = this.getBodyHeight();
                mini.setHeight(this._bodyEl, bh);
            }

        }

        mini.layout(this._borderEl);

        if (this._resizeGridEl) {
            mini.repaint(this._resizeGridEl);






        }


        this.fire("layout");
    },
    deferLayout: function(time) {
        if (!time) time = 10;
        if (this._layoutTimer) return;
        var me = this;
        this._layoutTimer = setTimeout(function() {
            me._layoutTimer = null;
            me.doLayout();
        }, time);
    },
    _stopLayout: function() {
        clearTimeout(this._layoutTimer);
        this._layoutTimer = null;
    },
    getViewportWidth: function(content) {

        return this.getWidth(true);
    },
    getViewportHeight: function(content) {
        var h = this.getHeight(true) - this.getHeaderHeight();
        if (content) {
            var padding2 = mini.getPaddings(this._viewportEl);
            var border2 = mini.getBorders(this._viewportEl);
            var margin2 = mini.getMargins(this._viewportEl);
            if (jQuery.boxModel) {
                h = h - padding2.top - padding2.bottom - border2.top - border2.bottom;
            }
            h = h - margin2.top - margin2.bottom;
        }
        return h;
    },
    getBodyHeight: function(content) {
        var h = this.getViewportHeight();
        var h = h - this.getToolbarHeight() - this.getFooterHeight();
        if (content) {
            var padding = mini.getPaddings(this._bodyEl);
            var border = mini.getBorders(this._bodyEl);
            var margin = mini.getMargins(this._bodyEl);
            if (jQuery.boxModel) {
                h = h - padding.top - padding.bottom - border.top - border.bottom;
            }
            h = h - margin.top - margin.bottom;
        }

        if (h < 0) h = 0;
        return h;
    },
    getHeaderHeight: function() {
        var h = this.showHeader ? jQuery(this._headerEl).outerHeight() : 0;
        return h;
    },
    getToolbarHeight: function() {
        var h = this.showToolbar ? jQuery(this._toolbarEl).outerHeight() : 0;
        return h;
    },
    getFooterHeight: function() {
        var h = this.showFooter ? jQuery(this._footerEl).outerHeight() : 0;
        return h;
    },

    setHeaderStyle: function(value) {
        this.headerStyle = value;
        mini.setStyle(this._headerEl, value);
        this.doLayout();
    },
    getHeaderStyle: function() {
        return this.headerStyle;
    },
    setBodyStyle: function(value) {
        this.bodyStyle = value;
        mini.setStyle(this._bodyEl, value);
        this.doLayout();
    },
    getBodyStyle: function() {
        return this.bodyStyle;
    },
    setToolbarStyle: function(value) {
        this.toolbarStyle = value;
        mini.setStyle(this._toolbarEl, value);
        this.doLayout();
    },
    getToolbarStyle: function() {
        return this.toolbarStyle;
    },
    setFooterStyle: function(value) {
        this.footerStyle = value;
        mini.setStyle(this._footerEl, value);
        this.doLayout();
    },
    getFooterStyle: function() {
        return this.footerStyle;
    },
    setHeaderCls: function(cls) {
        jQuery(this._headerEl).removeClass(this.headerCls);
        jQuery(this._headerEl).addClass(cls);
        this.headerCls = cls;
        this.doLayout();
    },
    getHeaderCls: function() {
        return this.headerCls;
    },
    setBodyCls: function(cls) {
        jQuery(this._bodyEl).removeClass(this.bodyCls);
        jQuery(this._bodyEl).addClass(cls);
        this.bodyCls = cls;
        this.doLayout();
    },
    getBodyCls: function() {
        return this.bodyCls;
    },
    setToolbarCls: function(cls) {
        jQuery(this._toolbarEl).removeClass(this.toolbarCls);
        jQuery(this._toolbarEl).addClass(cls);
        this.toolbarCls = cls;
        this.doLayout();
    },
    getToolbarCls: function() {
        return this.toolbarCls;
    },
    setFooterCls: function(cls) {
        jQuery(this._footerEl).removeClass(this.footerCls);
        jQuery(this._footerEl).addClass(cls);
        this.footerCls = cls;
        this.doLayout();
    },
    getFooterCls: function() {
        return this.footerCls;
    },

    _doTitle: function() {
        var title = this.title == "" ? "&nbsp" : this.title;
        this._titleEl.innerHTML = title;

        this._iconEl.style.display = (this.iconCls || this.iconStyle) ? "inline" : "none";
        this._iconEl.className = "mini-panel-icon mini-iconfont " + this.iconCls;

        mini.setStyle(this._iconEl, this.iconStyle);

    },
    setTitle: function(value) {
        this.title = value;
        this._doTitle();
    },
    getTitle: function() {
        return this.title;
    },
    setIconCls: function(value) {
        this.iconCls = value;
        this._doTitle();
    },
    getIconCls: function() {
        return this.iconCls;
    },
    setIconStyle: function(value) {
        this.iconStyle = value;
        this._doTitle();
    },
    getIconStyle: function() {
        return this.iconStyle;
    },
    getFitBottom: function() {
        return this.fitBottom;
    },
    setFitBottom: function(value) {
        this.fitBottom = value;
        this._doFitBottom(value);
    },
    _doFitBottom: function(value) {
        var me = this;
        if (value) {
            mini._BindEvents(function() {
                mini.on(window, "resize", this.__OnWindowFitBottomResize, this);
            }, this);
            setTimeout(function() {
                me.__OnWindowFitBottomResize();
            }, 10);

        } else {
            mini.un(window, "resize", this.__OnWindowFitBottomResize, this);
        }
    },
    __OnWindowFitBottomResize: function() {
        var offsetTop = $(this.el).offset().top;
        var vh = document.documentElement.clientHeight - offsetTop;
        var offset = 0;
        if (this.el.parentNode != document.body) {
            var el = this.el.parentNode;
            do {
                offset += mini.getMargins(el).bottom + mini.getBorders(el).bottom + mini.getPaddings(el).bottom;
                el = el.parentNode;
            } while (el != document.body);
            vh = vh - offset;
        }
        this.setHeight(vh > 300 ? vh : 300); // @todo use initialition value instead of `300`
    },
    _doTools: function() {
        var s = "";
        for (var i = 0, l = this.buttons.length; i < l; i++) {
            var button = this.buttons[i];
            if (button.html) {
                s += button.html;
            } else {
                s += '<span id="' + i + '" class="mini-iconfont ' + button.cls + ' ' +
                    (button.enabled ? "" : "mini-disabled") + '" style="' +
                    button.style + ';' + (button.visible ? "" : "display:none;") + '"></span>';
            }
        }
        this._toolsEl.innerHTML = s;
    },
    setShowCloseButton: function(value) {
        this.showCloseButton = value;
        var button = this.getButton("close");
        if (!button) return;
        button.visible = value;
        this._doTools();
    },
    getShowCloseButton: function() {
        return this.showCloseButton;
    },
    setCloseAction: function(value) {
        this.closeAction = value;
    },
    getCloseAction: function() {
        return this.closeAction;
    },
    setShowCollapseButton: function(value) {
        this.showCollapseButton = value;
        var button = this.getButton("collapse");
        if (!button) return;
        button.visible = value;
        this._doTools();
    },
    getShowCollapseButton: function() {
        return this.showCollapseButton;
    },
    setShowHeader: function(value) {
        this.showHeader = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    getShowHeader: function() {
        return this.showHeader;
    },
    setShowToolbar: function(value) {
        this.showToolbar = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    getShowToolbar: function() {
        return this.showToolbar;
    },
    setShowFooter: function(value) {
        this.showFooter = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    getShowFooter: function() {
        return this.showFooter;
    },

    __OnClick: function(e) {

        if (mini.isAncestor(this._headerEl, e.target)) {
            var toolsEl = mini.findParent(e.target, 'mini-tools');
            if (toolsEl) {
                var button = this.getButton(parseInt(e.target.id));
                if (button) {
                    this._OnButtonClick(button, e);
                }
            } else {
                if (this.collapseOnTitleClick) {
                    this.toggle();
                }
            }
        }
    },
    _OnButtonClick: function(button, htmlEvent) {
        var e = {
            button: button,
            index: this.buttons.indexOf(button),
            name: button.name.toLowerCase(),
            htmlEvent: htmlEvent,
            cancel: false
        };
        this.fire("beforebuttonclick", e);

        var ret = true;
        try {
            if (e.name == "close" && this.closeAction == "destroy" && this._iframeEl && this._iframeEl.contentWindow) {

                if (this._iframeEl.contentWindow.CloseWindow) {
                    ret = this._iframeEl.contentWindow.CloseWindow("close");
                } else if (this._iframeEl.contentWindow.CloseOwnerWindow) {
                    ret = this._iframeEl.contentWindow.CloseOwnerWindow("close");
                } else {

                    ret = this._CloseOwnerWindow("close");
                }

            }
        } catch (ex) {

            ret = this._CloseOwnerWindow("close");

        }
        if (ret === false) {
            e.cancel = true;
        }

        if (e.cancel == true) return e;

        this.fire("buttonclick", e);

        if (e.name == "close") {
            if (this.closeAction == "destroy") {
                this.__HideAction = "close";
                this.destroy();
            } else {
                this.hide();
            }
        }
        if (e.name == "collapse") {
            this.toggle();
            if (this.refreshOnExpand && this.expanded && this.url) {
                this.reload();
            }
        }
        return e;
    },
    onButtonClick: function(fn, scope) {
        this.on("buttonclick", fn, scope);
    },


    _initButtons: function() {
        this.buttons = [];

        var collapse = this.createButton({
            name: "collapse",
            cls: "mini-tools-collapse",
            visible: this.showCollapseButton
        });
        this.buttons.push(collapse);

        var close = this.createButton({
            name: "close",
            cls: "mini-tools-close",
            visible: this.showCloseButton
        });
        this.buttons.push(close);
    },
    createButton: function(options) {
        var button = mini.copyTo({
            name: "",
            cls: "",
            style: "",
            visible: true,
            enabled: true,
            html: ""
        }, options);
        return button;
    },
    setButtons: function(value) {
        if (typeof value == "string") {
            value = value.split(" ");
        }
        if (!mini.isArray(value)) value = [];
        var btns = [];
        for (var i = 0, l = value.length; i < l; i++) {
            var btn = value[i];
            if (typeof btn == "string") {
                btn = btn.trim();
                if (!btn) continue;
                btn = {
                    name: btn,
                    cls: 'mini-tools-' + btn,
                    html: ''
                };
            }
            btn = this.createButton(btn);
            btns.push(btn);
        }
        this.buttons = btns;
        this._doTools();
    },
    getButtons: function() {
        return this.buttons;
    },
    addButton: function(button, index) {
        if (typeof button == "string") {
            button = {
                iconCls: button
            };
        }
        button = this.createButton(button);
        if (typeof index != "number") index = this.buttons.length;
        this.buttons.insert(index, button);
        this._doTools();
    },
    updateButton: function(index, options) {
        var button = this.getButton(index);
        if (!button) return;
        mini.copyTo(button, options);
        this._doTools();
    },
    removeButton: function(index) {
        var button = this.getButton(index);
        if (!button) return;
        this.buttons.remove(button);
        this._doTools();
    },
    getButton: function(index) {
        if (typeof index == "number") {
            return this.buttons[index];
        } else {
            for (var i = 0, l = this.buttons.length; i < l; i++) {
                var button = this.buttons[i];
                if (button.name == index) return button;
            }
        }
    },
    setBody: function(value) {
        __mini_setControls(value, this._bodyEl, this);
    },
    set_bodyParent: function(value) {

    },
    setToolbar: function(value) {
        __mini_setControls(value, this._toolbarEl, this);
    },
    setFooter: function(value) {
        __mini_setControls(value, this._footerEl, this);
    },
    getHeaderEl: function() {
        return this._headerEl;
    },
    getToolbarEl: function() {
        return this._toolbarEl;
    },
    getBodyEl: function() {
        return this._bodyEl;
    },
    getFooterEl: function() {
        return this._footerEl;
    },
    getIFrameEl: function(index) {
        return this._iframeEl;
    },

    clearTimeStamp: false,
    setClearTimeStamp: function(value) {
        this.clearTimeStamp = value;
    },
    getClearTimeStamp: function() {
        return this.clearTimeStamp;
    },


    _getMaskWrapEl: function() {
        return this._bodyEl;
    },
    _doRemoveIFrame: function(removeAll) {

        if (this._iframeEl) {
            var iframe = this._iframeEl;


            if (iframe._ondestroy) iframe._ondestroy();

            iframe.onload = function() {};
            jQuery(iframe).off("load");
            iframe.src = "";

            if (mini.isIE) {
                try {
                    iframe.contentWindow.document.write("");
                    iframe.contentWindow.document.close();
                } catch (ex) {}
            }


            try {
                this._iframeEl.parentNode.removeChild(this._iframeEl);
                this._iframeEl.removeNode(true);
            } catch (ex) {}
        }
        this._iframeEl = null;





        if (removeAll === true) {
            mini.removeChilds(this._bodyEl);
        }
    },
    _deferLoadingTime: 80,
    _doLoad: function() {

        if (!this.url) return;

        this._doRemoveIFrame(true);

        var st = new Date();
        var sf = this;
        this.loadedUrl = this.url;
        if (this.maskOnLoad) this.loading();

        jQuery(this._bodyEl).css("overflow", "hidden");

        function CloseOwnerWindow(action) {

            sf.__HideAction = action;


            var ret = true;
            if (sf.__onDestroy) ret = sf.__onDestroy(action);
            if (ret === false) {
                return false;
            }

            var e = {
                iframe: sf._iframeEl,
                action: action
            };

            sf.fire("unload", e);

            setTimeout(function() {
                sf.destroy();
            }, 10);

        }
        sf._CloseOwnerWindow = CloseOwnerWindow;

        var iframe = mini.createIFrame(this.url,
            function(_iframe, firstLoad) {
                if (sf.destroyed) return;

                var t = (st - new Date()) + sf._deferLoadingTime;

                if (t < 0) t = 0;
                setTimeout(function() {
                    sf.unmask();
                }, t);


                try {


                    sf._iframeEl.contentWindow.Owner = sf.Owner;
                    sf._iframeEl.contentWindow.CloseOwnerWindow = CloseOwnerWindow;
                } catch (e) {}



                if (firstLoad || sf.loadOnRefresh) {
                    if (sf.__onLoad) sf.__onLoad();

                    var e = {
                        iframe: sf._iframeEl
                    };


                    sf.fire("load", e);
                }
            },
            this.clearTimeStamp
        );
        this._bodyEl.appendChild(iframe);
        this._iframeEl = iframe;

    },

    load: function(url, onload, ondestroy) {
        this.setUrl(url, onload, ondestroy);
    },
    reload: function() {
        this.setUrl(this.url);
    },
    setUrl: function(value, onload, ondestroy) {
        this.url = value;
        this.__onLoad = onload;
        this.__onDestroy = ondestroy;
        if (this.expanded && value) {
            this._doLoad();
        }
    },
    getUrl: function() {
        return this.url;
    },
    setRefreshOnExpand: function(value) {
        this.refreshOnExpand = value;
    },
    getRefreshOnExpand: function() {
        return this.refreshOnExpand;
    },
    setMaskOnLoad: function(value) {
        this.maskOnLoad = value;
    },
    getMaskOnLoad: function(value) {
        return this.maskOnLoad;
    },
    setAllowResize: function(value) {
        if (this.allowResize != value) {
            this.allowResize = value;
            this.doLayout();
        }
    },
    getAllowResize: function() {
        return this.allowResize;
    },
    setLoadOnRefresh: function(value) {
        this.loadOnRefresh = value;
    },
    getLoadOnRefresh: function(value) {
        return this.loadOnRefresh;
    },


    expanded: true,
    setExpanded: function(value) {
        if (this.expanded != value) {
            this.expanded = value;
            if (this.expanded) {
                this.expand();
            } else {
                this.collapse();
            }
        }
    },
    getExpanded: function() {
        return this.expanded;
    },
    toggle: function() {
        if (this.expanded) {
            this.collapse();
        } else {
            this.expand();
        }
    },
    collapse: function() {
        this.expanded = false;

        if (this.state != "max") {

            this._height = this.el.style.height;
        }
        this.el.style.height = "auto";
        this._viewportEl.style.display = "none";

        mini.addClass(this.el, "mini-panel-collapse");
        this.doLayout();
    },
    expand: function() {
        this.expanded = true;

        if (this._height) {
            this.el.style.height = this._height;
        }
        this._viewportEl.style.display = "block";

        if (this.state != "max") {
            delete this._height;
        }

        mini.removeClass(this.el, "mini-panel-collapse");


        if (this.url && this.url != this.loadedUrl) {
            this._doLoad();
        }
        this.doLayout();
    },








    setCollapseOnTitleClick: function(value) {
        this.collapseOnTitleClick = value;
        mini.removeClass(this.el, 'mini-panel-titleclick');
        if (value) mini.addClass(this.el, 'mini-panel-titleclick');
    },
    getCollapseOnTitleClick: function() {
        return this.collapseOnTitleClick;
    },

    getAttrs: function(el) {
        var attrs = mini.Panel.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["title", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle",
            "footerCls", "footerStyle", "toolbarCls", "toolbarStyle", "footer", "toolbar",
            "url", "closeAction", "loadingMsg",
            "onbeforebuttonclick", "onbuttonclick", "onload", "buttons"
        ]);
        mini._ParseBool(el, attrs, ["allowResize", "showCloseButton", "showHeader", "showToolbar", "showFooter", "loadOnRefresh", "fitBottom",
            "showCollapseButton", "refreshOnExpand", "maskOnLoad", "expanded", "collapseOnTitleClick", "clearTimeStamp"
        ]);

        var cs = mini.getChildNodes(el, true);
        for (var i = cs.length - 1; i >= 0; i--) {
            var node = cs[i];
            var property = mini.getAttr(node, "property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "toolbar") {
                attrs.toolbar = node;
            } else if (property == "footer") {
                attrs.footer = node;
            }
        }
        attrs.body = cs;

        return attrs;
    }


});
mini.regClass(mini.Panel, "panel");



mini.Window = function() {

    mini.Window.superclass.constructor.apply(this, arguments);

    this.addCls("mini-window");

    this.setVisible(false);
    this.setAllowDrag(this.allowDrag);
    this.setAllowResize(this.allowResize);
}

mini.extend(mini.Window, mini.Panel, {
    x: 0,
    y: 0,
    state: "restore",

    _dragCls: "mini-window-drag",
    _resizeCls: "mini-window-resize",
    allowDrag: true,

    showCloseButton: true,
    showMaxButton: false,
    showMinButton: false,
    showCollapseButton: false,

    showModal: true,

    animCls: "",

    modalCls: "mini-modal-gray",

    minWidth: 150,
    minHeight: 80,
    maxWidth: 2000,
    maxHeight: 2000,

    uiCls: "mini-window",

    _create: function() {
        mini.Window.superclass._create.call(this);

        if (mini.isIE && mini_useShims) {
            var iframe = "<iframe frameborder='0' style='position: absolute; z-index: -1; width: 100%; height: 100%; top: 0;left:0;scrolling:no;'></iframe>";
            mini.append(this.el, iframe);
        }
    },
    _initButtons: function() {
        this.buttons = [];


        var collapse = this.createButton({
            name: "collapse",
            cls: "mini-tools-collapse",
            visible: this.showCollapseButton
        });
        this.buttons.push(collapse);

        var min = this.createButton({
            name: "min",
            cls: "mini-tools-min",
            visible: this.showMinButton
        });
        this.buttons.push(min);

        var max = this.createButton({
            name: "max",
            cls: "mini-tools-max",
            visible: this.showMaxButton
        });
        this.buttons.push(max);

        var close = this.createButton({
            name: "close",
            cls: "mini-tools-close",
            visible: this.showCloseButton
        });
        this.buttons.push(close);

    },
    _initEvents: function() {
        mini.Window.superclass._initEvents.call(this);

        mini._BindEvents(function() {

            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(window, "resize", this.__OnWindowResize, this);

            mini.on(this.el, "mousedown", this.__OnWindowMouseDown, this);
        }, this);


    },
    doLayout: function() {
        if (!this.canLayout()) return;




        if (this.state == "max") {
            var vbox = this.getParentBox();
            this.el.style.left = "0px";
            this.el.style.top = "0px";
            mini.setSize(this.el, vbox.width, vbox.height);
        }

        mini.Window.superclass.doLayout.call(this);


        if (this.allowDrag) {
            mini.addClass(this.el, this._dragCls);
        }
        if (this.state == "max") {
            this._resizeGridEl.style.display = "none";
            mini.removeClass(this.el, this._dragCls);
        }


        this._doModal();
    },
    _doModal: function() {

        if (!this.el) {

            if (this._modalEl) mini.removeNode(this._modalEl);
            return;
        }
        var show = this.showModal && this.isDisplay() && this.visible;
        if (!this._modalEl && this.showModal == false) {

            if (this._modalEl) mini.removeNode(this._modalEl);
            return;
        }


        if (!this._modalEl) {
            var id = '__modal' + this._id;

            var iframe = mini_useShims ? "<iframe frameborder='0' style='position: absolute; z-index: -1; width: 100%; height: 100%; top: 0;left:0;scrolling:no;'></iframe>" : "";
            this._modalEl = mini.append(document.body, '<div id="' + id + '" class="mini-modal ' + (this.modalCls || '') + '" style="display:none">' + iframe + '</div>');
        }

        if (show) {
            this._modalEl.style.display = "block";
            this._modalEl.style.zIndex = mini.getStyle(this.el, 'zIndex') - 1;

        } else {
            this._modalEl.style.display = "none";
        }
    },
    getParentBox: function() {
        var vbox = mini.getViewportBox();
        var containerEl = this._containerEl || document.body;
        if (containerEl != document.body) {
            vbox = mini.getBox(containerEl);
        }
        return vbox;
    },
    setAnimCls: function(cls) {
        this.animCls = cls;
    },
    getAnimCls: function() {
        return this.animCls;
    },
    setModalCls: function(cls) {
        this.modalCls = cls;
    },
    getModalCls: function() {
        return this.modalCls;
    },

    setShowModal: function(value) {

        this.showModal = value;
    },
    getShowModal: function() {
        return this.showModal;
    },
    setMinWidth: function(value) {
        if (isNaN(value)) return;
        this.minWidth = value;
    },
    getMinWidth: function() {
        return this.minWidth;
    },
    setMinHeight: function(value) {
        if (isNaN(value)) return;
        this.minHeight = value;
    },
    getMinHeight: function() {
        return this.minHeight;
    },
    setMaxWidth: function(value) {
        if (isNaN(value)) return;
        this.maxWidth = value;
    },
    getMaxWidth: function() {
        return this.maxWidth;
    },
    setMaxHeight: function(value) {
        if (isNaN(value)) return;
        this.maxHeight = value;
    },
    getMaxHeight: function() {
        return this.maxHeight;
    },
    setAllowDrag: function(value) {
        this.allowDrag = value;
        mini.removeClass(this.el, this._dragCls);
        if (value) {
            mini.addClass(this.el, this._dragCls);
        }
    },
    getAllowDrag: function() {
        return this.allowDrag;
    },









    setShowMaxButton: function(value) {
        this.showMaxButton = value;
        var button = this.getButton("max");
        if (!button) return;
        button.visible = value;
        this._doTools();
    },
    getShowMaxButton: function() {
        return this.showMaxButton;
    },
    setShowMinButton: function(value) {
        this.showMinButton = value;
        var button = this.getButton("min");
        if (!button) return;
        button.visible = value;
        this._doTools();
    },
    getShowMinButton: function() {
        return this.showMinButton;
    },

    max: function() {
        this.state = "max";




        this.show();

        var button = this.getButton("max");
        if (button) {
            button.cls = "mini-tools-restore";
            this._doTools();
        }
    },
    restore: function() {
        this.state = "restore";
        this.show(this.x, this.y);

        var button = this.getButton("max");
        if (button) {
            button.cls = "mini-tools-max";
            this._doTools();
        }
    },
    showInBody: true,
    setShowInBody: function(value) {
        this.showInBody = value;
    },
    getShowInBody: function() {
        return this.showInBody;
    },
    containerEl: null,
    showAtPos: function(x, y, options) {
        this.show(x, y, options);
    },
    show: function(x, y, options) {
        this._allowLayout = false;

        var containerEl = this._containerEl || document.body;
        if (!this.isRender() || (this.el.parentNode != containerEl && this.showInBody)) {
            this.render(containerEl);
        }

        this.el.style.zIndex = mini.getMaxZIndex();

        this._doShow(x, y);

        this._allowLayout = true;
        this.setVisible(true);

        if (this.state != "max") {
            var box = this.getBox();
            this.x = box.x;
            this.y = box.y;
        }





        try {

            document.body.focus();
        } catch (e) {}

        if (this.animCls) {
            this.addCls(this.animCls);
        }
    },



    hide: function() {
        this.setVisible(false);
        this._doModal();
    },
    getWidth: function(content) {
        this._headerEl.style.width = "50px";
        var width = mini.getWidth(this.el);
        this._headerEl.style.width = "auto";

        if (content && this._borderEl) {
            var b2 = mini.getBorders(this._borderEl);
            width = width - b2.left - b2.right;
        }

        return width;
    },
    getBox: function() {
        this._headerEl.style.width = "50px";
        this.el.style.display = "";
        var width = mini.getWidth(this.el);
        this._headerEl.style.width = "auto";
        var box = mini.getBox(this.el);
        box.width = width;
        box.right = box.x + width;
        return box;
    },
    _measureSize: function() {
        this.el.style.display = "";
        var box = this.getBox();

        if (box.width > this.maxWidth) {
            mini.setWidth(this.el, this.maxWidth);
            box = this.getBox();
        }
        if (box.height > this.maxHeight) {
            mini.setHeight(this.el, this.maxHeight);
            box = this.getBox();
        }
        if (box.width < this.minWidth) {
            mini.setWidth(this.el, this.minWidth);
            box = this.getBox();
        }
        if (box.height < this.minHeight) {
            mini.setHeight(this.el, this.minHeight);
            box = this.getBox();
        }
    },
    _doShow: function(x, y) {
        var vbox = this.getParentBox();

        if (this.state == "max") {

            if (!this._width) {
                var box = this.getBox();

                this._width = box.width;

                if (this.expanded) {
                    this._height = box.height;
                }
                this.x = box.x;
                this.y = box.y;


            }

            this.el.style.left = "-10000px";
            this.el.style.top = "-10000px";
        } else {
            if (mini.isNull(x)) x = "center";
            if (mini.isNull(y)) y = "middle";

            this.el.style.position = "absolute";
            this.el.style.left = "-2000px";
            this.el.style.top = "-2000px";
            this.el.style.display = "";

            if (this._width) {
                this.setWidth(this._width);
                this.setHeight(this._height);
                delete this._width;
                delete this._height;
            } else {

            }
            this._measureSize();

            var box = this.getBox();


            if (x == "left") x = 0;
            if (x == 'center') x = vbox.width / 2 - box.width / 2;
            if (x == "right") x = vbox.width - box.width;

            if (y == "top") y = 0;
            if (y == "middle") y = vbox.y + vbox.height / 2 - box.height / 2;
            if (y == "bottom") y = vbox.height - box.height;

            if (x + box.width > vbox.right) x = vbox.right - box.width;
            if (y + box.height > vbox.bottom) y = vbox.bottom - box.height;
            if (x < 0) x = 0;
            if (y < 0) y = 0;

            this.el.style.display = "";

            mini.setX(this.el, x);

            mini.setY(this.el, y);


        }
        this.doLayout();
    },





    _OnButtonClick: function(button, htmlEvent) {
        var e = mini.Window.superclass._OnButtonClick.call(this, button, htmlEvent);
        if (e.cancel == true) return e;

        if (e.name == "max") {
            if (this.state == "max") {
                this.restore();
            } else {
                this.max();
            }
        }
        return e;
    },
    __OnWindowResize: function(e) {
        if (this.state == "max") {
            this.doLayout();


        }
        if (!mini.isIE6) {
            this._doModal();
        }
    },
    enableDragProxy: true,
    setEnableDragProxy: function(value) {
        this.enableDragProxy = value;
    },
    getEnableDragProxy: function(value) {
        return this.enableDragProxy;
    },

    allowCrossBottom: true,
    setAllowCrossBottom: function(value) {
        this.allowCrossBottom = value
    },
    getAllowCrossBottom: function() {
        return this.allowCrossBottom;
    },


    xxx: 0,
    __OnWindowMouseDown: function(e) {

        var sf = this;




        if (this.state != "max" && this.allowDrag && mini.isAncestor(this._headerEl, e.target) && !mini.findParent(e.target, "mini-tools")) {
            var sf = this;

            if (this.el) {
                this.el.style.zIndex = mini.getMaxZIndex();
            }
            var box = this.getBox();
            var drag = new mini.Drag({
                capture: false,
                onStart: function() {
                    sf._maskProxy = mini.append(document.body, '<div class="mini-resizer-mask" style=""></div>');

                    if (sf.enableDragProxy) {
                        sf._dragProxy = mini.append(document.body, '<div class="mini-drag-proxy"></div>');


                        sf.el.style.left = "-2000px";
                        sf.el.style.top = "-2000px";




                    } else {
                        sf._dragProxy = sf.el;
                    }


                    var mask = mini.append(document.body, '<div class="mini-resizer-mask"></div>');
                    setTimeout(function() {
                        mini.removeNode(mask);
                    }, 300);

                },
                onMove: function(drag) {

                    var x = drag.now[0] - drag.init[0],
                        y = drag.now[1] - drag.init[1];

                    x = box.x + x;
                    y = box.y + y;

                    var vbox = sf.getParentBox();

                    var right = x + box.width;
                    var bottom = y + box.height;
                    if (right > vbox.width) x = vbox.width - box.width;


                    if (!sf.allowCrossBottom) {
                        if (bottom > vbox.height) y = vbox.height - box.height;
                    }


                    if (x < 0) x = 0;
                    if (y < 0) y = 0;





                    sf.x = x;
                    sf.y = y;


                    var dbox = {
                        x: x,
                        y: y,
                        width: box.width,
                        height: box.height
                    };

                    mini.setBox(sf._dragProxy, dbox);

                    this.moved = true;
                },
                onStop: function() {


                    if (sf.el) {
                        sf.el.style.display = "block";

                        if (this.moved) {
                            var box = mini.getBox(sf._dragProxy);


                            mini.setBox(sf.el, box);
                        }
                    }

                    jQuery(sf._maskProxy).remove();
                    sf._maskProxy = null;

                    if (sf.enableDragProxy) {
                        jQuery(sf._dragProxy).remove();
                    }
                    sf._dragProxy = null;


                }
            });
            drag.start(e);


        }
    },
    destroy: function(removeEl) {


        mini.un(window, "resize", this.__OnWindowResize, this);


        if (this._modalEl) {
            jQuery(this._modalEl).remove();
            this._modalEl = null;
        }
        if (this.shadowEl) {
            jQuery(this.shadowEl).remove();
            this.shadowEl = null;
        }

        var id = '__modal' + this._id;
        jQuery("[id='" + id + "']").remove();

        mini.Window.superclass.destroy.call(this, removeEl);
    },
    getAttrs: function(el) {
        var attrs = mini.Window.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["modalStyle"]);
        mini._ParseBool(el, attrs, ["showModal", "showShadow", "allowDrag", "allowResize",
            "showMaxButton", "showMinButton", "showInBody", "enableDragProxy", "allowCrossBottom"
        ]);
        mini._ParseInt(el, attrs, ["minWidth", "minHeight", "maxWidth", "maxHeight"]);

        return attrs;
    },

    showAtEl: function(atEl, options) {
        atEl = mini.byId(atEl);
        if (!atEl) return;
        if (!this.isRender() || this.el.parentNode != document.body) {
            this.render(document.body);
        }

        var c = {
            xAlign: this.xAlign,
            yAlign: this.yAlign,
            xOffset: 0,
            yOffset: 0,
            popupCls: this.popupCls
        };
        mini.copyTo(c, options);



        this._popupEl = atEl;

        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";

        this.doLayout();
        this._measureSize();

        var vbox = mini.getViewportBox();
        var box = this.getBox();
        var pbox = mini.getBox(atEl);
        var xy = c.xy;
        var h = c.xAlign,
            v = c.yAlign;

        var x = vbox.width / 2 - box.width / 2,
            y = 0;
        if (xy) {
            x = xy[0];
            y = xy[1];
        }

        switch (c.xAlign) {
            case "outleft":
                x = pbox.x - box.width;
                break;
            case "left":
                x = pbox.x;
                break;
            case "center":
                x = pbox.x + pbox.width / 2 - box.width / 2;
                break;
            case "right":
                x = pbox.right - box.width;
                break;
            case "outright":
                x = pbox.right;
                break;
            default:

                break;
        }

        switch (c.yAlign) {
            case "above":
                y = pbox.y - box.height;
                break;
            case "top":
                y = pbox.y;
                break;
            case "middle":
                y = pbox.y + pbox.height / 2 - box.height / 2;
                break;
            case "bottom":
                y = pbox.bottom - box.height;
                break;
            case "below":
                y = pbox.bottom;
                break;
            default:

                break;
        }
        x = parseInt(x);
        y = parseInt(y);


        if (c.outYAlign || c.outXAlign) {
            if (c.outYAlign == "above") {
                if (y + box.height > vbox.bottom) {
                    var top = pbox.y - vbox.y;
                    var bottom = vbox.bottom - pbox.bottom;
                    if (top > bottom) {
                        y = pbox.y - box.height;
                    }
                }

            }
            if (c.outXAlign == "outleft") {
                if (x + box.width > vbox.right) {
                    var left = pbox.x - vbox.x;
                    var right = vbox.right - pbox.right;
                    if (left > right) {
                        x = pbox.x - box.width;
                    }
                }
            }
            if (c.outXAlign == "right") {
                if (x + box.width > vbox.right) {
                    x = pbox.right - box.width;




                }
            }
            this._Show(x, y);
        } else {
            this.showAtPos(x + c.xOffset, y + c.yOffset);
        }
    }
});

mini.regClass(mini.Window, "window");



mini.MessageBox = {






    alertTitle: "\u63d0\u9192",
    confirmTitle: "\u786e\u8ba4",
    prompTitle: "\u8f93\u5165",
    prompMessage: "\u8bf7\u8f93\u5165\u5185\u5bb9\uff1a",
    buttonText: {
        ok: "\u786e\u5b9a",
        cancel: "\u53d6\u6d88",
        yes: "\u662f",
        no: "\u5426"
    },

    show: function(options) {

        options = mini.copyTo({
            width: "auto",
            height: "auto",
            showModal: true,

            timeout: 0,

            minWidth: 150,
            maxWidth: 800,
            minHeight: 50,
            maxHeight: 350,

            showHeader: true,
            title: "",
            titleIcon: "",
            iconCls: "",
            iconStyle: "",
            message: "",
            html: "",


            modalCls: "",
            animCls: "",

            spaceStyle: "margin-right:5px",

            showCloseButton: true,
            buttons: null,
            buttonWidth: 58,
            callback: null
        }, options);

        options.message = String(options.message);

        var callback = options.callback;

        var control = new mini.Window();

        control.addCls("mini-messagebox");

        control.setBodyStyle("overflow:hidden");
        control.setShowModal(options.showModal);

        if (options.modalCls) {
            control.setModalCls(options.modalCls);
        }
        if (options.animCls) {
            control.setAnimCls(options.animCls);
        }
        control.setTitle(options.title || "");
        control.setIconCls(options.titleIcon);
        control.setShowHeader(options.showHeader);

        control.setShowCloseButton(options.showCloseButton);

        var id1 = control.uid + "$table",
            id2 = control.uid + "$content";

        var icon = '<div class="' + options.iconCls + '" style="' + options.iconStyle + '"></div>';
        var s = '<table class="mini-messagebox-table" id="' + id1 + '" style="" cellspacing="0" cellpadding="0"><tr><td>' +
            icon + '</td><td id="' + id2 + '" class="mini-messagebox-content-text">' +
            (options.message || "") + '</td></tr></table>';




        var ws = '<div class="mini-messagebox-content"></div>' +
            '<div class="mini-messagebox-buttons"></div>';
        control._bodyEl.innerHTML = ws;
        var contentEl = control._bodyEl.firstChild;
        if (options.html) {
            if (typeof options.html == "string") {
                contentEl.innerHTML = options.html;
            } else if (mini.isElement(options.html)) {
                contentEl.appendChild(options.html);
            }
        } else {
            contentEl.innerHTML = s;
        }

        control._Buttons = [];

        var buttonsEl = control._bodyEl.lastChild;
        if (options.buttons && options.buttons.length > 0) {
            for (var i = 0, l = options.buttons.length; i < l; i++) {
                var button = options.buttons[i];
                var buttonCls = '',
                    buttonWidth = 0;
                if (typeof button == 'string') {
                    var text = mini.MessageBox.buttonText[button];
                    if (!text) text = button;
                } else if (mini.isObject(button)) {
                    text = button['text'];
                    buttonCls = button['btnCls'] || '';
                    buttonWidth = button['btnWidth'] || 0;

                    button = button['action'];
                }
                var btn = new mini.Button();
                btn.setText(text);
                btn.addCls('mini-button-' + button);
                if (buttonCls) {
                    btn.addCls(buttonCls);
                }
                btn.setWidth(buttonWidth || options.buttonWidth);
                btn.render(buttonsEl);
                btn.action = button;
                btn.on("click", function(e) {
                    var button = e.sender;
                    if (callback)
                        if (callback(button.action) === false) return;
                    mini.MessageBox.hide(control);
                });

                if (i != l - 1) {
                    btn.setStyle(options.spaceStyle);
                }

                control._Buttons.push(btn);
            }
        } else {
            buttonsEl.style.display = "none";
        }

        control.setMinWidth(options.minWidth);
        control.setMinHeight(options.minHeight);
        control.setMaxWidth(options.maxWidth);
        control.setMaxHeight(options.maxHeight);
        control.setWidth(options.width);
        control.setHeight(options.height);
        control.show(options.x, options.y, {
            animType: options.animType
        });


        control.addCls("mini-window-anim");

        var width = control.getWidth();
        control.setWidth(width);
        var height = control.getHeight();
        control.setHeight(height);

        var tb = document.getElementById(id1);
        if (tb) {
            tb.style.width = "100%";
        }
        var td = document.getElementById(id2);
        if (td) {
            td.style.width = "100%";
        }


        var firstButton = control._Buttons[0];
        if (firstButton) {
            firstButton.focus();
        } else {
            control.focus();
        }

        control.on("beforebuttonclick", function(e) {
            if (callback) callback("close");
            e.cancel = true;
            mini.MessageBox.hide(control);
        });

        mini.on(control.el, "keydown", function(e) {
            if (e.keyCode == 27) {
                if (callback) callback("close");
                mini.MessageBox.hide(control);
            }
        });



        if (options.timeout) {
            setTimeout(function() {
                mini.MessageBox.hide(control.uid);
            }, options.timeout);
        }

        return control.uid;
    },
    hide: function(id) {
        if (!id) return;
        var control = typeof id == "object" ? id : mini.getbyUID(id);
        if (!control) return;


        for (var i = 0, l = control._Buttons.length; i < l; i++) {
            var button = control._Buttons[i];
            button.destroy();
        }
        control._Buttons = null;

        control.destroy();
    },
    toast: function(message, type, callback) {
        if (typeof type == "function") {
            callback = type;
            type = "";
        }
        return mini.MessageBox.show({
            minWidth: 250,
            title: mini.MessageBox.alertTitle,
            buttons: ["ok"],
            message: message,
            iconCls: "mini-messagebox-" + (type || 'warning'),
            callback: callback
        });
    },
    alert: function(message, title, callback) {
        if (typeof title == "function") {
            callback = title;
            title = "";
        }
        return mini.MessageBox.show({
            minWidth: 250,
            title: title || mini.MessageBox.alertTitle,
            buttons: ["ok"],
            message: message,
            iconCls: "mini-messagebox-warning",
            callback: callback
        });
    },
    confirm: function(message, title, callback) {
        if (typeof message == "object") {
            return mini.MessageBox.show(mini.copyTo({
                minWidth: 250,
                title: mini.MessageBox.confirmTitle,
                buttons: ["ok", "cancel"],
                iconCls: "mini-messagebox-question",
                callback: $.noop,
            }, message));

        } else {
            if (typeof title == "function") {
                callback = title;
                title = "";
            }
            return mini.MessageBox.show({
                minWidth: 250,
                title: title || mini.MessageBox.confirmTitle,
                buttons: ["ok", "cancel"],
                message: message,
                iconCls: "mini-messagebox-question",
                callback: callback
            });
        }
    },
    prompt: function(message, title, callback, multi) {
        var id = "prompt$" + new Date().getTime();
        var s = message || mini.MessageBox.promptMessage;
        if (multi) {
            s = s + '<br/><textarea id="' + id + '" style="width:200px;height:60px;margin-top:3px;"></textarea>';
        } else {
            s = s + '<br/><input id="' + id + '" type="text" style="width:200px;margin-top:3px;"/>';
        }
        var uid = mini.MessageBox.show({
            title: title || mini.MessageBox.promptTitle,
            buttons: ["ok", "cancel"],
            width: 250,
            html: '<div style="padding:5px;padding-left:10px;">' + s + '</div>',
            callback: function(action) {
                var input = document.getElementById(id);
                if (callback) return callback(action, input.value);
            }
        });
        var input = document.getElementById(id);
        input.focus();
        return uid;
    },
    loading: function(message, title) {
        return mini.MessageBox.show({
            minHeight: 50,
            title: title,
            showCloseButton: false,
            message: message,
            iconCls: "mini-messagebox-waiting"
        });
    },
    notify: function(title, options) {

    },
    showTips: function(options) {
        var $ = jQuery;

        options = jQuery.extend({
            content: '',
            state: '',
            x: 'center',
            y: 'top',
            offset: [10, 10],
            fixed: true,
            timeout: 3000
        }, options);

        var cls = 'mini-tips-' + options.state;
        var closeHtml = '<button type="button" aria-hidden="true" class="close" data-notify="dismiss" style="position: absolute; right: 5px; top: 5px; font-size: 16px; z-index: 10312;">×</button>';
        var html = '<div class="mini-tips ' + cls + ' alert">' + closeHtml + options.content + '</div>';
        var jq = jQuery(html).appendTo(document.body);
        jq.addClass('animated fadeInDown');
        var removeTips = function() {
            jq.addClass('fadeOutUp');
            setTimeout(function() {
                jq.remove();
            }, 2000);
        }
        jq.on('click', '.close', function() {
            removeTips();
        })
        options.el = jq[0];
        options.timeoutHandler = function() {
            removeTips();
        }

        mini.showAt(options);
        jq.show();
    }
};

mini.toast = mini.MessageBox.toast;
mini.alert = mini.MessageBox.alert;
mini.confirm = mini.MessageBox.confirm;
mini.prompt = mini.MessageBox.prompt;
mini.loading = mini.MessageBox.loading;
mini.showMessageBox = mini.MessageBox.show;
mini.hideMessageBox = mini.MessageBox.hide;
mini.showTips = mini.MessageBox.showTips;



mini.Splitter = function() {
    this._initPanes();
    mini.Splitter.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Splitter, mini.Control, {
    width: 300,
    height: 180,

    vertical: false,
    allowResize: true,

    pane1: null,
    pane2: null,

    showHandleButton: true,
    handlerStyle: "",
    handlerCls: "",





    handlerSize: 5,


    uiCls: "mini-splitter",
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "mini-splitter";
        this.el.innerHTML = '<div class="mini-splitter-border"><div id="1" class="mini-splitter-pane mini-splitter-pane1"></div><div id="2" class="mini-splitter-pane mini-splitter-pane2"></div><div class="mini-splitter-handler"></div></div>';

        this._borderEl = this.el.firstChild;
        this._pane1El = this._borderEl.firstChild;
        this._pane2El = this._borderEl.childNodes[1];
        this._handlerEl = this._borderEl.lastChild;

    },
    _initEvents: function() {
        mini._BindEvents(function() {
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
        }, this);

    },
    _initPanes: function() {
        this.pane1 = {
            id: "",
            index: 1,
            minSize: 10,
            maxSize: 100000,
            size: '',
            showCollapseButton: false,
            cls: "",
            style: "",
            visible: true,
            expanded: true
        };
        this.pane2 = mini.copyTo({}, this.pane1);
        this.pane2.index = 2;
    },
    doUpdate: function() {
        this.doLayout();
    },
    doLayout: function() {
        if (!this.canLayout()) return;

        this._handlerEl.style.cursor = this.allowResize ? "" : "default";

        mini.removeClass(this.el, 'mini-splitter-vertical');
        if (this.vertical) {
            mini.addClass(this.el, 'mini-splitter-vertical');
        }

        mini.removeClass(this._pane1El, 'mini-splitter-pane1-vertical');
        mini.removeClass(this._pane2El, 'mini-splitter-pane2-vertical');
        if (this.vertical) {
            mini.addClass(this._pane1El, 'mini-splitter-pane1-vertical');
            mini.addClass(this._pane2El, 'mini-splitter-pane2-vertical');
        }

        mini.removeClass(this._handlerEl, 'mini-splitter-handler-vertical');
        if (this.vertical) {
            mini.addClass(this._handlerEl, 'mini-splitter-handler-vertical');
        }




        var h = this.getHeight(true);
        var w = this.getWidth(true);

        if (!jQuery.boxModel) {
            var b2 = mini.getBorders(this._borderEl);
            h = h + b2.top + b2.bottom;
            w = w + b2.left + b2.right;
        }
        if (w < 0) w = 0;
        if (h < 0) h = 0;
        this._borderEl.style.width = w + "px";
        this._borderEl.style.height = h + "px";

        var p1 = this._pane1El,
            p2 = this._pane2El;
        var jqP1 = jQuery(p1),
            jqP2 = jQuery(p2);

        p1.style.display = p2.style.display = this._handlerEl.style.display = "";


        var hSize = this.handlerSize;

        this.pane1.size = String(this.pane1.size);
        this.pane2.size = String(this.pane2.size);

        var p1SIZE = parseFloat(this.pane1.size),
            p2SIZE = parseFloat(this.pane2.size);

        var p1Null = isNaN(p1SIZE),
            p2Null = isNaN(p2SIZE);
        var p1Percent = !isNaN(p1SIZE) && this.pane1.size.indexOf("%") != -1;
        var p2Percent = !isNaN(p2SIZE) && this.pane2.size.indexOf("%") != -1;
        var p1Number = !p1Null && !p1Percent;
        var p2Number = !p2Null && !p2Percent;

        var size = this.vertical ? h - this.handlerSize : w - this.handlerSize;
        var p1Size = p2Size = 0;

        if (p1Null || p2Null) {
            if (p1Null && p2Null) {
                p1Size = parseInt(size / 2);
                p2Size = size - p1Size;
            } else if (p1Number) {
                p1Size = p1SIZE;
                p2Size = size - p1Size;
            } else if (p1Percent) {
                p1Size = parseInt(size * p1SIZE / 100);
                p2Size = size - p1Size;
            } else if (p2Number) {
                p2Size = p2SIZE;
                p1Size = size - p2Size;
            } else if (p2Percent) {
                p2Size = parseInt(size * p2SIZE / 100);
                p1Size = size - p2Size;
            }
        } else if (p1Percent && p2Number) {
            p2Size = p2SIZE;
            p1Size = size - p2Size;
        } else if (p1Number && p2Percent) {
            p1Size = p1SIZE;
            p2Size = size - p1Size;
        } else {
            var all = p1SIZE + p2SIZE;
            p1Size = parseInt(size * p1SIZE / all);
            p2Size = size - p1Size;
        }

        if (p1Size > this.pane1.maxSize) {
            p1Size = this.pane1.maxSize;
            p2Size = size - p1Size;
        }
        if (p2Size > this.pane2.maxSize) {
            p2Size = this.pane2.maxSize;
            p1Size = size - p2Size;
        }

        if (p1Size < this.pane1.minSize) {
            p1Size = this.pane1.minSize;
            p2Size = size - p1Size;
        }
        if (p2Size < this.pane2.minSize) {
            p2Size = this.pane2.minSize;
            p1Size = size - p2Size;
        }


        if (this.pane1.expanded == false) {
            p2Size = size;
            p1Size = 0;
            p1.style.display = "none";
        } else if (this.pane2.expanded == false) {
            p1Size = size;
            p2Size = 0;
            p2.style.display = "none";
        }


        if (this.pane1.visible == false) {
            p2Size = size + hSize;
            p1Size = hSize = 0;
            p1.style.display = "none";
            this._handlerEl.style.display = "none";
        } else if (this.pane2.visible == false) {
            p1Size = size + hSize;
            p2Size = hSize = 0;
            p2.style.display = "none";
            this._handlerEl.style.display = "none";
        }

        if (this.vertical) {
            mini.setWidth(p1, w);
            mini.setWidth(p2, w);

            mini.setHeight(p1, p1Size);
            mini.setHeight(p2, p2Size);

            p2.style.top = (p1Size + hSize) + "px";

            this._handlerEl.style.left = "0px";
            this._handlerEl.style.top = p1Size + "px";
            mini.setWidth(this._handlerEl, w);
            mini.setHeight(this._handlerEl, this.handlerSize);

            p1.style.left = "0px";
            p2.style.left = "0px";
        } else {
            mini.setWidth(p1, p1Size);
            mini.setWidth(p2, p2Size);

            mini.setHeight(p1, h);
            mini.setHeight(p2, h);
            p2.style.left = (p1Size + hSize) + "px";

            this._handlerEl.style.top = "0px";
            this._handlerEl.style.left = p1Size + "px";
            mini.setWidth(this._handlerEl, this.handlerSize);
            mini.setHeight(this._handlerEl, h);

            p1.style.top = "0px";
            p2.style.top = "0px";
        }


        var s = '<div class="mini-splitter-handler-buttons">';

        if (!this.pane1.expanded || !this.pane2.expanded) {
            if (!this.pane1.expanded) {
                if (this.pane1.showCollapseButton) {
                    s += '<a id="1" class="mini-splitter-pane2-button" title="' + (this.pane1.collapseTooltip || this.pane1.tooltip || "") + '"></a>';
                }
            } else {
                if (this.pane2.showCollapseButton) {
                    s += '<a id="2" class="mini-splitter-pane1-button" title="' + (this.pane2.collapseTooltip || this.pane2.tooltip || "") + '"></a>';
                }
            }
        } else {
            if (this.pane1.showCollapseButton) {
                s += '<a id="1" class="mini-splitter-pane1-button" title="' + (this.pane1.tooltip || "") + '"></a>';
            }
            if (this.allowResize) {
                if ((!this.pane1.showCollapseButton && !this.pane2.showCollapseButton)) {
                    s += '<span class="mini-splitter-resize-button"></span>';
                }
            }
            if (this.pane2.showCollapseButton) {
                s += '<a id="2" class="mini-splitter-pane2-button" title="' + (this.pane2.tooltip || "") + '"></a>';
            }
        }
        s += '</div>';
        this._handlerEl.innerHTML = s;
        var buttons = this._handlerEl.firstChild;
        buttons.style.display = this.showHandleButton ? "" : "none";
        var box = mini.getBox(buttons);
        if (this.vertical) {
            buttons.style.marginLeft = -box.width / 2 + "px";
        } else {
            buttons.style.marginTop = -box.height / 2 + "px";
        }

        if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded) {
            mini.addClass(this._handlerEl, 'mini-splitter-nodrag');
        } else {
            mini.removeClass(this._handlerEl, 'mini-splitter-nodrag');
        }

        mini.layout(this._borderEl);

        this.fire("layout");
    },

    getPaneBox: function(index) {
        var el = this.getPaneEl(index);
        if (!el) return null;
        return mini.getBox(el);
    },
    getPane: function(index) {
        if (index == 1) return this.pane1;
        else if (index == 2) return this.pane2;
        return index;
    },








    setPanes: function(panes) {
        if (!mini.isArray(panes)) return;
        for (var i = 0; i < 2; i++) {
            var p = panes[i];
            this.updatePane(i + 1, p);
        }
    },
    setPaneControls: function(index, value) {
        var pane = this.getPane(index);
        if (!pane) return;
        var el = this.getPaneEl(index);
        __mini_setControls(value, el, this);
    },
    getPaneEl: function(index) {
        if (index == 1) return this._pane1El;
        return this._pane2El;
    },
    updatePane: function(index, options) {
        var pane = this.getPane(index);
        if (!pane) return;
        mini.copyTo(pane, options);

        var el = this.getPaneEl(index);


        var cs = pane.body;
        delete pane.body;
        if (cs) {
            if (!mini.isArray(cs)) cs = [cs];
            for (var i = 0, l = cs.length; i < l; i++) {
                mini.append(el, cs[i]);
            }
        }


        if (pane.bodyParent) {
            var p = pane.bodyParent;
            while (p.firstChild) {
                el.appendChild(p.firstChild);
            }
        }
        delete pane.bodyParent;

        el.id = pane.id;

        mini.setStyle(el, pane.style);
        mini.addClass(el, pane['class']);
        if (pane.cls) mini.addClass(el, pane.cls);



        if (pane.controls) {
            var index = pane == this.pane1 ? 1 : 2;
            this.setPaneControls(index, pane.controls);
            delete pane.controls;
        }

        this.doUpdate();
    },
    setShowHandleButton: function(value) {
        this.showHandleButton = value;
        this.doUpdate();
    },
    getShowHandleButton: function(value) {
        return this.showHandleButton;
    },
    setVertical: function(value) {
        this.vertical = value;
        this.doUpdate();
    },
    getVertical: function() {
        return this.vertical;
    },
    expandPane: function(index) {
        var pane = this.getPane(index);
        if (!pane) return;
        pane.expanded = true;
        this.doUpdate();
        var e = {
            pane: pane,
            paneIndex: this.pane1 == pane ? 1 : 2
        };
        this.fire("expand", e);
    },
    collapsePane: function(index) {

        var pane = this.getPane(index);
        if (!pane) return;
        pane.expanded = false;
        var pane2 = pane == this.pane1 ? this.pane2 : this.pane1;
        if (pane2.expanded == false) {
            pane2.expanded = true;
            pane2.visible = true;
        }
        this.doUpdate();

        var e = {
            pane: pane,
            paneIndex: this.pane1 == pane ? 1 : 2
        };
        this.fire("collapse", e);
    },
    togglePane: function(index) {
        var pane = this.getPane(index);
        if (!pane) return;
        if (pane.expanded) {
            this.collapsePane(pane);
        } else {
            this.expandPane(pane);
        }
    },
    showPane: function(index) {
        var pane = this.getPane(index);
        if (!pane) return;
        pane.visible = true;
        this.doUpdate();
    },
    hidePane: function(index) {
        var pane = this.getPane(index);
        if (!pane) return;
        pane.visible = false;
        var pane2 = pane == this.pane1 ? this.pane2 : this.pane1;
        if (pane2.visible == false) {
            pane2.expanded = true;
            pane2.visible = true;
        }
        this.doUpdate();
    },
    setAllowResize: function(value) {
        if (this.allowResize != value) {
            this.allowResize = value;
            this.doLayout();
        }
    },
    getAllowResize: function() {
        return this.allowResize;
    },
    setHandlerSize: function(value) {
        if (this.handlerSize != value) {
            this.handlerSize = value;
            this.doLayout();
        }
    },
    getHandlerSize: function() {
        return this.handlerSize;
    },
    __OnClick: function(e) {
        var t = e.target;
        if (!mini.isAncestor(this._handlerEl, t)) return;
        var index = parseInt(t.id);
        var pane = this.getPane(index);

        var e = {
            pane: pane,
            paneIndex: index,
            cancel: false
        };
        if (pane.expanded) {
            this.fire("beforecollapse", e);
        } else {
            this.fire("beforeexpand", e);
        }
        if (e.cancel == true) return;

        if (t.className == "mini-splitter-pane1-button") {
            this.togglePane(index);
        } else if (t.className == "mini-splitter-pane2-button") {
            this.togglePane(index);
        }
    },
    _OnButtonClick: function(pane, htmlEvent) {
        this.fire("buttonclick", {
            pane: pane,
            index: this.pane1 == pane ? 1 : 2,
            htmlEvent: htmlEvent
        });
    },
    onButtonClick: function(fn, scope) {
        this.on("buttonclick", fn, scope);
    },


    __OnMouseDown: function(e) {
        var t = e.target;
        if (!this.allowResize) return;
        if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded) {
            return;
        }
        if (mini.isAncestor(this._handlerEl, t)) {

            if (t.className == "mini-splitter-pane1-button" || t.className == "mini-splitter-pane2-button") {

            } else {
                var drag = this._getDrag();
                drag.start(e);
            }
        }
    },
    _getDrag: function() {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function(drag) {

        this.handlerBox = mini.getBox(this._handlerEl);

        this._maskProxy = mini.append(document.body, '<div class="mini-resizer-mask"></div>');

        this._dragProxy = mini.append(document.body, '<div class="mini-proxy"></div>');
        this._dragProxy.style.cursor = this.vertical ? "n-resize" : "w-resize";


        this.elBox = mini.getBox(this._borderEl, true);
        mini.setBox(this._dragProxy, this.handlerBox);

    },
    _OnDragMove: function(drag) {
        if (!this.handlerBox) return;
        if (!this.elBox) this.elBox = mini.getBox(this._borderEl, true);
        var w = this.elBox.width,
            h = this.elBox.height;
        var hSize = this.handlerSize;
        var size = this.vertical ? h - this.handlerSize : w - this.handlerSize;
        var p1Min = this.pane1.minSize,
            p1Max = this.pane1.maxSize;
        var p2Min = this.pane2.minSize,
            p2Max = this.pane2.maxSize;

        if (this.vertical == true) {
            var yOffset = drag.now[1] - drag.init[1];
            var y = this.handlerBox.y + yOffset;

            if (y - this.elBox.y > p1Max) y = this.elBox.y + p1Max;
            if (y + this.handlerBox.height < this.elBox.bottom - p2Max) {
                y = this.elBox.bottom - p2Max - this.handlerBox.height;
            }

            if (y - this.elBox.y < p1Min) y = this.elBox.y + p1Min;
            if (y + this.handlerBox.height > this.elBox.bottom - p2Min) {
                y = this.elBox.bottom - p2Min - this.handlerBox.height;
            }
            mini.setY(this._dragProxy, y);
        } else {
            var xOffset = drag.now[0] - drag.init[0];
            var x = this.handlerBox.x + xOffset;

            if (x - this.elBox.x > p1Max) x = this.elBox.x + p1Max;
            if (x + this.handlerBox.width < this.elBox.right - p2Max) {
                x = this.elBox.right - p2Max - this.handlerBox.width;
            }

            if (x - this.elBox.x < p1Min) x = this.elBox.x + p1Min;
            if (x + this.handlerBox.width > this.elBox.right - p2Min) {
                x = this.elBox.right - p2Min - this.handlerBox.width;
            }

            mini.setX(this._dragProxy, x);
        }
    },
    _OnDragStop: function(drag) {
        var w = this.elBox.width,
            h = this.elBox.height;
        var hSize = this.handlerSize;

        var p1SIZE = parseFloat(this.pane1.size),
            p2SIZE = parseFloat(this.pane2.size);

        var p1Null = isNaN(p1SIZE),
            p2Null = isNaN(p2SIZE);
        var p1Percent = !isNaN(p1SIZE) && this.pane1.size.indexOf("%") != -1;
        var p2Percent = !isNaN(p2SIZE) && this.pane2.size.indexOf("%") != -1;
        var p1Number = !p1Null && !p1Percent;
        var p2Number = !p2Null && !p2Percent;

        var size = this.vertical ? h - this.handlerSize : w - this.handlerSize;


        var box = mini.getBox(this._dragProxy);
        var p1Size = box.x - this.elBox.x,
            p2Size = size - p1Size;
        if (this.vertical) {
            p1Size = box.y - this.elBox.y;
            p2Size = size - p1Size;
        }

        if (p1Null || p2Null) {
            if (p1Null && p2Null) {
                p1SIZE = parseFloat(p1Size / size * 100).toFixed(1);
                this.pane1.size = p1SIZE + "%";
            } else if (p1Number) {
                p1SIZE = p1Size;
                this.pane1.size = p1SIZE;
            } else if (p1Percent) {
                p1SIZE = parseFloat(p1Size / size * 100).toFixed(1);
                this.pane1.size = p1SIZE + "%";
            } else if (p2Number) {
                p2SIZE = p2Size;
                this.pane2.size = p2SIZE;
            } else if (p2Percent) {
                p2SIZE = parseFloat(p2Size / size * 100).toFixed(1);
                this.pane2.size = p2SIZE + "%";
            }
        } else if (p1Percent && p2Number) {
            this.pane2.size = p2Size;
        } else if (p1Number && p2Percent) {
            this.pane1.size = p1Size;
        } else {
            this.pane1.size = parseFloat(p1Size / size * 100).toFixed(1);
            this.pane2.size = 100 - this.pane1.size;
        }

        jQuery(this._dragProxy).remove();
        jQuery(this._maskProxy).remove();

        this._maskProxy = null;
        this._dragProxy = null;
        this.elBox = this.handlerBox = null;

        this.doLayout();

        this.fire("resize");
    },

    getAttrs: function(el) {
        var attrs = mini.Splitter.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["onexpand", "oncollapse", "onresize"]);
        mini._ParseBool(el, attrs, ["allowResize", "vertical", "showHandleButton"]);
        mini._ParseInt(el, attrs, ["handlerSize"]);



        var panes = [];

        var nodes = mini.getChildNodes(el);
        for (var i = 0, l = 2; i < l; i++) {
            var node = nodes[i];
            var g = jQuery(node);

            var o = {};
            panes.push(o);
            if (!node) continue;
            o.style = node.style.cssText;
            mini._ParseString(node, o, ["cls", "size", "id", "class", "tooltip", "collapseTooltip"]);
            mini._ParseBool(node, o, ["visible", "expanded", "showCollapseButton"]);
            mini._ParseInt(node, o, ["minSize", "maxSize", "handlerSize"]);




            o.bodyParent = node;
        }
        attrs.panes = panes;

        return attrs;
    }

});
mini.regClass(mini.Splitter, "splitter");


mini.Layout = function() {
    this.regions = [];
    this.regionMap = {};
    mini.Layout.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Layout, mini.Control, {

    floatable: true,

    regions: [],
    splitSize: 5,
    collapseWidth: 28,
    collapseHeight: 25,
    regionWidth: 150,
    regionHeight: 80,
    regionMinWidth: 50,
    regionMinHeight: 25,
    regionMaxWidth: 2000,
    regionMaxHeight: 2000,

    splitToolTip: "",

    uiCls: "mini-layout",
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "mini-layout";
        this.el.innerHTML = '<div class="mini-layout-border"></div>';

        this._borderEl = this.el.firstChild;

        this.doUpdate();
    },
    _initEvents: function() {
        mini._BindEvents(function() {
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(this.el, "mouseout", this.__OnMouseOut, this);

            mini.on(document, "mousedown", this.__OnDocMouseDown, this);
        }, this);
    },

    getRegionEl: function(region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._el;
    },
    getRegionHeaderEl: function(region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._header;
    },
    getRegionBodyEl: function(region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._body;
    },
    getRegionSplitEl: function(region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._split
    },
    getRegionProxyEl: function(region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._proxy;
    },
    getRegionBox: function(region) {
        var el = this.getRegionEl(region);
        if (el) return mini.getBox(el);
        return null;
    },
    getRegion: function(region) {
        if (typeof region == "string") return this.regionMap[region];
        return region;
    },
    _getButton: function(region, name) {
        var buttons = region.buttons;
        for (var i = 0, l = buttons.length; i < l; i++) {
            var button = buttons[i];
            if (button.name == name) return button;
        }
    },
    _createRegion: function(options) {

        var region = mini.copyTo({
            region: "",
            title: "",
            iconCls: "",
            iconStyle: "",

            showCloseButton: false,
            showCollapseButton: true,
            buttons: [{
                    name: "close",
                    cls: "mini-tools-close",
                    html: "",
                    visible: false
                },
                {
                    name: "collapse",
                    cls: "mini-tools-collapse",
                    html: "",
                    visible: true
                }
            ],
            showSplitIcon: false,
            showSplit: true,
            splitToolTip: "",
            showHeader: true,
            splitSize: this.splitSize,
            collapseSize: this.collapseWidth,
            width: this.regionWidth,
            height: this.regionHeight,
            minWidth: this.regionMinWidth,
            minHeight: this.regionMinHeight,
            maxWidth: this.regionMaxWidth,
            maxHeight: this.regionMaxHeight,
            allowResize: true,

            showProxy: true,

            showProxyText: false,

            isShowProxyText: function() {
                return this.showProxyText && !mini.isIE6 && !mini.isIE7 && !mini.isIE8;
            },

            cls: "",
            style: "",
            headerCls: "",
            headerStyle: "",
            bodyCls: "",
            bodyStyle: "",

            visible: true,
            expanded: true
        }, options);
        return region;
    },
    _CreateRegionEl: function(region) {
        var region = this.getRegion(region);
        if (!region) return;


        mini.append(this._borderEl, '<div id="' + region.region + '" class="mini-layout-region"><div class="mini-layout-region-header" style="' + region.headerStyle + '"></div><div class="mini-layout-region-body ' + region.bodyCls + '" style="' + region.bodyStyle + '"></div></div>');
        region._el = this._borderEl.lastChild;
        region._header = region._el.firstChild;
        region._body = region._el.lastChild;

        if (region.cls) mini.addClass(region._el, region.cls);
        if (region.style) mini.setStyle(region._el, region.style);
        if (region.headerCls) mini.addClass(region._el.firstChild, region.headerCls);

        mini.addClass(region._el, 'mini-layout-region-' + region.region);


        if (region.region != "center") {
            mini.append(this._borderEl, '<div uid="' + this.uid + '" id="' + region.region + '" class="mini-layout-split"><div class="mini-layout-spliticon" title="' + region.splitToolTip + '"></div></div>');
            region._split = this._borderEl.lastChild;
            mini.addClass(region._split, 'mini-layout-split-' + region.region);
        }


        if (region.region != "center") {
            mini.append(this._borderEl, '<div id="' + region.region + '" class="mini-layout-proxy"></div>');
            region._proxy = this._borderEl.lastChild;
            mini.addClass(region._proxy, 'mini-layout-proxy-' + region.region);


        }

    },
    setRegionControls: function(region, value) {
        var region = this.getRegion(region);
        if (!region) return;
        var el = this.getRegionBodyEl(region);
        __mini_setControls(value, el, this);
    },
    setRegions: function(regions) {
        if (!mini.isArray(regions)) return;
        for (var i = 0, l = regions.length; i < l; i++) {
            this.addRegion(regions[i]);
        }

    },
    addRegion: function(region, index) {
        var r1 = region;
        region = this._createRegion(region);

        if (!region.region) region.region = "center";
        region.region = region.region.toLowerCase();
        if (region.region == "center" && r1 && !r1.showHeader) {
            region.showHeader = false;
        }
        if (region.region == "north" || region.region == "south") {
            if (!r1.collapseSize) {
                region.collapseSize = this.collapseHeight;
            }
        }

        this._measureRegion(region);

        if (typeof index != "number") index = this.regions.length;
        var r = this.regionMap[region.region];
        if (r) {

            return;
        }
        this.regions.insert(index, region);
        this.regionMap[region.region] = region;

        this._CreateRegionEl(region);

        var el = this.getRegionBodyEl(region);


        var cs = region.body;
        delete region.body;
        if (cs) {
            if (!mini.isArray(cs)) cs = [cs];
            for (var i = 0, l = cs.length; i < l; i++) {
                mini.append(el, cs[i]);
            }
        }


        if (region.bodyParent) {
            var p = region.bodyParent;
            while (p.firstChild) {
                var dom = p.firstChild;









                el.appendChild(dom);





            }
        }
        delete region.bodyParent;


        if (region.controls) {
            this.setRegionControls(region, region.controls);
            delete region.controls;
        }

        this.doUpdate();
    },
    removeRegion: function(region) {
        var region = this.getRegion(region);
        if (!region) return;
        this.regions.remove(region);
        delete this.regionMap[region.region];

        jQuery(region._el).remove();
        jQuery(region._split).remove();
        jQuery(region._proxy).remove();

        this.doUpdate();
    },
    moveRegion: function(region, index) {
        var region = this.getRegion(region);
        if (!region) return;
        var t = this.regions[index];
        if (!t || t == region) return;
        this.regions.remove(region);
        var index = this.region.indexOf(t);
        this.regions.insert(index, region);
        this.doUpdate();
    },
    _measureRegion: function(region) {
        var button = this._getButton(region, "close");
        button.visible = region.showCloseButton;
        var button = this._getButton(region, "collapse");
        button.visible = region.showCollapseButton;

        if (region.width < region.minWidth) region.width = region.minWidth;
        if (region.width > region.maxWidth) region.width = region.maxWidth;
        if (region.height < region.minHeight) region.height = region.minHeight;
        if (region.height > region.maxHeight) region.height = region.maxHeight;
    },
    updateRegion: function(region, options) {
        region = this.getRegion(region);
        if (!region) return;
        if (options) delete options.region;
        mini.copyTo(region, options);

        this._measureRegion(region);

        this.doUpdate();
    },
    expandRegion: function(region) {
        region = this.getRegion(region);
        if (!region) return;
        region.expanded = true;
        this.doUpdate();
	this.fire("expand", {
            region: region
        })
    },
    collapseRegion: function(region) {
        region = this.getRegion(region);
        if (!region) return;
        region.expanded = false;
        this.doUpdate();
        this.fire("collapse", {
            region: region
        })
    },
    toggleRegion: function(region) {
        region = this.getRegion(region);
        if (!region) return;
        if (region.expanded) {
            this.collapseRegion(region);
        } else {
            this.expandRegion(region);
        }
    },
    showRegion: function(region) {
        region = this.getRegion(region);
        if (!region) return;
        region.visible = true;
        this.doUpdate();
    },
    hideRegion: function(region) {
        region = this.getRegion(region);
        if (!region) return;
        region.visible = false;
        this.doUpdate();
    },
    isExpandRegion: function(region) {
        region = this.getRegion(region);
        if (!region) return null;
        return region.expanded;
    },
    isVisibleRegion: function(region) {
        region = this.getRegion(region);
        if (!region) return null;
        return region.visible;
    },
    _tryToggleRegion: function(region) {
        region = this.getRegion(region);

        var e = {
            region: region,
            cancel: false
        };
        if (region.expanded) {
            this.fire("BeforeCollapse", e);
            if (e.cancel == false) {
                this.collapseRegion(region);
            }
        } else {
            this.fire("BeforeExpand", e);
            if (e.cancel == false) {
                this.expandRegion(region);
            }
        }
    },

    _getProxyElByEvent: function(e) {
        var el = mini.findParent(e.target, 'mini-layout-proxy');
        return el;
    },
    _getRegionElByEvent: function(e) {
        var el = mini.findParent(e.target, 'mini-layout-region');
        return el;
    },
    __OnClick: function(e) {
        if (this._inAniming) return;
        var proxyEl = this._getProxyElByEvent(e);
        if (proxyEl) {
            var region = proxyEl.id;
            var collapseEl = mini.findParent(e.target, 'mini-tools-collapse');
            if (collapseEl) {
                this._tryToggleRegion(region);
            } else {
                this._VirtualToggle(region);
            }
        }

        var regionEl = this._getRegionElByEvent(e);
        if (regionEl && mini.findParent(e.target, 'mini-layout-region-header')) {
            var region = regionEl.id;
            var collapseEl = mini.findParent(e.target, 'mini-tools-collapse');
            if (collapseEl) {
                this._tryToggleRegion(region);
            }
            var closeEl = mini.findParent(e.target, 'mini-tools-close');
            if (closeEl) {
                this.updateRegion(region, {
                    visible: false
                });
            }
        }
        if (mini.hasClass(e.target, 'mini-layout-spliticon')) {
            var region = e.target.parentNode.id;
            this._tryToggleRegion(region);
        }

    },
    _OnButtonClick: function(region, button, htmlEvent) {
        this.fire("buttonclick", {
            htmlEvent: htmlEvent,
            region: region,
            button: button,
            index: this.buttons.indexOf(button),
            name: button.name
        });
    },
    _OnButtonMouseDown: function(region, button, htmlEvent) {
        this.fire("buttonmousedown", {
            htmlEvent: htmlEvent,
            region: region,
            button: button,
            index: this.buttons.indexOf(button),
            name: button.name
        });
    },
    hoverProxyEl: null,
    __OnMouseOver: function(e) {
        var proxyEl = this._getProxyElByEvent(e);
        if (proxyEl) {
            mini.addClass(proxyEl, 'mini-layout-proxy-hover');
            this.hoverProxyEl = proxyEl;
        }
    },
    __OnMouseOut: function(e) {
        if (this.hoverProxyEl) {
            mini.removeClass(this.hoverProxyEl, 'mini-layout-proxy-hover');
        }
        this.hoverProxyEl = null;
    },

    onButtonClick: function(fn, scope) {
        this.on("buttonclick", fn, scope);
    },
    onButtonMouseDown: function(fn, scope) {
        this.on("buttonmousedown", fn, scope);
    }

});

mini.copyTo(mini.Layout.prototype, {
    _createHeader: function(region, proxy) {
        var s = '<div class="mini-tools">';
        if (proxy) {
            s += '<span class="mini-tools-collapse"></span>';
        } else {
            for (var i = region.buttons.length - 1; i >= 0; i--) {
                var button = region.buttons[i];
                s += '<span class="' + button.cls + '" style="'
                s += button.style + ';' + (button.visible ? "" : "display:none;") + '">' + button.html + '</span>';
            }
        }
        s += '</div>';

        s += '<div class="mini-layout-region-icon ' + region.iconCls + '" style="' + region.iconStyle + ';' + ((region.iconStyle || region.iconCls) ? "" : "display:none;") + '"></div>';
        s += '<div class="mini-layout-region-title">' + region.title + '</div>';
        return s;
    },
    doUpdate: function() {
        for (var i = 0, l = this.regions.length; i < l; i++) {
            var region = this.regions[i];
            var type = region.region;
            var el = region._el,
                split = region._split,
                proxy = region._proxy;

            if (region.cls) mini.addClass(el, region.cls);
            if (region.headerCls) mini.addClass(el.firstChild, region.headerCls);

            region._header.style.display = region.showHeader ? "" : "none";
            region._header.innerHTML = this._createHeader(region);
            if (region._proxy) {


                var html = this._createHeader(region, true);


                if (region.isShowProxyText()) {
                    if (region.region == "west" || region.region == "east") {
                        html += '<div class="mini-layout-proxy-text" >' + region.title + '</div>'
                    }
                }
                region._proxy.innerHTML = html;

            }

            if (split) {
                mini.removeClass(split, 'mini-layout-split-nodrag');
                if (region.expanded == false || !region.allowResize) {
                    mini.addClass(split, 'mini-layout-split-nodrag')
                }
            }

        }

        this.doLayout();
    },
    doLayout: function() {

        if (!this.canLayout()) {

            return;
        }

        if (this._inAniming) {

            return;
        }

        var h = mini.getHeight(this.el, true);
        var w = mini.getWidth(this.el, true);
        var box = {
            x: 0,
            y: 0,
            width: w,
            height: h
        };




        mini.setHeight(this._borderEl, h);


        var regions = this.regions.clone();
        var center = this.getRegion("center");
        regions.remove(center);
        if (center) {
            regions.push(center);
        }

        for (var i = 0, l = regions.length; i < l; i++) {
            var region = regions[i];
            region._Expanded = false;
            mini.removeClass(region._el, "mini-layout-popup");

            var type = region.region;
            var el = region._el,
                split = region._split,
                proxy = region._proxy;
            if (region.visible == false) {
                el.style.display = "none";
                if (type != "center") split.style.display = proxy.style.display = "none";
                continue;
            }

            el.style.display = "";
            if (type != "center") {
                split.style.display = "";
                proxy.style.display = region.showProxy ? '' : 'none';
            }

            var x = box.x,
                y = box.y,
                w = box.width,
                h = box.height;
            var cw = region.width,
                ch = region.height;


            if (!region.expanded) {
                if (type == "west" || type == "east") {
                    cw = mini.getWidth(proxy);

                    mini.setWidth(el, region.width);
                } else if (type == "north" || type == "south") {
                    ch = mini.getHeight(proxy);

                    mini.setHeight(el, region.height);
                }
            }

            switch (type) {
                case "north":
                    h = ch;
                    box.y += ch;
                    box.height -= ch;
                    break;
                case "south":
                    h = ch;
                    y = box.y + box.height - ch;
                    box.height -= ch;
                    break;
                case "west":
                    w = cw;
                    box.x += cw;
                    box.width -= cw;
                    break;
                case "east":
                    w = cw;
                    x = box.x + box.width - cw;
                    box.width -= cw;
                    break;
                case "center":
                    break;
                default:
                    continue;
            }
            if (w < 0) w = 0;
            if (h < 0) h = 0;


            if (type == "west" || type == "east") {
                mini.setHeight(el, h);
            }
            if (type == "north" || type == "south") {
                mini.setWidth(el, w);
            }

            var style = "left:" + x + "px;top:" + y + "px;";
            var d = el;
            if (!region.expanded) {
                d = proxy;
                el.style.top = "-100px";
                el.style.left = "-3000px";
            } else {
                if (proxy) {
                    proxy.style.left = "-3000px";
                    proxy.style.top = "-100px";
                }
            }
            d.style.left = x + "px";
            d.style.top = y + "px";

            if (d == proxy) {
                if (type == "west" || type == "east") {
                    mini.setHeight(d, h);
                }
                if (type == "north" || type == "south") {
                    mini.setWidth(d, w);
                }
            } else {
                mini.setWidth(d, w);
                mini.setHeight(d, h);
            }

            var regionH = jQuery(region._el).height()
            var headerH = region.showHeader ? jQuery(region._header).outerHeight() : 0;
            mini.setHeight(region._body, regionH - headerH);


            if (type == "center") continue;

            cw = ch = region.splitSize;
            var x = box.x,
                y = box.y,
                w = box.width,
                h = box.height;
            switch (type) {
                case "north":
                    h = ch;
                    box.y += ch;
                    box.height -= ch;
                    break;
                case "south":
                    h = ch;
                    y = box.y + box.height - ch;
                    box.height -= ch;
                    break;
                case "west":
                    w = cw;
                    box.x += cw;
                    box.width -= cw;
                    break;
                case "east":
                    w = cw;
                    x = box.x + box.width - cw;
                    box.width -= cw;
                    break;
                case "center":
                    break;
            }
            if (w < 0) w = 0;
            if (h < 0) h = 0;


            split.style.left = x + "px";
            split.style.top = y + "px";
            mini.setWidth(split, w);
            mini.setHeight(split, h);

            if (region.showSplit && region.expanded && region.allowResize == true) {
                mini.removeClass(split, 'mini-layout-split-nodrag');
            } else {
                mini.addClass(split, 'mini-layout-split-nodrag');
            }



            split.firstChild.style.display = region.showSplitIcon ? "block" : "none";
            if (region.expanded) {
                mini.removeClass(split.firstChild, 'mini-layout-spliticon-collapse');
            } else {
                mini.addClass(split.firstChild, 'mini-layout-spliticon-collapse');
            }
        }
        mini.layout(this._borderEl);

        this.fire("layout");
    },


    __OnMouseDown: function(e) {
        if (this._inAniming) return;
        if (mini.findParent(e.target, "mini-layout-split")) {
            var uid = jQuery(e.target).attr("uid");
            if (uid != this.uid) return;
            var region = this.getRegion(e.target.id);
            if (region.expanded == false || !region.allowResize || !region.showSplit) return;
            this.dragRegion = region;
            var drag = this._getDrag();
            drag.start(e);
        }
    },
    _getDrag: function() {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function(drag) {
        this._maskProxy = mini.append(document.body, '<div class="mini-resizer-mask"></div>');

        this._dragProxy = mini.append(document.body, '<div class="mini-proxy"></div>');
        this._dragProxy.style.cursor = "n-resize";
        if (this.dragRegion.region == "west" || this.dragRegion.region == "east") {
            this._dragProxy.style.cursor = "w-resize";
        }

        this.splitBox = mini.getBox(this.dragRegion._split);
        mini.setBox(this._dragProxy, this.splitBox);

        this.elBox = mini.getBox(this.el, true);
    },
    _OnDragMove: function(drag) {
        var xOffset = drag.now[0] - drag.init[0];
        var x = this.splitBox.x + xOffset;
        var yOffset = drag.now[1] - drag.init[1];
        var y = this.splitBox.y + yOffset;
        var right = x + this.splitBox.width;
        var bottom = y + this.splitBox.height;

        var west = this.getRegion("west"),
            east = this.getRegion("east"),
            north = this.getRegion("north"),
            south = this.getRegion("south"),
            center = this.getRegion("center");
        var westWidth = west && west.visible ? west.width : 0;
        var eastWidth = east && east.visible ? east.width : 0;
        var northHeight = north && north.visible ? north.height : 0;
        var southHeight = south && south.visible ? south.height : 0;
        var westSplitWidth = west && west.showSplit ? mini.getWidth(west._split) : 0;
        var eastSplitWidth = east && east.showSplit ? mini.getWidth(east._split) : 0;
        var northSplitHeight = north && north.showSplit ? mini.getHeight(north._split) : 0;
        var southSplitHeight = south && south.showSplit ? mini.getHeight(south._split) : 0;

        var region = this.dragRegion,
            type = region.region;
        if (type == "west") {
            var maxWidth = this.elBox.width - eastWidth - eastSplitWidth - westSplitWidth - center.minWidth;
            if (x - this.elBox.x > maxWidth) x = maxWidth + this.elBox.x;

            if (x - this.elBox.x < region.minWidth) x = region.minWidth + this.elBox.x;
            if (x - this.elBox.x > region.maxWidth) x = region.maxWidth + this.elBox.x;

            mini.setX(this._dragProxy, x);
        } else if (type == "east") {
            var maxWidth = this.elBox.width - westWidth - westSplitWidth - eastSplitWidth - center.minWidth;
            if (this.elBox.right - (x + this.splitBox.width) > maxWidth) {
                x = this.elBox.right - maxWidth - this.splitBox.width;
            }

            if (this.elBox.right - (x + this.splitBox.width) < region.minWidth) {
                x = this.elBox.right - region.minWidth - this.splitBox.width;
            }
            if (this.elBox.right - (x + this.splitBox.width) > region.maxWidth) {
                x = this.elBox.right - region.maxWidth - this.splitBox.width;
            }

            mini.setX(this._dragProxy, x);
        } else if (type == "north") {
            var maxHeight = this.elBox.height - southHeight - southSplitHeight - northSplitHeight - center.minHeight;
            if (y - this.elBox.y > maxHeight) y = maxHeight + this.elBox.y;

            if (y - this.elBox.y < region.minHeight) y = region.minHeight + this.elBox.y;
            if (y - this.elBox.y > region.maxHeight) y = region.maxHeight + this.elBox.y;

            mini.setY(this._dragProxy, y);
        } else if (type == "south") {
            var maxHeight = this.elBox.height - northHeight - northSplitHeight - southSplitHeight - center.minHeight;
            if (this.elBox.bottom - (y + this.splitBox.height) > maxHeight) {
                y = this.elBox.bottom - maxHeight - this.splitBox.height;
            }

            if (this.elBox.bottom - (y + this.splitBox.height) < region.minHeight) {
                y = this.elBox.bottom - region.minHeight - this.splitBox.height;
            }
            if (this.elBox.bottom - (y + this.splitBox.height) > region.maxHeight) {
                y = this.elBox.bottom - region.maxHeight - this.splitBox.height;
            }

            mini.setY(this._dragProxy, y);
        }
    },
    _OnDragStop: function(drag) {
        var box = mini.getBox(this._dragProxy);

        var region = this.dragRegion,
            type = region.region;
        if (type == "west") {
            var width = box.x - this.elBox.x;
            this.updateRegion(region, {
                width: width
            });
        } else if (type == "east") {
            var width = this.elBox.right - box.right;
            this.updateRegion(region, {
                width: width
            });
        } else if (type == "north") {
            var height = box.y - this.elBox.y;
            this.updateRegion(region, {
                height: height
            });
        } else if (type == "south") {
            var height = this.elBox.bottom - box.bottom;
            this.updateRegion(region, {
                height: height
            });
        }

        jQuery(this._dragProxy).remove();
        this._dragProxy = null;
        this.elBox = this.handlerBox = null;

        jQuery(this._maskProxy).remove();
        this._maskProxy = null;
    },


    _VirtualToggle: function(region) {
        if (!this.floatable) return;

        region = this.getRegion(region);

        if (region._Expanded === true) {
            this._VirtualCollapse(region);
        } else {
            this._VirtualExpand(region);
        }
    },
    _VirtualExpand: function(region) {
        if (this._inAniming) return;

        this.doLayout();

        var type = region.region,
            el = region._el;
        region._Expanded = true;
        mini.addClass(el, "mini-layout-popup");
        var proxyBox = mini.getBox(region._proxy);
        var box = mini.getBox(region._el);

        var config = {};
        if (type == "east") {
            var x = proxyBox.x;
            var y = proxyBox.y;
            var h = proxyBox.height;

            mini.setHeight(el, h);
            mini.setX(el, x);
            el.style.top = region._proxy.style.top;

            var left = parseInt(el.style.left);
            config = {
                left: left - box.width
            };
        } else if (type == "west") {
            var x = proxyBox.right - box.width;
            var y = proxyBox.y;
            var h = proxyBox.height;

            mini.setHeight(el, h);
            mini.setX(el, x);
            el.style.top = region._proxy.style.top;


            var left = parseInt(el.style.left);
            config = {
                left: left + box.width
            };
        } else if (type == "north") {
            var x = proxyBox.x;
            var y = proxyBox.bottom - box.height;
            var w = proxyBox.width;

            mini.setWidth(el, w);
            mini.setXY(el, x, y);

            var top = parseInt(el.style.top);
            config = {
                top: top + box.height
            };
        } else if (type == "south") {
            var x = proxyBox.x;
            var y = proxyBox.y;
            var w = proxyBox.width;

            mini.setWidth(el, w);
            mini.setXY(el, x, y);

            var top = parseInt(el.style.top);
            config = {
                top: top - box.height
            };
        }

        mini.addClass(region._proxy, "mini-layout-maxZIndex");
        this._inAniming = true;
        var sf = this;
        var jq = jQuery(el);
        jq.animate(
            config,
            250,
            function() {
                mini.removeClass(region._proxy, "mini-layout-maxZIndex");
                sf._inAniming = false;
            }
        );
    },
    _VirtualCollapse: function(region) {

        if (this._inAniming) return;
        region._Expanded = false;
        var type = region.region,
            el = region._el;

        var box = mini.getBox(el);

        var config = {};
        if (type == "east") {
            var left = parseInt(el.style.left);
            config = {
                left: left + box.width
            };
        } else if (type == "west") {
            var left = parseInt(el.style.left);
            config = {
                left: left - box.width
            };
        } else if (type == "north") {
            var top = parseInt(el.style.top);
            config = {
                top: top - box.height
            };
        } else if (type == "south") {
            var top = parseInt(el.style.top);
            config = {
                top: top + box.height
            };
        }

        mini.addClass(region._proxy, "mini-layout-maxZIndex");
        this._inAniming = true;
        var sf = this;
        var jq = jQuery(el);
        jq.animate(
            config,
            250,
            function() {
                mini.removeClass(region._proxy, "mini-layout-maxZIndex");
                sf._inAniming = false;
                sf.doLayout();
            }
        );
    },
    __OnDocMouseDown: function(e) {

        if (this._inAniming) return;

        for (var i = 0, l = this.regions.length; i < l; i++) {
            var region = this.regions[i];
            if (!region._Expanded) continue;
            if (mini.isAncestor(region._el, e.target) ||
                mini.isAncestor(region._proxy, e.target)

            ) {

            } else {
                this._VirtualCollapse(region);
            }
        }
    },

    getAttrs: function(el) {
        var attrs = mini.Layout.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseBool(el, attrs, ["floatable"]);

        var splitSize = parseInt(jq.attr("splitSize"));
        if (!isNaN(splitSize)) {
            attrs.splitSize = splitSize;
        }

        var regions = [];
        var nodes = mini.getChildNodes(el);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            var o = {};
            regions.push(o);

            o.cls = node.className;

            o.style = node.style.cssText;
            mini._ParseString(node, o, ["region", "title", "iconCls", "iconStyle", "cls", "headerCls", "headerStyle",
                "bodyCls", "bodyStyle", "splitToolTip"
            ]);
            mini._ParseBool(node, o, ["allowResize", "visible", "showCloseButton", "showCollapseButton", "showSplit", "showHeader", "expanded",
                "showSplitIcon", "showProxyText", "showProxy"
            ]);
            mini._ParseInt(node, o, ["splitSize", "collapseSize", "width", "height", "minWidth", "minHeight", "maxWidth", "maxHeight"]);



            o.bodyParent = node;
        }
        attrs.regions = regions;

        return attrs;
    }
});
mini.regClass(mini.Layout, "layout");


mini.Box = function() {
    mini.Box.superclass.constructor.apply(this, arguments);


}
mini.extend(mini.Box, mini.Container, {

    style: "",
    borderStyle: "",
    bodyStyle: "",

    uiCls: "mini-box",
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "mini-box";
        this.el.innerHTML = '<div class="mini-box-border"></div>';
        this._bodyEl = this._borderEl = this.el.firstChild;

        this._contentEl = this._bodyEl;
    },
    _initEvents: function() {

    },
    doLayout: function() {
        if (!this.canLayout()) return;


        var autoHeight = this.isAutoHeight();
        var autoWidth = this.isAutoWidth();

        var padding = mini.getPaddings(this._bodyEl);
        var margin = mini.getMargins(this._bodyEl);

        if (!autoHeight) {

            var h = this.getHeight(true);
            if (jQuery.boxModel) {

                h = h - padding.top - padding.bottom;
            }
            h = h - margin.top - margin.bottom;
            if (h < 0) h = 0;
            this._bodyEl.style.height = h + "px";
        } else {
            this._bodyEl.style.height = "";
        }

        var w = this.getWidth(true);
        var elWidth = w;
        w = w - margin.left - margin.right;
        if (jQuery.boxModel) {
            w = w - padding.left - padding.right;
        }
        if (w < 0) w = 0;
        this._bodyEl.style.width = w + "px";


        mini.layout(this._borderEl);

        this.fire("layout");
    },
    setBody: function(value) {
        if (!value) return;
        if (!mini.isArray(value)) value = [value];
        for (var i = 0, l = value.length; i < l; i++) {
            mini.append(this._bodyEl, value[i]);
        }
        mini.parse(this._bodyEl);
        this.doLayout();
    },
    set_bodyParent: function(value) {

        if (!value) return;

        var el = this._bodyEl;

        var p = value;
        while (p.firstChild) {
            el.appendChild(p.firstChild);
        }
        this.doLayout();
    },
    setBodyStyle: function(value) {
        mini.setStyle(this._bodyEl, value);
        this.doLayout();
    },


    getAttrs: function(el) {
        var attrs = mini.Box.superclass.getAttrs.call(this, el);


        attrs._bodyParent = el;

        mini._ParseString(el, attrs, ["bodyStyle"]);

        return attrs;
    }
});
mini.regClass(mini.Box, "box");


mini.Include = function() {
    mini.Include.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Include, mini.Control, {

    url: "",


    uiCls: "mini-include",
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "mini-include";
    },
    _initEvents: function() {

    },
    doLayout: function() {
        if (!this.canLayout()) return;

        var cs = this.el.childNodes;
        if (cs) {
            for (var i = 0, l = cs.length; i < l; i++) {
                var cel = cs[i];
                mini.layout(cel);
            }
        }
    },
    setUrl: function(value) {
        this.url = value;
        mini.update({
            url: this.url,
            el: this.el,
            async: this.async
        });

        this.doLayout();
    },
    getUrl: function(value) {
        return this.url;
    },







    getAttrs: function(el) {
        var attrs = mini.Include.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["url"]);

        return attrs;
    }
});
mini.regClass(mini.Include, "include");


mini.Tabs = function() {
    this._initTabs();
    mini.Tabs.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Tabs, mini.Control, {
    activeIndex: -1,
    tabAlign: "left",
    tabPosition: "top",
    showBody: true,
    showHeader: true,

    nameField: "name",
    titleField: "title",
    urlField: "url",

    url: "",
    maskOnLoad: true,



    plain: true,





    bodyStyle: "",

    _tabHoverCls: "mini-tab-hover",
    _tabActiveCls: "mini-tab-active",

    set: function(obj) {
        if (typeof obj == 'string') {
            return this;
        }



        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var activeIndex = obj.activeIndex;
        delete obj.activeIndex;

        var url = obj.url;
        delete obj.url;

        mini.Tabs.superclass.set.call(this, obj);

        if (url) {
            this.setUrl(url);
        }
        if (mini.isNumber(activeIndex)) {
            this.setActiveIndex(activeIndex);
        }

        this._allowLayout = _allowLayout;
        this.doLayout();

        return this;
    },

    uiCls: "mini-tabs",
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "mini-tabs";

        var s = '<table class="mini-tabs-table" cellspacing="0" cellpadding="0"><tr style="width:100%;">' +
            '<td></td>' +
            '<td style="text-align:left;vertical-align:top;width:100%;"><div class="mini-tabs-bodys"></div></td>' +
            '<td></td>' +
            '</tr></table>';
        this.el.innerHTML = s;
        this._tableEl = this.el.firstChild;

        var tds = this.el.getElementsByTagName("td");
        this._td1El = tds[0];
        this._td2El = tds[1];
        this._td3El = tds[2];

        this._bodyEl = this._td2El.firstChild;
        this._borderEl = this._bodyEl;
        this.doUpdate();
    },
    destroy: function(removeEl) {

        if (this.tabs) {
            for (var i = 0, l = this.tabs.length; i < l; i++) {
                var tab = this.tabs[i];

                tab._iframeEl = null;
            }
        }

        this._tableEl = this._td1El = this._td2El = this._td3El = null;
        this._bodyEl = this._borderEl = this.headerEl = null;
        this.tabs = null;
        mini.Tabs.superclass.destroy.call(this, removeEl);
    },









    _doClearElement: function() {
        mini.removeClass(this._td1El, "mini-tabs-header");
        mini.removeClass(this._td3El, "mini-tabs-header");
        this._td1El.innerHTML = '';
        this._td3El.innerHTML = '';

        mini.removeChilds(this._td2El, this._bodyEl);
    },
    _initEvents: function() {
        mini._BindEvents(function() {
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(this.el, "mouseout", this.__OnMouseOut, this);
            mini.on(this.el, "dblclick", this.__OnDblClick, this);
        }, this);

    },

    _initTabs: function() {
        this.tabs = [];
    },
    _TabID: 1,

    createTab: function(options) {
        var tab = mini.copyTo({
            _id: this._TabID++,
            callwinid: mini._WindowID,
            selfwinid: '',
            name: "",
            title: "",

            newLine: false,

            tooltip: "",

            iconCls: "",
            iconStyle: "",
            headerCls: "",
            headerStyle: "",
            bodyCls: "",
            bodyStyle: "",

            visible: true,
            enabled: true,
            showCloseButton: false,
            active: false,

            url: "",
            loaded: false,
            refreshOnClick: false

        }, options);
        if (options) {
            options = mini.copyTo(options, tab);
            tab = options;
        }
        return tab;
    },

    _doLoad: function() {

        var tabs = mini._getResult(this.url, null, null, null, null, this.dataField);

        if (this.dataField && !mini.isArray(tabs)) {
            tabs = mini._getMap(this.dataField, tabs);
        }
        if (!tabs) tabs = [];


        this.setTabs(tabs);
        this.fire("load");
    },

    load: function(url) {
        if (typeof url == "string") {
            this.setUrl(url);
        } else {
            this.setTabs(url);
        }
    },









    setUrl: function(value) {
        this.url = value;

        this._doLoad();
    },
    getUrl: function() {
        return this.url;
    },

    setNameField: function(value) {
        this.nameField = value;
    },
    getNameField: function() {
        return this.nameField;
    },
    setTitleField: function(value) {
        this.titleField = value;
    },
    getTitleField: function() {
        return this.titleField;
    },
    setUrlField: function(value) {
        this.urlField = value;
    },
    getUrlField: function() {
        return this.urlField;
    },

    buttonsAlign: "right",
    setButtonsAlign: function(value) {
        this.buttonsAlign = value;
    },
    getButtonsAlign: function() {
        return this.buttonsAlign;
    },

    setButtons: function(value) {
        this._buttons = mini.byId(value);
        if (this._buttons) {
            var el = mini.byClass('mini-tabs-buttons', this.el);
            if (el) {

                el.appendChild(this._buttons);
                mini.parse(el);
                this.doLayout();
            }
        }
    },
    setTabControls: function(tab, value) {
        var tab = this.getTab(tab);
        if (!tab) return;
        var el = this.getTabBodyEl(tab);
        __mini_setControls(value, el, this);
    },
    setTabs: function(tabs) {
        if (!mini.isArray(tabs)) return;
        this.beginUpdate();

        this.removeAll();


        for (var i = 0, l = tabs.length; i < l; i++) {
            var tab = tabs[i];
            tab.title = mini._getMap(this.titleField, tab);
            tab.url = mini._getMap(this.urlField, tab);
            tab.name = mini._getMap(this.nameField, tab);
        }

        for (var i = 0, l = tabs.length; i < l; i++) {
            this.addTab(tabs[i]);
        }
        this.setActiveIndex(0);
        this.endUpdate();
    },
    getTabs: function() {
        return this.tabs;
    },
    removeAll: function(butTabs) {
        var activeTab = this.getActiveTab();
        if (mini.isNull(butTabs)) butTabs = [];
        if (!mini.isArray(butTabs)) {
            butTabs = [butTabs];
        }
        for (var i = butTabs.length - 1; i >= 0; i--) {
            var t = this.getTab(butTabs[i]);
            if (!t) butTabs.removeAt(i);
            else butTabs[i] = t;
        }

        var olds = this.tabs;
        for (var i = olds.length - 1; i >= 0; i--) {
            var tab = olds[i];
            if (butTabs.indexOf(tab) == -1) {
                this.removeTab(tab);
            }
        }
        var butTab = butTabs[0];
        if (activeTab != this.getActiveTab()) {
            if (butTab) this.activeTab(butTab);
        }
    },
    addTab: function(tab, index) {
        if (typeof tab == "string") {
            tab = {
                title: tab
            };
        }
        tab = this.createTab(tab);
        if (!tab.name) tab.name = "";


        var activeTab = this.getActiveTab();

        if (typeof index != "number") index = this.tabs.length;
        this.tabs.insert(index, tab);


        if (activeTab) this.activeIndex = this.tabs.indexOf(activeTab);


        var bodyId = this._createTabBodyId(tab);
        var s = '<div id="' + bodyId + '" class="mini-tabs-body ' + tab.bodyCls + '" style="' + tab.bodyStyle + ';display:none;"></div>';
        mini.append(this._bodyEl, s);

        var el = this.getTabBodyEl(tab);


        var cs = tab.body;
        delete tab.body;
        if (cs) {

            if (!mini.isArray(cs)) cs = [cs];
            for (var i = 0, l = cs.length; i < l; i++) {
                mini.append(el, cs[i]);
            }
        }


        if (tab.bodyParent) {
            var p = tab.bodyParent;

            while (p.firstChild) {
                if (p.firstChild.nodeType == 8) {
                    p.removeChild(p.firstChild);
                } else {
                    el.appendChild(p.firstChild);
                }
            }
        }
        delete tab.bodyParent;


        if (tab.controls) {
            this.setTabControls(tab, tab.controls);
            delete tab.controls;
        }

        this.doUpdate();
        return tab;
    },
    removeTab: function(tab) {

        tab = this.getTab(tab);
        if (!tab || this.tabs.indexOf(tab) == -1) return;


        var acTab = this.getActiveTab();

        var isActive = tab == acTab;

        var autoActive = this._OnTabDestroy(tab);

        this.tabs.remove(tab);


        this._doRemoveIFrame(tab);

        var el = this.getTabBodyEl(tab);
        if (el) this._bodyEl.removeChild(el);


        if (autoActive && isActive) {
            for (var i = this.activeIndex; i >= 0; i--) {
                var tab = this.getTab(i);
                if (tab && tab.enabled && tab.visible) {
                    this.activeIndex = i;
                    break;
                }
            }
            this.doUpdate();
            this.setActiveIndex(this.activeIndex);
            this.fire("activechanged");
        } else {
            this.activeIndex = this.tabs.indexOf(acTab);
            this.doUpdate();
        }
        return tab;
    },
    moveTab: function(tab, index) {
        tab = this.getTab(tab);
        if (!tab) return;

        var t = this.tabs[index];
        if (t == tab) return;

        this.tabs.remove(tab);
        var index = this.tabs.indexOf(t);
        if (index == -1) {
            this.tabs.add(tab);
        } else {
            this.tabs.insert(index, tab);
        }
        this.doUpdate();
    },
    updateTab: function(tab, options) {
        tab = this.getTab(tab);
        if (!tab) return;
        mini.copyTo(tab, options);

        if (!tab.visible && this.tabs.indexOf(tab) == this.activeIndex) {
            var activeIndex = -1;
            for (var i = this.activeIndex + 1, l = this.tabs.length; i < l; i++) {
                var item = this.tabs[i];
                if (item.visible) {
                    activeIndex = i;
                    break;
                }
            }
            this.setActiveIndex(activeIndex)
        }

        this.doUpdate();
    },

    _getMaskWrapEl: function() {
        return this._bodyEl;
    },
    _doRemoveIFrame: function(tab, removeAll) {



        if (tab._iframeEl && tab._iframeEl.parentNode) {
            var iframe = tab._iframeEl;

            iframe.onload = function() {};
            jQuery(iframe).off("load");

            iframe.src = "";
            if (mini.isIE) {
                try {
                    iframe.contentWindow.document.write("");
                    iframe.contentWindow.document.close();
                } catch (ex) {}
            }
            if (tab._iframeEl._ondestroy) tab._iframeEl._ondestroy();

            try {
                iframe.parentNode.removeChild(iframe);
                iframe.removeNode(true);
            } catch (ex) {}
        }

        tab._iframeEl = null;
        tab.loadedUrl = null;


        if (removeAll === true) {
            var bodyEl = this.getTabBodyEl(tab);
            if (bodyEl) {
                var cs = mini.getChildNodes(bodyEl, true);
                for (var i = 0, l = cs.length; i < l; i++) {
                    var d = cs[i];
                    if (d && d.parentNode) d.parentNode.removeChild(d);

                }
            }
        }
    },
    _deferLoadingTime: 180,
    _cancelLoadTabs: function(tab) {

        var tabs = this.tabs;
        for (var i = 0, l = tabs.length; i < l; i++) {
            var t = tabs[i];
            if (t != tab) {
                if (t._loading && t._iframeEl) {
                    t._loading = false;
                    this._doRemoveIFrame(t, true);
                }
            }
        }
        if (tab && tab == this.getActiveTab() && tab._loading) {} else {
            this._loading = false;
            this.unmask();
        }
    },
    _doLoadTab: function(tab) {
        if (!tab || tab != this.getActiveTab()) return;
        var bodyEl = this.getTabBodyEl(tab);
        if (!bodyEl) return;

        this._cancelLoadTabs();

        this._doRemoveIFrame(tab, true);

        this._loading = true;
        tab._loading = true;


        this.unmask();
        if (this.maskOnLoad) this.loading();
        var st = new Date();

        var sf = this;


        sf.isLoading = true;




        var iframe = mini.createIFrame(tab.url,
            function(_iframe, firstLoad) {

                try {
                    tab._iframeEl.contentWindow.Owner = window;
                    tab._iframeEl.contentWindow.CloseOwnerWindow = function(action) {

                        tab.removeAction = action;

                        var ret = true;
                        if (tab.ondestroy) {
                            if (typeof tab.ondestroy == "string") {
                                tab.ondestroy = window[tab.ondestroy];
                            }

                            if (tab.ondestroy) {
                                var e = sf._getTabEvent(tab);
                                e.action = action;
                                ret = tab.ondestroy.call(sf, e);
                            }
                        }

                        if (ret === false) {
                            return false;
                        }

                        setTimeout(function() {
                            sf.removeTab(tab);
                        }, 10);
                    }
                    tab.selfwinid = tab._iframeEl.contentWindow.mini._WindowID;
                } catch (e) {}

                if (tab._loading != true) return;
                var t = (st - new Date()) + sf._deferLoadingTime;

                tab._loading = false;
                tab.loadedUrl = tab.url;

                if (t < 0) t = 0;
                setTimeout(function() {
                    sf.unmask();
                    sf.doLayout();
                    sf.isLoading = false;
                }, t);


                if (firstLoad) {
                    var e = {
                        sender: sf,
                        tab: tab,
                        index: sf.tabs.indexOf(tab),
                        name: tab.name,
                        iframe: tab._iframeEl
                    };
                    if (tab.onload) {
                        if (typeof tab.onload == "string") {
                            tab.onload = window[tab.onload];
                        }
                        if (tab.onload) {
                            tab.onload.call(sf, e);
                        }
                    }
                }
                if (sf.getActiveTab() == tab) {
                    sf.fire("tabload", e);
                }
            },
            this.clearTimeStamp, tab.method, tab.params
        );
        setTimeout(function() {
            if (tab._iframeEl == iframe) {
                bodyEl.appendChild(iframe);
            }

        }, 1);
        tab._iframeEl = iframe;
    },
    _getTabEvent: function(tab) {
        var e = {
            sender: this,
            tab: tab,
            index: this.tabs.indexOf(tab),
            name: tab.name,
            iframe: tab._iframeEl,
            autoActive: true
        };
        return e;
    },
    _OnTabDestroy: function(tab) {








        var e = this._getTabEvent(tab);
        this.fire("tabdestroy", e);
        return e.autoActive;
    },

    loadTab: function(url, tab, onload, ondestroy) {
        if (!url) return;
        tab = this.getTab(tab);
        if (!tab) tab = this.getActiveTab();
        if (!tab) return;

        var el = this.getTabBodyEl(tab);
        if (el) {
            mini.addClass(el, 'mini-tabs-hideOverflow');
        }

        tab.url = url;
        delete tab.loadedUrl;

        if (onload) tab.onload = onload;
        if (ondestroy) tab.ondestroy = ondestroy;

        var me = this;
        clearTimeout(this._loadTabTimer);
        this._loadTabTimer = null;
        this._loadTabTimer = setTimeout(function() {
            me._doLoadTab(tab);
        }, 1);
    },
    reloadTab: function(tab) {
        tab = this.getTab(tab);
        if (!tab) tab = this.getActiveTab();
        if (!tab) return;
        this.loadTab(tab.url, tab);
    },

    getTabRows: function() {
        var rows = [];
        var row = [];
        for (var i = 0, l = this.tabs.length; i < l; i++) {
            var tab = this.tabs[i];
            if (i != 0 && tab.newLine) {
                rows.push(row);
                row = [];
            }
            row.push(tab);
        }
        rows.push(row);
        return rows;
    },
    doUpdate: function() {

        if (this._allowUpdate === false) return;

        if (this._buttons && this._buttons.parentNode) {
            this._buttons.parentNode.removeChild(this._buttons);
        }



        mini.removeClass(this.el, "mini-tabs-position-left");
        mini.removeClass(this.el, "mini-tabs-position-top");
        mini.removeClass(this.el, "mini-tabs-position-right");
        mini.removeClass(this.el, "mini-tabs-position-bottom");

        if (this.tabPosition == "bottom") {
            mini.addClass(this.el, "mini-tabs-position-bottom");
            this._doUpdateBottom();
        } else if (this.tabPosition == "right") {
            mini.addClass(this.el, "mini-tabs-position-right");
            this._doUpdateRight();
        } else if (this.tabPosition == "left") {
            mini.addClass(this.el, "mini-tabs-position-left");
            this._doUpdateLeft();
        } else {
            mini.addClass(this.el, "mini-tabs-position-top");
            this._doUpdateTop();
        }


        var el = this._headerEl,
            cls = "mini-tabs-header-";
        mini.removeClass(el, cls + "left");
        mini.removeClass(el, cls + "top");
        mini.removeClass(el, cls + "right");
        mini.removeClass(el, cls + "bottom");
        mini.addClass(el, cls + this.tabPosition);



        var el = this._bodyEl,
            cls = "mini-tabs-body-";
        mini.removeClass(el, cls + "left");
        mini.removeClass(el, cls + "top");
        mini.removeClass(el, cls + "right");
        mini.removeClass(el, cls + "bottom");
        mini.addClass(el, cls + this.tabPosition);


        if (this._buttons) {
            var el = mini.byClass('mini-tabs-buttons', this.el);
            if (el) {
                el.appendChild(this._buttons);
                mini.parse(el);
            }
        }

        this.doLayout();

        this.setActiveIndex(this.activeIndex, false);
    },
    _handleIFrameOverflow: function() {

        var bodyEl = this.getTabBodyEl(this.activeIndex);
        if (bodyEl) {
            mini.removeClass(bodyEl, 'mini-tabs-hideOverflow');
            var dom = mini.getChildNodes(bodyEl)[0];

            if (dom && dom.tagName && dom.tagName.toUpperCase() == "IFRAME") {
                mini.addClass(bodyEl, 'mini-tabs-hideOverflow');
            }

        }
    },
    doLayout: function() {

        var me = this,
            headerEl = me._headerEl,
            bodyEl = me._bodyEl,
            tabPosition = me.tabPosition;


        if (!this.canLayout()) return;

        headerEl.style.display = this.showHeader ? "" : "none";

        this._handleIFrameOverflow();


        var autoHeight = this.isAutoHeight();



        h = this.getHeight(true);
        w = this.getWidth();
        var elHeight = h;
        var elWidth = w;

        if (this.showBody) {
            bodyEl.style.display = "";
        } else {
            bodyEl.style.display = "none";
        }

        var plainEl = this.el.firstChild;
        if (this.plain) {
            mini.addClass(plainEl, "mini-tabs-plain");
        } else {
            mini.removeClass(plainEl, "mini-tabs-plain");
        }


        if (!autoHeight && this.showBody) {

            var headerHeight = jQuery(headerEl).outerHeight();
            var headerWidth = jQuery(headerEl).outerWidth();
            if (tabPosition == "top" || tabPosition == "bottom") {
                headerHeight = jQuery(headerEl.parentNode).outerHeight();


                headerHeight -= 1;
            }

            if (tabPosition == "left" || tabPosition == "right") {
                w = w - headerWidth;
            } else {
                h = h - headerHeight;
            }

            if (jQuery.boxModel) {
                var padding = mini.getPaddings(bodyEl);
                var border = mini.getBorders(bodyEl);

                h = h - padding.top - padding.bottom - border.top - border.bottom;
                w = w - padding.left - padding.right - border.left - border.right;
            }
            margin = mini.getMargins(bodyEl);

            h = h - margin.top - margin.bottom;
            w = w - margin.left - margin.right;



            if (h < 0) h = 0;
            if (w < 0) w = 0;

            bodyEl.style.width = w + "px";
            bodyEl.style.height = h + "px";


            if (tabPosition == "left" || tabPosition == "right") {




                var tr = headerEl.getElementsByTagName("tr")[0];
                var tds = tr.childNodes;
                var trs = tds[0].getElementsByTagName("tr");

                var first = last = all = 0;
                for (var i = 0, l = trs.length; i < l; i++) {
                    var tr = trs[i];
                    var trH = jQuery(tr).outerHeight();
                    all += trH;
                    if (i == 0) first = trH;
                    if (i == l - 1) last = trH;
                }

                switch (this.tabAlign) {
                    case "center":
                        var halfH = parseInt((elHeight - (all - first - last)) / 2);
                        for (var i = 0, l = tds.length; i < l; i++) {
                            tds[i].firstChild.style.height = elHeight + "px";
                            var tb = tds[i].firstChild;
                            var trs = tb.getElementsByTagName("tr");
                            var tr1 = trs[0],
                                tr2 = trs[trs.length - 1];
                            tr1.style.height = halfH + "px";
                            tr2.style.height = halfH + "px";
                        }
                        break;
                    case "right":
                        for (var i = 0, l = tds.length; i < l; i++) {
                            var tb = tds[i].firstChild;
                            var trs = tb.getElementsByTagName("tr");
                            var tr = trs[0];

                            var size = elHeight - (all - first);
                            if (size >= 0) {
                                tr.style.height = size + "px";
                            }
                        }
                        break;
                    case "fit":
                        for (var i = 0, l = tds.length; i < l; i++) {
                            tds[i].firstChild.style.height = elHeight + "px";;
                        }
                        break;
                    default:
                        for (var i = 0, l = tds.length; i < l; i++) {
                            var tb = tds[i].firstChild;
                            var trs = tb.getElementsByTagName("tr");
                            var tr = trs[trs.length - 1];
                            var size = elHeight - (all - last);
                            if (size >= 0) {
                                tr.style.height = size + "px";
                            }
                        }
                        break;
                }
            }
        } else {
            bodyEl.style.width = "auto";
            bodyEl.style.height = "auto";
        }


        var tabBodyEl = this.getTabBodyEl(this.activeIndex);
        if (tabBodyEl) {
            if (!autoHeight && this.showBody) {
                var h = mini.getHeight(bodyEl, true);
                if (jQuery.boxModel) {
                    var padding = mini.getPaddings(tabBodyEl);
                    var border = mini.getBorders(tabBodyEl);
                    h = h - padding.top - padding.bottom - border.top - border.bottom;
                }
                tabBodyEl.style.height = h + "px";
            } else {
                tabBodyEl.style.height = "auto";
            }
        }

        switch (tabPosition) {
            case "bottom":
                var hds = headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    mini.removeClass(tb, "mini-tabs-header2");
                    if (l > 1 && i != 0) {

                        mini.addClass(tb, "mini-tabs-header2");
                    }
                }
                break;
            case "left":



                var tds = headerEl.firstChild.rows[0].cells;
                for (var i = 0, l = tds.length; i < l; i++) {
                    var td = tds[i];
                    mini.removeClass(td, "mini-tabs-header2");
                    if (l > 1 && i == 0) {
                        mini.addClass(td, "mini-tabs-header2");
                    }
                }
                break;
            case "right":



                var tds = headerEl.firstChild.rows[0].cells;
                for (var i = 0, l = tds.length; i < l; i++) {
                    var td = tds[i];
                    mini.removeClass(td, "mini-tabs-header2");
                    if (l > 1 && i != 0) {
                        mini.addClass(td, "mini-tabs-header2");
                    }
                }
                break;
            default:
                var hds = headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    mini.removeClass(tb, "mini-tabs-header2");
                    if (l > 1 && i == 0) {
                        mini.addClass(tb, "mini-tabs-header2");
                    }
                }
                break;
        }



        mini.removeClass(this.el, 'mini-tabs-scroll');
        var td = mini.byClass('mini-tabs-lastSpace', this.el);
        var buttons = mini.byClass('mini-tabs-buttons', this.el);
        var ct = headerEl.parentNode;
        ct.style["paddingRight"] = '0px';
        if (this._navEl) this._navEl.style.display = 'none';
        if (this._leftNavEl) this._navEl.style.display = 'none';
        if (buttons) buttons.style.display = 'none';

        var isRightButton = this.buttonsAlign == "right";
        if (!isRightButton) {
            buttons.style.right = 'auto';
            buttons.style.left = '0';
        }

        mini.setWidth(ct, elWidth);

        if ((tabPosition == "top" || tabPosition == "bottom") && (this.tabAlign == "left" || this.tabAlign == "right")) {
            headerEl.style.width = 'auto';
            buttons.style.display = 'block';


            var width = elWidth;

            var tabsWidth = headerEl.firstChild.offsetWidth - td.offsetWidth;
            var buttonsWidth = buttons.firstChild ? buttons.offsetWidth : 0;

            if (tabsWidth + buttonsWidth > width) {
                this._navEl.style.display = 'block';
                var navWidth = this._navEl.offsetWidth;

                var headerMenuWidth = 0;

                if (this.showNavMenu) {
                    this._headerMenuEl.style.display = 'inline-block';
                    headerMenuWidth = this._headerMenuEl.offsetWidth;
                    this._headerMenuEl.style.right = buttonsWidth + "px";

                    this._createHeaderMenu();
                }
                var leftNavWidth = 0;
                if (this.arrowPosition == "side") {
                    this._leftNavEl.style.display = "block";
                    leftNavWidth = this._leftNavEl.offsetWidth;
                    headerEl.style.left = leftNavWidth + "px";
                }
                this._navEl.style.right = (isRightButton ? buttonsWidth : 0) + headerMenuWidth + 'px';
                var w = width - buttonsWidth - navWidth - leftNavWidth - headerMenuWidth;
                mini.setWidth(headerEl, w);





            }

            headerEl.style.marginLeft = (isRightButton ? 0 : buttonsWidth) + "px";
        }



        this._scrollToTab(this.activeIndex);
        this._doScrollButton();





        mini.layout(bodyEl);

        var that = this;
        var tab = this.getActiveTab();
        if (tab && tab.repaint && tabBodyEl) {
            var w = tabBodyEl.style.width;
            tabBodyEl.style.width = '0px';
            setTimeout(function() {

                tabBodyEl.style.width = w;
            }, 1);
        }

        this.fire("layout");

    },

    _getTabBy_Id: function(id) {
        for (var i = 0, l = this.tabs.length; i < l; i++) {
            var tab = this.tabs[i];
            if (tab._id == id) return tab;
        }
    },
    _createHeaderMenu: function() {


        this._headerMenu = new mini.Menu();
        this._headerMenu.setIdField("_id");
        this._headerMenu.setTextField("title");
        this._headerMenu.setPopupEl(this._headerMenuEl);
        this._headerMenu.setShowAction("leftclick");
        this._headerMenu.setHideAction("outerclick");
        this._headerMenu.setXAlign("left");
        this._headerMenu.setYAlign("below");

        this._headerMenu.on("itemclick", this._doMenuSelectTab, this)

        this._headerMenu.hide();
        this._headerMenu.owner = this._headerMenuEl;

    },
    _setHeaderMenuItems: function() {
        var tabs = this.getTabs();
        var items = [];
        for (var i = 0, l = tabs.length; i < l; i++) {
            var o = tabs[i];
            items.push({

                id: o._id,
                text: o[this.titleField]
            });
        }

        this._headerMenu.setItems(items);
    },
    _doMenuSelectTab: function(e) {
        var item = e.item;

        var tab = this._getTabBy_Id(item.id);
        this.activeTab(tab);
    },
    setTabAlign: function(value) {
        this.tabAlign = value;
        this.doUpdate();
    },
    setTabPosition: function(value) {
        this.tabPosition = value;
        this.doUpdate();
    },

    allowClickWrap: true,

    setAllowClickWrap: function(value) {
        this.allowClickWrap = value;
    },
    getAllowClickWrap: function() {
        return this.allowClickWrap;
    },

    getTab: function(index) {
        if (typeof index == "object") return index;
        if (typeof index == "number") {
            return this.tabs[index];
        } else {
            for (var i = 0, l = this.tabs.length; i < l; i++) {
                var tab = this.tabs[i];
                if (tab.name == index) return tab;
            }
        }
    },
    getHeaderEl: function() {
        return this._headerEl;
    },
    getBodyEl: function() {
        return this._bodyEl;
    },
    getTabEl: function(index) {
        var tab = this.getTab(index);
        if (!tab) return null;
        var id = this._createTabId(tab);
        var cs = this.el.getElementsByTagName("*");
        for (var i = 0, l = cs.length; i < l; i++) {
            var el = cs[i];
            if (el.id == id) return el;
        }
        return null;
    },
    getTabBodyEl: function(index) {
        var tab = this.getTab(index);
        if (!tab) return null;
        var id = this._createTabBodyId(tab);
        var cs = this._bodyEl.childNodes;
        for (var i = 0, l = cs.length; i < l; i++) {
            var el = cs[i];
            if (el.id == id) return el;
        }
        return null;
    },
    getTabIFrameEl: function(index) {
        var tab = this.getTab(index);
        if (!tab) return null;
        return tab._iframeEl;
    },
    _createTabId: function(tab) {
        return this.uid + "$" + tab._id;
    },
    _createTabBodyId: function(tab) {
        return this.uid + "$body$" + tab._id;
    },
    _doScrollButton: function() {
        if (this.tabPosition == "top" || this.tabPosition == "bottom") {
            mini.removeClass(this._leftButtonEl, "mini-disabled");
            mini.removeClass(this._rightButtonEl, "mini-disabled");
            if (this._headerEl.scrollLeft == 0) {
                mini.addClass(this._leftButtonEl, "mini-disabled");
            }
            var tabEl = this.getTabEl(this.tabs.length - 1);
            if (tabEl) {
                var tabBox = mini.getBox(tabEl);
                var scrollBox = mini.getBox(this._headerEl);
                if (tabBox.right <= scrollBox.right) {
                    mini.addClass(this._rightButtonEl, "mini-disabled");
                }
            }
        }
    },

    setActiveIndex: function(value, load) {

        var tab = this.getTab(value);

        var acTab = this.getTab(this.activeIndex);

        var fire = tab != acTab;

        var el = this.getTabBodyEl(this.activeIndex);
        if (el) el.style.display = "none";
        if (tab) {
            this.activeIndex = this.tabs.indexOf(tab);
        } else {
            this.activeIndex = -1;
        }
        var el = this.getTabBodyEl(this.activeIndex);
        if (el) el.style.display = "";

        var el = this.getTabEl(acTab);
        if (el) mini.removeClass(el, this._tabActiveCls);

        var el = this.getTabEl(tab);
        if (el) mini.addClass(el, this._tabActiveCls);

        if (el && fire) {
            if (this.tabPosition == "bottom") {
                var tb = mini.findParent(el, "mini-tabs-header");
                if (tb) {
                    jQuery(this._headerEl).prepend(tb);
                }
            } else if (this.tabPosition == "left") {
                var td = mini.findParent(el, "mini-tabs-header").parentNode;
                if (td) {
                    td.parentNode.appendChild(td);
                }
            } else if (this.tabPosition == "right") {
                var td = mini.findParent(el, "mini-tabs-header").parentNode;
                if (td) {
                    jQuery(td.parentNode).prepend(td);
                }
            } else {






                var tb = mini.findParent(el, "mini-tabs-header");
                if (tb && this.allowClickWrap) {
                    this._headerEl.appendChild(tb);
                }
            }
            var scrollLeft = this._headerEl.scrollLeft;


            var acTab = this.getTab(this.activeIndex);
            var canLayout = acTab ? !acTab._layouted : false;
            var autoHeight = this.isAutoHeight();

            if (autoHeight || canLayout) {
                if (acTab) acTab._layouted = true;
                this.doLayout();
            }



            var rows = this.getTabRows();
            if (rows.length > 1) {

            } else {
                this._scrollToTab(this.activeIndex);









                this._doScrollButton();
            }

            for (var i = 0, l = this.tabs.length; i < l; i++) {
                var tabEl = this.getTabEl(this.tabs[i]);
                if (tabEl) {
                    mini.removeClass(tabEl, this._tabHoverCls);
                }
            }
        }
        var me = this;
        if (fire) {
            var e = {
                tab: tab,
                index: this.tabs.indexOf(tab),
                name: tab ? tab.name : ""
            };

            setTimeout(function() {



                me.fire("ActiveChanged", e);

            }, 1);
        }


        this._cancelLoadTabs(tab);
        if (load !== false) {
            if (tab && tab.url && !tab.loadedUrl) {
                var me = this;


                me.loadTab(tab.url, tab);

            }
        } else {

        }

        if (tab) {
            if (mini.isChrome) {
                var iframe = this.getTabIFrameEl(tab);
                if (iframe) {


                    iframe.style.position = 'relative';
                    iframe.style.left = '1px'

                    iframe.offsetWidth;

                    iframe.style.left = '0px'


                }
            }
        }

        if (me.canLayout()) {
            try {
                mini.layoutIFrames(me.el);
            } catch (e) {}
        }
    },
    _scrollToTab: function(tab) {
        var scrollLeft = this._headerEl.scrollLeft;

        if (this.tabPosition == "top" || this.tabPosition == "bottom") {
            this._headerEl.scrollLeft = scrollLeft;
            var tabEl = this.getTabEl(tab);
            if (tabEl) {
                var sf = this;
                var tabBox = mini.getBox(tabEl);
                var scrollBox = mini.getBox(sf._headerEl);

                if (tabBox.x < scrollBox.x) {
                    sf._headerEl.scrollLeft -= (scrollBox.x - tabBox.x);
                } else if (tabBox.right > scrollBox.right) {
                    sf._headerEl.scrollLeft += (tabBox.right - scrollBox.right);
                }


            }
        }
    },
    getActiveIndex: function() {
        return this.activeIndex;
    },
    activeTab: function(tab) {
        this.setActiveIndex(tab);
    },
    getActiveTab: function() {
        return this.getTab(this.activeIndex);
    },
    getActiveIndex: function() {
        return this.activeIndex;
    },
    _tryActiveTab: function(tab) {
        tab = this.getTab(tab);
        if (!tab) return;
        var index = this.tabs.indexOf(tab);
        if (this.activeIndex == index) return;
        var e = {
            tab: tab,
            index: index,
            name: tab.name,
            cancel: false
        };
        this.fire("BeforeActiveChanged", e);
        if (e.cancel == false) {
            this.activeTab(tab);
        }
    },

    setShowHeader: function(value) {
        if (this.showHeader != value) {
            this.showHeader = value;
            this.doLayout();
        }
    },
    getShowHeader: function() {
        return this.showHeader;
    },
    setShowBody: function(value) {
        if (this.showBody != value) {
            this.showBody = value;
            this.doLayout();
        }
    },
    getShowBody: function() {
        return this.showBody;
    },
    setBodyStyle: function(value) {
        this.bodyStyle = value;
        mini.setStyle(this._bodyEl, value);
        this.doLayout();
    },
    getBodyStyle: function() {
        return this.bodyStyle;
    },
    setMaskOnLoad: function(value) {
        this.maskOnLoad = value;
    },
    getMaskOnLoad: function() {
        return this.maskOnLoad;
    },
    setPlain: function(value) {
        this.plain = value;
        this.doLayout();
    },
    getPlain: function() {
        return this.plain;
    },

    arrowPosition: "right",
    setArrowPosition: function(value) {
        this.arrowPosition = value;
    },
    getArrowPosition: function() {
        return this.arrowPosition;
    },
    showNavMenu: false,
    setShowNavMenu: function(value) {
        this.showNavMenu = value
    },
    getShowNavMenu: function() {
        return this.showNavMenu;
    },


    clearTimeStamp: false,
    setClearTimeStamp: function(value) {
        this.clearTimeStamp = value;
    },
    getClearTimeStamp: function() {
        return this.clearTimeStamp;
    },

    getTabByEvent: function(e) {
        return this._getTabByEvent(e);
    },
    _getTabByEvent: function(e) {
        var el = mini.findParent(e.target, 'mini-tab');
        if (!el) return null;
        var ids = el.id.split("$");
        if (ids[0] != this.uid) return null;
        var index = parseInt(jQuery(el).attr("index"));
        return this.getTab(index);
    },
    __OnDblClick: function(e) {
        var tab = this._getTabByEvent(e);
        if (!tab) return;
        var e = {
            tab: tab
        }
        this.fire("tabdblclick", e)
    },
    __OnClick: function(e) {

        var tab = this._getTabByEvent(e);
        if (!tab) return;

        var close = !!mini.findParent(e.target, "mini-tab-close");
        if (!close && tab == this.getActiveTab() && !tab.refreshOnClick) return;

        if (tab.enabled) {
            var me = this;
            setTimeout(function() {

                if (close) {
                    me._OnCloseButtonClick(tab, e);
                } else {
                    var loadedUrl = tab.loadedUrl;
                    me._tryActiveTab(tab);
                    if (tab.refreshOnClick && tab.url == loadedUrl) {
                        me.reloadTab(tab);
                    }
                }
            }, 10);
        }
    },
    hoverTab: null,
    __OnMouseOver: function(e) {

        var tab = this._getTabByEvent(e);
        if (tab && tab.enabled) {
            var tabEl = this.getTabEl(tab);
            mini.addClass(tabEl, this._tabHoverCls);
            this.hoverTab = tab;
        }
    },
    __OnMouseOut: function(e) {
        if (this.hoverTab) {
            var tabEl = this.getTabEl(this.hoverTab);
            mini.removeClass(tabEl, this._tabHoverCls);
        }
        this.hoverTab = null;

    },
    __OnMouseDown: function(e) {
        clearInterval(this._scrollTimer);
        if (this.tabPosition == "top" || this.tabPosition == "bottom") {
            var sf = this;
            var count = 0,
                num = 10;
            if (e.target == this._leftButtonEl) {
                this._scrollTimer = setInterval(function() {
                    sf._headerEl.scrollLeft -= num;
                    count++;
                    if (count > 5) num = 18;
                    if (count > 10) num = 25;
                    sf._doScrollButton();
                }, 25);
            } else if (e.target == this._rightButtonEl) {
                this._scrollTimer = setInterval(function() {
                    sf._headerEl.scrollLeft += num;
                    count++;
                    if (count > 5) num = 18;
                    if (count > 10) num = 25;
                    sf._doScrollButton();
                }, 25);
            } else if (e.target == this._headerMenuEl) {
                this._setHeaderMenuItems();
            }
            mini.on(document, "mouseup", this.__OnDocMouseUp, this);
        }
    },
    __OnDocMouseUp: function(e) {
        clearInterval(this._scrollTimer);
        this._scrollTimer = null;
        mini.un(document, "mouseup", this.__OnDocMouseUp, this);
    },


    _doUpdateTop: function() {


        var isTop = this.tabPosition == "top";

        var s = '';

        s += '<div class="mini-tabs-scrollCt">';
        if (this.arrowPosition == "side") {
            s += '<div class="mini-tabs-leftnav"><a class="mini-tabs-leftButton" href="javascript:void(0)" hideFocus onclick="return false"></a></div>';
            s += '<div class="mini-tabs-nav"><a class="mini-tabs-rightButton" href="javascript:void(0)" hideFocus onclick="return false"></a></div>';
        } else {
            s += '<div class="mini-tabs-nav"><a class="mini-tabs-leftButton" href="javascript:void(0)" hideFocus onclick="return false"></a><a class="mini-tabs-rightButton" href="javascript:void(0)" hideFocus onclick="return false"></a></div>';
        }
        if (this.showNavMenu) {
            s += '<a class="mini-tabs-tabmenu" href="javascript:void(0)" hideFocus onclick="return false"></a>'
        }

        s += '<div class="mini-tabs-buttons" a=1 style="' + (this.buttonsAlign == "right" ? "" : "right:auto;left:0;") + '"></div>';

        s += '<div class="mini-tabs-headers">';
        var rows = this.getTabRows();
        for (var j = 0, k = rows.length; j < k; j++) {
            var tabs = rows[j];
            var cls = "";
            s += '<table class="mini-tabs-header" cellspacing="0" cellpadding="0"><tr><td class="mini-tabs-space mini-tabs-firstSpace"><div></div></td>';
            for (var i = 0, l = tabs.length; i < l; i++) {
                var tab = tabs[i];
                var id = this._createTabId(tab);
                if (!tab.visible) continue;
                var index = this.tabs.indexOf(tab);
                var cls = tab.headerCls || "";
                if (tab.enabled == false) {
                    cls += ' mini-disabled';
                }
                s += '<td title="' + tab.tooltip + '" id="' + id + '" index="' + index + '"  class="mini-tab ' + cls + '" style="' + tab.headerStyle + '">';
                if (tab.iconCls || tab.iconStyle) {
                    s += '<span class="mini-tab-icon mini-iconfont ' + tab.iconCls + '" style="' + tab.iconStyle + '"></span>';
                }
                s += '<span class="mini-tab-text">' + tab.title + '</span>';
                if (tab.showCloseButton) {
                    var ms = "";
                    if (tab.enabled) {
                        ms = 'onmouseover="mini.addClass(this, \'mini-tab-close-hover\')" onmouseout="mini.removeClass(this, \'mini-tab-close-hover\')"'
                    }
                    s += '<span class="mini-tab-close" ' + ms + ' ></span>';
                }
                s += '</td>';
                if (i != l - 1) {
                    s += '<td class="mini-tabs-space2"><div></div></td>';
                }

            }
            s += '<td class="mini-tabs-space mini-tabs-lastSpace" ><div></div></td></tr></table>';
        }

        s += '</div>';

        s += '</div>';

        this._doClearElement();

        mini.prepend(this._td2El, s);

        var td = this._td2El;

        this._headerEl = td.firstChild.lastChild;




        if (this.arrowPosition == "side") {
            this._leftNavEl = td.firstChild.firstChild;
            this._navEl = this._headerEl.parentNode.children[1];
            this._leftButtonEl = this._leftNavEl.firstChild;
            this._rightButtonEl = this._navEl.firstChild;

            if (this.showNavMenu) {
                this._headerMenuEl = this._headerEl.parentNode.children[2];
            }
        } else {
            this._navEl = this._headerEl.parentNode.firstChild;
            this._leftButtonEl = this._navEl.firstChild;
            this._rightButtonEl = this._navEl.childNodes[1];

            if (this.showNavMenu) {
                this._headerMenuEl = this._headerEl.parentNode.children[1];
            }
        }



        switch (this.tabAlign) {
            case "center":
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    var tds = tb.getElementsByTagName("td");
                    tds[0].style.width = "50%";
                    tds[tds.length - 1].style.width = "50%";
                }
                break;
            case "right":
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    var tds = tb.getElementsByTagName("td");
                    tds[0].style.width = "100%";
                }
                break;
            case "fit":
                break;
            default:
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    var tds = tb.getElementsByTagName("td");
                    tds[tds.length - 1].style.width = "100%";
                }
                break;
        }



    },
    _doUpdateBottom: function() {
        this._doUpdateTop();
        var td = this._td2El;

        mini.append(td, td.firstChild);



        this._headerEl = td.lastChild.lastChild;


    },
    _doUpdateLeft: function() {
        var s = '<table cellspacing="0" cellpadding="0"><tr>';
        var rows = this.getTabRows();
        for (var j = 0, k = rows.length; j < k; j++) {
            var tabs = rows[j];

            var cls = "";
            if (k > 1 && j != k - 1) {
                cls = "mini-tabs-header2";
            }
            s += '<td class="' + cls + '"><table class="mini-tabs-header" cellspacing="0" cellpadding="0">';
            s += '<tr ><td class="mini-tabs-space mini-tabs-firstSpace" ><div></div></td></tr>';

            for (var i = 0, l = tabs.length; i < l; i++) {
                var tab = tabs[i];
                var id = this._createTabId(tab);
                if (!tab.visible) continue;

                var index = this.tabs.indexOf(tab);

                var cls = tab.headerCls || "";
                if (tab.enabled == false) {
                    cls += ' mini-disabled';
                }
                s += '<tr><td id="' + id + '" index="' + index + '"  class="mini-tab ' + cls + '" style="' + tab.headerStyle + '">';
                if (tab.iconCls || tab.iconStyle) {
                    s += '<span class="mini-tab-icon mini-iconfont ' + tab.iconCls + '" style="' + tab.iconStyle + '"></span>';
                }
                s += '<span class="mini-tab-text">' + tab.title + '</span>';
                if (tab.showCloseButton) {
                    var ms = "";
                    if (tab.enabled) {
                        ms = 'onmouseover="mini.addClass(this, \'mini-tab-close-hover\')" onmouseout="mini.removeClass(this, \'mini-tab-close-hover\')"'
                    }
                    s += '<span class="mini-tab-close" ' + ms + '></span>';
                }
                s += '</td></tr>';

                if (i != l - 1) {
                    s += '<tr><td class="mini-tabs-space2"><div></div></td></tr>';
                }

            }

            s += '<tr ><td class="mini-tabs-space mini-tabs-lastSpace" ><div></div></td></tr>';
            s += '</table></td>';
        }

        s += '</tr ></table>';

        this._doClearElement();
        mini.addClass(this._td1El, "mini-tabs-header");
        mini.append(this._td1El, s);
        this._headerEl = this._td1El;

    },
    _doUpdateRight: function() {
        this._doUpdateLeft();

        mini.removeClass(this._td1El, "mini-tabs-header");
        mini.removeClass(this._td3El, "mini-tabs-header");
        mini.append(this._td3El, this._td1El.firstChild);
        this._headerEl = this._td3El;

    },

    _OnCloseButtonClick: function(tab, htmlEvent) {
        var e = {
            tab: tab,
            index: this.tabs.indexOf(tab),
            name: tab.name.toLowerCase(),
            htmlEvent: htmlEvent,
            cancel: false
        };

        this.fire("beforecloseclick", e);

        if (e.cancel == true) return;

        try {
            if (tab._iframeEl && tab._iframeEl.contentWindow) {
                var ret = true;
                if (tab._iframeEl.contentWindow.CloseWindow) {
                    ret = tab._iframeEl.contentWindow.CloseWindow("close");
                } else if (tab._iframeEl.contentWindow.CloseOwnerWindow) {
                    ret = tab._iframeEl.contentWindow.CloseOwnerWindow("close");
                }
                if (ret === false) {
                    e.cancel = true;
                }
            }
        } catch (ex) {}

        if (e.cancel == true) return;

        tab.removeAction = "close";
        this.removeTab(tab);
        this.fire("closeclick", e);
    },
    onBeforeCloseClick: function(fn, scope) {
        this.on("beforecloseclick", fn, scope);
    },
    onCloseClick: function(fn, scope) {
        this.on("closeclick", fn, scope);
    },
    onActiveChanged: function(fn, scope) {
        this.on("activechanged", fn, scope);
    },

    getAttrs: function(el) {
        var attrs = mini.Tabs.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["tabAlign", "tabPosition", "bodyStyle", "onactivechanged", "onbeforeactivechanged", "url",
            "ontabload", "ontabdestroy", "onbeforecloseclick", "oncloseclick", "ontabdblclick",
            "titleField", "urlField", "nameField", "loadingMsg", "buttons", "arrowPosition", "buttonsAlign"
        ]);
        mini._ParseBool(el, attrs, ["allowAnim", "showBody", "showHeader", "maskOnLoad", "plain", "allowClickWrap", "showNavMenu", "clearTimeStamp"]);
        mini._ParseInt(el, attrs, ["activeIndex"]);

        var tabs = [];
        var nodes = mini.getChildNodes(el);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            var o = {};
            tabs.push(o);

            o.style = node.style.cssText;
            mini._ParseString(node, o, ["name", "title", "url", "cls", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle",
                "onload", "ondestroy", "data-options", "tooltip"
            ]);
            mini._ParseBool(node, o, ["newLine", "visible", "enabled", "showCloseButton", "refreshOnClick"]);



            o.bodyParent = node;


            var options = o["data-options"];
            if (options) {

                options = eval("(" + options + ")");
                if (options) {

                    mini.copyTo(o, options);
                }
            }
        }
        attrs.tabs = tabs;

        return attrs;
    }
});
mini.regClass(mini.Tabs, "tabs");


mini.Menu = function() {
    this.items = [];
    mini.Menu.superclass.constructor.apply(this, arguments);


}
mini.extend(mini.Menu, mini.Control);
mini.copyTo(mini.Menu.prototype, mini.Popup_prototype);
var mini_Popup_prototype_hide = mini.Popup_prototype.hide;

mini.copyTo(mini.Menu.prototype, {
    height: "auto",
    width: "auto",
    minWidth: 140,
    vertical: true,
    allowSelectItem: false,
    _selectedItem: null,
    _itemSelectedCls: "mini-menuitem-selected",

    textField: "text",
    resultAsTree: false,
    idField: "id",
    parentField: "pid",
    itemsField: "children",

    showNavArrow: true,

    imgPath: '',

    overflow: false,



    _clearBorder: false,

    showAction: "none",
    hideAction: "outerclick",
    menuAlign: "",
    setMenuAlign: function($) {
        this.menuAlign = $
    },
    getMenuAlign: function() {
        return this.menuAlign
    },
    getbyName: function(name) {

        for (var i = 0, l = this.items.length; i < l; i++) {
            var item = this.items[i];
            if (item.name == name) {
                return item;
            }
            if (item.menu) {
                var control = item.menu.getbyName(name);
                if (control) return control;
            }
        }
        return null;
    },

    set: function(obj) {
        if (typeof obj == 'string') {
            return this;
        }

        var url = obj.url;
        delete obj.url;

        if (obj.imgPath) this.setImgPath(obj.imgPath);
        delete obj.imgPath;

        this.ownerItem = obj.ownerItem;
        delete obj.ownerItem;

        mini.Menu.superclass.set.call(this, obj);

        if (url) {
            this.setUrl(url);
        }

        return this;
    },

    uiCls: "mini-menu",
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "mini-menu";
        this.el.innerHTML = '<div class="mini-menu-border"><a class="mini-menu-topArrow" href="#" onclick="return false"></a><div class="mini-menu-inner"></div><a class="mini-menu-bottomArrow" href="#" onclick="return false"></a></div>';
        this._borderEl = this.el.firstChild;

        this._topArrowEl = this._borderEl.childNodes[0];
        this._bottomArrowEl = this._borderEl.childNodes[2];

        this._innerEl = this._borderEl.childNodes[1];
        this._innerEl.innerHTML = '<div class="mini-menu-float"></div><div class="mini-menu-toolbar"></div><div style="clear:both;max-height: 1px;"></div>';
        this._contentEl = this._innerEl.firstChild;
        this._toolbarEl = this._innerEl.childNodes[1];




        if (this.isVertical() == false) mini.addClass(this.el, 'mini-menu-horizontal');

    },
    destroy: function(removeEl) {
        if (this._topArrowEl) {
            this._topArrowEl.onmousedown = this._bottomArrowEl.onmousedown = null;
        }

        this._popupEl = this.popupEl = this._borderEl = this._innerEl = this._contentEl = this._toolbarEl = null;
        this._topArrowEl = this._bottomArrowEl = null;
        this.owner = null;
        this.window = null;
        mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
        mini.un(window, "resize", this.__OnWindowResize, this);

        mini.Menu.superclass.destroy.call(this, removeEl);

    },
    _disableContextMenu: false,
    _initEvents: function() {
        mini._BindEvents(function() {
            mini.on(document, "mousedown", this.__OnBodyMouseDown, this);
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(window, "resize", this.__OnWindowResize, this);
            if (this._disableContextMenu) {
                mini_onOne(this.el, "contextmenu", function(e) {
                    e.preventDefault();

                }, this);
            }

            mini_onOne(this._topArrowEl, "mousedown", this.__OnTopMouseDown, this);
            mini_onOne(this._bottomArrowEl, "mousedown", this.__OnBottomMouseDown, this);

        }, this);

    },
    within: function(e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        for (var i = 0, l = this.items.length; i < l; i++) {
            var item = this.items[i];
            if (item.within(e)) return true;
        }
        return false;
    },






    setVertical: function(value) {
        this.vertical = value;
        if (!value) {
            mini.addClass(this.el, 'mini-menu-horizontal');
        } else {
            mini.removeClass(this.el, 'mini-menu-horizontal');
        }

    },
    getVertical: function() {
        return this.vertical;
    },
    isVertical: function() {
        return this.vertical;
    },

    show: function() {
        this.setVisible(true);
    },
    hide: function() {
        this.hideItems();
        mini_Popup_prototype_hide.call(this);
    },
    hideItems: function() {
        for (var i = 0, l = this.items.length; i < l; i++) {
            var menuitem = this.items[i];
            menuitem.hideMenu();
        }
    },

    showItemMenu: function(item) {
        for (var i = 0, l = this.items.length; i < l; i++) {
            var menuitem = this.items[i];
            if (menuitem == item) {
                menuitem.showMenu();
            } else {
                menuitem.hideMenu();
            }
        }
    },
    hasShowItemMenu: function() {
        for (var i = 0, l = this.items.length; i < l; i++) {
            var menuitem = this.items[i];
            if (menuitem && menuitem.menu && menuitem.menu.isPopup) {
                return true;
            }
        }
        return false;
    },

    setData: function(value) {
        if (!mini.isArray(value)) value = [];
        this.setItems(value);
    },
    getData: function() {
        return this.getItems();
    },
    setItems: function(items) {
        if (!mini.isArray(items)) items = [];

        this.removeAll();
        var sss = new Date();

        for (var i = 0, l = items.length; i < l; i++) {
            this.addItem(items[i]);
        }

    },
    getItems: function() {
        return this.items;
    },
    _itemType: "menuitem",
    addItem: function(item) {
        if (item == "-" || item == "|" || item.type == "separator") {
            mini.append(this._contentEl, '<span id="' + item.id + '" name="' + (item.name || "") + '" class="mini-separator"></span>');
            return;
        }

        if (!mini.isControl(item) && !mini.getClass(item.type)) {
            item.type = this._itemType;
        }

        item.ownerMenu = this;

        item = mini.getAndCreate(item);

        this.items.push(item);

        this._contentEl.appendChild(item.el);

        item.ownerMenu = this;



        this.fire("itemschanged");
    },
    removeItem: function(item) {
        item = mini.get(item);
        if (!item) return;
        this.items.remove(item);

        this._contentEl.removeChild(item.el);

        this.fire("itemschanged");
    },
    removeItemAt: function(index) {
        var item = this.items[index];
        this.removeItem(item);
    },
    removeAll: function() {
        var items = this.items.clone();
        for (var i = items.length - 1; i >= 0; i--) {
            this.removeItem(items[i]);
        }
        this._contentEl.innerHTML = "";
    },
    getGroupItems: function(name) {
        if (!name) return [];
        var items = [];
        for (var i = 0, l = this.items.length; i < l; i++) {
            var item = this.items[i];
            if (item.groupName == name) items.push(item);
        }
        return items;
    },
    getItem: function(item) {
        if (typeof item == "number") return this.items[item];
        if (typeof item == "string") {
            for (var i = 0, l = this.items.length; i < l; i++) {
                var it = this.items[i];
                if (it.id == item) return it;
            }
            return null;
        }
        if (item && this.items.indexOf(item) != -1) return item;
        return null;
    },

    setAllowSelectItem: function(value) {
        this.allowSelectItem = value;
    },
    getAllowSelectItem: function() {
        return this.allowSelectItem;
    },
    setSelectedItem: function(item) {
        item = this.getItem(item);
        this._OnItemSelect(item);
    },
    getSelectedItem: function(item) {
        return this._selectedItem;
    },

    setShowNavArrow: function(value) {
        this.showNavArrow = value;
    },
    getShowNavArrow: function() {
        return this.showNavArrow;
    },
    setTextField: function(value) {
        this.textField = value;
    },
    getTextField: function() {
        return this.textField;
    },
    setResultAsTree: function(value) {
        this.resultAsTree = value;
    },
    getResultAsTree: function() {
        return this.resultAsTree;
    },
    setIdField: function(value) {
        this.idField = value;
    },
    getIdField: function() {
        return this.idField;
    },
    setParentField: function(value) {
        this.parentField = value;
    },
    getParentField: function() {
        return this.parentField;
    },
    setIconClsField: function($) {
        this.iconClsField = $
    },
    getIconClsField: function() {
        return this.iconClsField
    },
    setOverflow: function(value) {
        this.overflow = value;

        if (value) {
            mini.addClass(this.el, 'mini-menu-overflow');
        } else {
            mini.removeClass(this.el, 'mini-menu-overflow');
        }
    },
    getOverflow: function() {
        return this.overflow;
    },


    doLayout: function() {

        if (!this.canLayout()) return;
        var innerEl = this._innerEl,
            topEl = this._topArrowEl,
            bottomEl = this._bottomArrowEl;

        if (!this.isAutoHeight()) {

            var height = mini.getHeight(this.el, true);

            mini.setHeight(this._borderEl, height);
            topEl.style.display = bottomEl.style.display = "none";

            this._contentEl.style.height = "auto";

            if (this.showNavArrow && this._borderEl.scrollHeight > this._borderEl.clientHeight) {
                topEl.style.display = bottomEl.style.display = "block";
                height = mini.getHeight(this._borderEl, true);
                var th = mini.getHeight(topEl);
                var bh = mini.getHeight(bottomEl);
                var h = height - th - bh;
                if (h < 0) h = 0;
                mini.setHeight(this._contentEl, h);


                var width = mini.getWidth(this._borderEl, true);
                mini.setWidth(topEl, width);
                mini.setWidth(bottomEl, width);

            } else {
                this._contentEl.style.height = "auto";
            }
        } else {
            this._borderEl.style.height = "auto";
            this._contentEl.style.height = "auto";
        }

        if (this.overflow) {
            topEl.style.display = bottomEl.style.display = "none";
            innerEl.style.marginLeft = innerEl.style.marginRight = "0px";

            if (this._getScrollWidth() > this._innerEl.offsetWidth) {
                topEl.style.display = bottomEl.style.display = "block";
                innerEl.style.marginLeft = innerEl.style.marginRight = "15px";
            } else {
                innerEl.scrollLeft = 0;
            }

        }
    },
    _measureSize: function() {
        if (this.height == "auto") {
            this.el.style.height = "auto";
            this._borderEl.style.height = "auto";
            this._contentEl.style.height = "auto";
            this._topArrowEl.style.display = this._bottomArrowEl.style.display = "none";

            var vbox = mini.getViewportBox();
            var box = mini.getBox(this.el);
            this.maxHeight = vbox.height - 25;
            if (this.ownerItem) {
                var box = mini.getBox(this.ownerItem.el);
                var topH = box.top;
                var bottomH = vbox.height - box.bottom;
                var maxHeight = topH > bottomH ? topH : bottomH;
                maxHeight -= 10;
                this.maxHeight = maxHeight;
            }
        }

        this.el.style.display = "";
        var box = mini.getBox(this.el);

        if (box.width > this.maxWidth) {
            mini.setWidth(this.el, this.maxWidth);
            box = mini.getBox(this.el);
        }
        if (box.height > this.maxHeight) {
            mini.setHeight(this.el, this.maxHeight);
            box = mini.getBox(this.el);
        }
        if (box.width < this.minWidth) {
            mini.setWidth(this.el, this.minWidth);
            box = mini.getBox(this.el);
        }
        if (box.height < this.minHeight) {
            mini.setHeight(this.el, this.minHeight);
            box = mini.getBox(this.el);
        }
    },

    url: "",
    _doLoad: function() {

        var items = mini._getResult(this.url, null, null, null, null, this.dataField);


        if (this.dataField && !mini.isArray(items)) {
            items = mini._getMap(this.dataField, items);
        }
        if (!items) items = [];

        if (this.resultAsTree == false) {
            items = mini.arrayToTree(items, this.itemsField, this.idField, this.parentField)
        }

        var list = mini.treeToArray(items, this.itemsField, this.idField, this.parentField)
        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            o.text = mini._getMap(this.textField, o);
            if (mini.isNull(o.text)) o.text = "";
        }
        var sss = new Date();
        this.setItems(items);

        this.fire("load");
    },
    loadList: function(list, idField, parentField) {
        if (!list) return;

        idField = idField || this.idField;
        parentField = parentField || this.parentField;

        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            o.text = mini._getMap(this.textField, o);
            if (mini.isNull(o.text)) o.text = "";
        }

        var tree = mini.arrayToTree(list, this.itemsField, idField, parentField);

        this.load(tree);
    },
    load: function(url) {
        if (typeof url == "string") {
            this.setUrl(url);
        } else {
            this.setItems(url);
        }
    },
    setUrl: function(value) {
        this.url = value;

        this._doLoad();
    },
    getUrl: function() {
        return this.url;
    },
    hideOnClick: true,
    setHideOnClick: function(value) {
        this.hideOnClick = value;
    },
    getHideOnClick: function() {
        return this.hideOnClick;
    },


    hideOnClick: true,
    setImgPath: function(value) {
        this.imgPath = value;
    },
    getImgPath: function() {
        return this.imgPath;
    },

    _OnItemClick: function(item, htmlEvent) {
        var e = {
            item: item,
            isLeaf: !item.menu,
            htmlEvent: htmlEvent
        };
        if (this.hideOnClick) {
            if (this.isPopup) {
                this.hide();
            } else {
                if (e.isLeaf) {
                    this.hideItems();
                }
            }
        }

        if (this.allowSelectItem && this._selectedItem != item) {
            this.setSelectedItem(item);
        }

        this.fire("itemclick", e);
        if (this.ownerItem) {

        }
    },
    _OnItemSelect: function(item) {
        if (this._selectedItem) {
            this._selectedItem.removeCls(this._itemSelectedCls);
        }
        this._selectedItem = item;

        if (this._selectedItem) {
            this._selectedItem.addCls(this._itemSelectedCls);
        }

        var e = {
            item: this._selectedItem,
            isLeaf: this._selectedItem ? !this._selectedItem.menu : false
        };
        this.fire("itemselect", e);
    },
    onItemClick: function(fn, scope) {
        this.on("itemclick", fn, scope);
    },
    onItemSelect: function(fn, scope) {
        this.on("itemselect", fn, scope);
    },

    __OnTopMouseDown: function(e) {
        this._startScrollMove(-20);
    },
    __OnBottomMouseDown: function(e) {
        this._startScrollMove(20);
    },

    _getScrollWidth: function() {
        var self = this;
        var width = 0;

        var first = jQuery(".mini-menuitem", self.el).first()[0];
        var last = jQuery(".mini-menuitem", self.el).last()[0];
        if (first && last) {
            var box1 = mini.getBox(first);
            var box2 = mini.getBox(last);
            width = box2.right - box1.left;
        }

        return width;
    },

    _getMaxScrollLeft: function() {
        return parseInt(this._getScrollWidth() - this._innerEl.offsetWidth + 6);
    },

    _startScrollMove: function(value) {
        clearInterval(this._scrollTimer);
        var fn = function() {
            clearInterval(me._scrollTimer);
            mini.un(document, "mouseup", fn);
        };
        mini.on(document, "mouseup", fn);

        var scrollWidth = this._getMaxScrollLeft();

        var me = this;
        this._scrollTimer = setInterval(function() {
            if (me.isVertical() == false) {

                var left = me._innerEl.scrollLeft;
                left += value;
                if (left > scrollWidth) left = scrollWidth;


                me._innerEl.scrollLeft = left;

            } else {
                me._contentEl.scrollTop += value;
            }


        }, 50);
    },
    setToolbar: function(value) {
        __mini_setControls(value, this._toolbarEl, this);
        this._toolbarEl.style.display = "block";
    },

    parseItems: function(nodes) {

        var data = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            if (node.className == "separator") {
                var o = {
                    type: 'separator',
                    id: node.id,
                    name: node.name
                };
                data.add(o);
                continue;
            }

            var cnodes = mini.getChildNodes(node);

            var nodeItem = cnodes[0];
            var nodeChild = cnodes[1];

            var o = new mini.MenuItem();

            if (!nodeChild) {

                mini.applyTo.call(o, node);
                data.add(o);
                continue;
            }

            mini.applyTo.call(o, nodeItem);
            o.render(document.body);


            var menu = new mini.Menu();

            mini.applyTo.call(menu, nodeChild);

            o.setMenu(menu);

            menu.render(document.body);


            data.add(o);
        }
        return data.clone();
    },
    getAttrs: function(el) {

        var attrs = mini.Menu.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs, ["popupEl", "popupCls", "showAction", "hideAction", "xAlign", "yAlign", "modalStyle",
            "onbeforeopen", "open", "onbeforeclose", "onclose", "url", "onitemclick", "onitemselect",
            "textField", "idField", "parentField", "toolbar", "imgPath", "iconClsField", "menuAlign"
        ]);
        mini._ParseBool(el, attrs, ["resultAsTree", "hideOnClick", "showNavArrow", "showShadow", "overflow"]);






        var nodes = mini.getChildNodes(el);
        for (var i = nodes.length - 1; i >= 0; i--) {
            var node = nodes[i];
            var property = jQuery(node).attr("property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "toolbar") {
                attrs.toolbar = node;
                node.parentNode.removeChild(node);
            }
        }

        var nodes = mini.getChildNodes(el);

        var items = this.parseItems(nodes);
        if (items.length > 0) {
            attrs.items = items;
        }

        var vertical = jq.attr("vertical");
        if (vertical) {

            attrs.vertical = vertical == "true" ? true : false;
        }
        var allowSelectItem = jq.attr("allowSelectItem");
        if (allowSelectItem) {
            attrs.allowSelectItem = allowSelectItem == "true" ? true : false;
        }

        return attrs;
    }

});
mini.regClass(mini.Menu, 'menu');


mini.MenuBar = function() {
    mini.MenuBar.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.MenuBar, mini.Menu, {
    uiCls: "mini-menubar",
    vertical: false,
    setVertical: function(value) {
        this.vertical = false;
    }
});
mini.regClass(mini.MenuBar, 'menubar');


mini.ContextMenu = function() {
    mini.ContextMenu.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.ContextMenu, mini.Menu, {
    uiCls: "mini-contextmenu",
    vertical: true,
    visible: false,
    _disableContextMenu: true,
    setVertical: function(value) {
        this.vertical = true;
    }
});
mini.regClass(mini.ContextMenu, 'contextmenu');


mini.MenuItem = function() {
    mini.MenuItem.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.MenuItem, mini.Control, {
    text: "",
    iconCls: "",
    iconStyle: "",
    iconPosition: "left",

    img: '',

    showIcon: true,
    showAllow: true,

    checked: false,
    checkOnClick: false,
    groupName: "",

    _hoverCls: "mini-menuitem-hover",
    _pressedCls: "mini-menuitem-pressed",
    _checkedCls: "mini-menuitem-checked",

    _clearBorder: false,

    menu: null,

    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        this.ownerMenu = kv.ownerMenu;
        delete kv.ownerMenu;









        mini.MenuItem.superclass.set.call(this, kv);


        return this;
    },

    uiCls: "mini-menuitem",
    _create: function() {
        var el = this.el = document.createElement("div");
        this.el.className = "mini-menuitem";

        this.el.innerHTML = '<div class="mini-menuitem-inner"><div class="mini-menuitem-icon mini-iconfont"></div><div class="mini-menuitem-text"></div><div class="mini-menuitem-allow"></div></div>';
        this._innerEl = this.el.firstChild;
        this._iconEl = this._innerEl.firstChild;
        this._textEl = this._innerEl.childNodes[1];
        this.allowEl = this._innerEl.lastChild;
    },
    _initEvents: function() {
        mini._BindEvents(function() {
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);
        }, this);

    },
    _inputEventsInited: false,
    _initInputEvents: function() {
        if (this._inputEventsInited) return;
        this._inputEventsInited = true;

        mini_onOne(this.el, "click", this.__OnClick, this);
        mini_onOne(this.el, "mouseup", this.__OnMouseUp, this);

        mini_onOne(this.el, "mouseout", this.__OnMouseOut, this);


    },
    destroy: function(removeEl) {
        if (this.menu) this.menu.destroy();
        this.menu = this._innerEl = this._iconEl = this._textEl = this.allowEl = null;
        mini.MenuItem.superclass.destroy.call(this, removeEl);
    },
    within: function(e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this.menu && this.menu.within(e)) return true;
        return false;
    },
    _getIconImg: function() {


        return this.img && this.getTopMenu() ? this.getTopMenu().imgPath + this.img : this.img;
    },
    _doUpdateIcon: function() {


        var img = this._getIconImg();
        var hasIcon = !!(this.iconStyle || this.iconCls || this.checkOnClick || img);
        if (this._iconEl) {
            mini.setStyle(this._iconEl, this.iconStyle);
            mini.addClass(this._iconEl, this.iconCls);



            if (img && !this.checked) {
                var style = 'background-image:url(' + img + ')';
                mini.setStyle(this._iconEl, style);
            }

            if (this.checked) jQuery(this._iconEl).css({
                "background-image": ""
            });

            this._iconEl.style.display = hasIcon ? "block" : "none";
        }
        if (this.iconPosition == "top") {
            mini.addClass(this.el, "mini-menuitem-icontop");
        } else {
            mini.removeClass(this.el, "mini-menuitem-icontop");
        }
    },
    _hasChildMenu: function() {
        return this.menu && this.menu.items.length > 0;
    },
    doUpdate: function() {
        if (this._textEl) this._textEl.innerHTML = this.text;
        this._doUpdateIcon();


        if (this.checked) {
            mini.addClass(this.el, this._checkedCls);


            jQuery(this._iconEl).css({
                "background-image": ""
            });
        } else {
            mini.removeClass(this.el, this._checkedCls);
        }
        if (this.allowEl) {

            if (this._hasChildMenu()) {

                this.allowEl.style.display = "block";
            } else {
                this.allowEl.style.display = "none";
            }
        }
    },
    setText: function(value) {
        this.text = value;

        if (this._textEl) this._textEl.innerHTML = this.text;
    },
    getText: function() {
        return this.text;
    },
    setIconCls: function(value) {
        mini.removeClass(this._iconEl, this.iconCls);
        this.iconCls = value;

        this._doUpdateIcon();
    },
    getIconCls: function() {
        return this.iconCls;
    },
    setImg: function(value) {
        this.img = value;

        this._doUpdateIcon();
    },
    getImg: function() {
        return this.img;
    },
    setIconStyle: function(value) {
        this.iconStyle = value;

        this._doUpdateIcon();
    },
    getIconStyle: function() {
        return this.iconStyle;
    },
    setIconPosition: function(value) {
        this.iconPosition = value;

        this._doUpdateIcon();
    },
    getIconPosition: function() {
        return this.iconPosition;
    },
    setCheckOnClick: function(value) {
        this.checkOnClick = value;
        if (value) {
            mini.addClass(this.el, "mini-menuitem-showcheck");
        } else {
            mini.removeClass(this.el, "mini-menuitem-showcheck");
        }
        this.doUpdate();
    },
    getCheckOnClick: function() {
        return this.checkOnClick;
    },
    setChecked: function(value) {
        if (this.checked != value) {
            this.checked = value;
            this.doUpdate();
            this.fire("checkedchanged");
        }
    },
    getChecked: function() {
        return this.checked;
    },
    setGroupName: function(value) {
        if (this.groupName != value) {
            this.groupName = value;
        }
    },
    getGroupName: function() {
        return this.groupName;
    },
    setChildren: function(value) {
        this.setMenu(value);
    },
    setMenu: function(value) {
        if (mini.isArray(value)) {
            value = {
                type: "menu",
                items: value
            };
        }
        if (this.menu !== value) {
            value.ownerItem = this;
            this.menu = mini.getAndCreate(value);
            this.menu.hide();
            this.menu.ownerItem = this;
            this.doUpdate();
            this.menu.on("itemschanged", this.__OnItemsChanged, this);

        }
    },
    getMenu: function() {
        return this.menu;
    },
    showMenu: function() {
        if (this.menu && this.menu.isDisplay() == false) {
            this.menu.setHideAction("outerclick");

            var options = {
                xAlign: "outright",
                yAlign: "top",
                outXAlign: "outleft",
                outYAlign: 'below',

                popupCls: "mini-menu-popup"
            };

            if (this.ownerMenu && this.ownerMenu.vertical == false) {

                options.xAlign = this.ownerMenu.menuAlign || "left";
                options.yAlign = "below";
                options.outXAlign = null;
            }

            this.menu.showAtEl(this.el, options);

            this.menu.addCls("mini-menu-open");

        }
    },
    hideMenu: function() {
        if (this.menu) {
            this.menu.hide();
        }
    },
    hide: function() {
        this.hideMenu();
        this.setVisible(false);
    },

    __OnItemsChanged: function(e) {
        this.doUpdate();
    },
    getTopMenu: function() {
        if (this.ownerMenu) {
            if (this.ownerMenu.ownerItem) return this.ownerMenu.ownerItem.getTopMenu();
            else return this.ownerMenu;
        }
        return null;
    },

    __OnClick: function(e) {

        if (this.isReadOnly()) return;

        if (this.checkOnClick) {
            if (this.ownerMenu && this.groupName) {
                var groups = this.ownerMenu.getGroupItems(this.groupName);
                if (groups.length > 0) {
                    if (this.checked == false) {
                        for (var i = 0, l = groups.length; i < l; i++) {
                            var item = groups[i];
                            if (item != this) {

                                item.setChecked(false);
                            }
                        }
                        this.setChecked(true);
                    }
                } else {
                    this.setChecked(!this.checked);
                }
            } else {
                this.setChecked(!this.checked);
            }
        }

        this.fire("click");

        var topMenu = this.getTopMenu();
        if (topMenu) {
            topMenu._OnItemClick(this, e);
        }
    },
    __OnMouseUp: function(e) {
        if (this.isReadOnly()) return;

        if (this.ownerMenu) {
            var me = this;
            setTimeout(function() {
                if (me.isDisplay()) {
                    me.ownerMenu.showItemMenu(me);

                }
            }, 1);
        }
    },
    __OnMouseOver: function(e) {

        if (this.isReadOnly()) return;
        this._initInputEvents();
        mini.addClass(this.el, this._hoverCls);

        this.el.title = this.text;

        if (this._textEl.scrollWidth > this._textEl.clientWidth) {
            this.el.title = this.text;
        } else {
            this.el.title = "";
        }

        if (this.ownerMenu) {
            if (this.ownerMenu.isVertical() == true) {
                this.ownerMenu.showItemMenu(this);
            } else if (this.ownerMenu.hasShowItemMenu()) {
                this.ownerMenu.showItemMenu(this);
            }
        }
    },

    __OnMouseOut: function(e) {
        mini.removeClass(this.el, this._hoverCls);
    },
    onClick: function(fn, scope) {
        this.on("click", fn, scope);
    },
    onCheckedChanged: function(fn, scope) {
        this.on("checkedchanged", fn, scope);
    },

    getAttrs: function(el) {
        var attrs = mini.MenuItem.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs, ["text", "iconCls", "iconStyle", "iconPosition", "groupName", "onclick", "oncheckedchanged"]);
        mini._ParseBool(el, attrs, ["checkOnClick", "checked"]);

        return attrs;
    }
});
mini.regClass(mini.MenuItem, 'menuitem');



mini.Separator = function() {
    mini.Separator.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Separator, mini.Control, {
    _clearBorder: false,
    uiCls: "mini-separator",
    _create: function() {
        this.el = document.createElement("span");
        this.el.className = "mini-separator";
    }
});
mini.regClass(mini.Separator, 'separator');









mini.ToolBar = function() {
    mini.ToolBar.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.ToolBar, mini.Container, {
    _clearBorder: false,
    style: "",

    uiCls: "mini-toolbar",
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "mini-toolbar";

    },
    _initEvents: function() {

    },
    doLayout: function() {
        if (!this.canLayout()) return;


        var nodes = mini.getChildNodes(this.el, true);
        for (var i = 0, l = nodes.length; i < l; i++) {
            mini.layout(nodes[i]);
        }

    },









    set_bodyParent: function(value) {

        if (!value) return;

        this.el = value;








        this.doLayout();
    },

    getAttrs: function(el) {

        var attrs = {};
        mini._ParseString(el, attrs, ["id", "borderStyle", "data-options"]);




        this.el = el;
        this.el.uid = this.uid;

        this.addCls(this.uiCls);




        var options = attrs["data-options"];
        if (options) {
            options = eval("(" + options + ")");
            if (options) {

                mini.copyTo(attrs, options);
            }
        }

        return attrs;
    }
});
mini.regClass(mini.ToolBar, "toolbar");


mini.Pager = function() {
    mini.Pager.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Pager, mini.Control, {
    pageIndex: 0,
    pageSize: 10,
    totalCount: 0,
    totalPage: 0,

    showPageIndex: true,
    showPageSize: true,
    showTotalCount: true,

    showPageInfo: true,
    showReloadButton: true,

    _clearBorder: false,

    showButtonText: false,
    showButtonIcon: true,


    sizeText: "",
    firstText: "\u9996\u9875",
    prevText: "\u4e0a\u4e00\u9875",
    nextText: "\u4e0b\u4e00\u9875",
    lastText: "\u5c3e\u9875",
    reloadText: "\u5237\u65b0",


    pageInfoText: "每页 {0} 条, 共 {1} 条",
    sizeList: [10, 20, 50, 100],


    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var pageIndex = kv.pageIndex;
        delete kv.pageIndex;

        mini.Pager.superclass.set.call(this, kv);

        if (!mini.isNull(pageIndex)) {
            this.setPageIndex(pageIndex);
        }
        return this;
    },

    uiCls: "mini-pager",
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "mini-pager";


        var s = '<div class="mini-pager-left"><table cellspacing="0" cellpadding="0" border="0"><tr><td></td><td></td></tr></table></div><div class="mini-pager-right"></div>';
        this.el.innerHTML = s;

        this._leftEl = this.el.childNodes[0];
        this._rightEl = this.el.childNodes[1];




        var tds = this._leftEl.getElementsByTagName("td");
        this._barEl = tds[0];
        this._barEl2 = tds[1];


        this.sizeEl = mini.append(this._barEl, '<span class="mini-pager-size"></span>');

        this.sizeTextEl = mini.before(this.sizeEl, '<span class="mini-pager-sizetext"></span>');


        this.sizeCombo = new mini.ComboBox();
        //this.sizeCombo.setName("pagesize");
        //this.sizeCombo.setWidth(this.pageSizeWidth);
	if (this.pageSizeWidth) this.sizeCombo.setWidth(this.pageSizeWidth);
        this.sizeCombo.render(this.sizeEl);
        mini.append(this.sizeEl, '<span class="separator"></span>');

        this.firstButton = new mini.Button();
        this.firstButton.addCls("mini-pager-firstbutton");
        this.firstButton.render(this._barEl);

        this.prevButton = new mini.Button();
        this.prevButton.addCls("mini-pager-prevbutton");
        this.prevButton.render(this._barEl);

        this.indexEl = document.createElement("span");
        this.indexEl.className = 'mini-pager-index';
        this.indexEl.innerHTML = '<input id="" type="text" class="mini-pager-num"/><span class="mini-pager-pages">/ 0</span>';
        this._barEl.appendChild(this.indexEl);

        this.numInput = this.indexEl.firstChild;
        this.pagesLabel = this.indexEl.lastChild;

        this.nextButton = new mini.Button();
        this.nextButton.addCls("mini-pager-nextbutton");
        this.nextButton.render(this._barEl);

        this.lastButton = new mini.Button();
        this.lastButton.addCls("mini-pager-lastbutton");
        this.lastButton.render(this._barEl);

        mini.append(this._barEl, '<span class="separator"></span>');

        this.reloadButton = new mini.Button();
        this.reloadButton.render(this._barEl);

        this.firstButton.setPlain(true);
        this.prevButton.setPlain(true);
        this.nextButton.setPlain(true);
        this.lastButton.setPlain(true);
        this.reloadButton.setPlain(true);


        this.buttonsEl = mini.append(this._barEl2, '<div class="mini-page-buttons"></div>');


        this.update();
    },

    destroy: function(removeEl) {
        if (this.pageSelect) {
            mini.clearEvent(this.pageSelect);
            this.pageSelect = null;
        }
        if (this.numInput) {
            mini.clearEvent(this.numInput);
            this.numInput = null;
        }
        this.sizeEl = this.sizeTextEl = this._barEl = this._barEl2 = this._leftEl = this._rightEl = this.indexEl = this.buttonsEl = null;

        mini.Pager.superclass.destroy.call(this, removeEl);
    },

    setButtons: function(value) {
        __mini_setControls(value, this.buttonsEl, this);
    },
    getButtonsEl: function() {
        return this.buttonsEl;
    },

    _initEvents: function() {

        mini.Pager.superclass._initEvents.call(this);

        this.firstButton.on("click", function(e) {
            this._OnPageChanged(0);
        }, this);
        this.prevButton.on("click", function(e) {
            this._OnPageChanged(this.pageIndex - 1);
        }, this);
        this.nextButton.on("click", function(e) {
            this._OnPageChanged(this.pageIndex + 1);
        }, this);
        this.lastButton.on("click", function(e) {
            this._OnPageChanged(this.totalPage);
        }, this);
        this.reloadButton.on("click", function(e) {
            this._OnPageChanged();
        }, this);


        function doPage() {
            if (changing) return;
            changing = true;
            var index = parseInt(this.numInput.value);
            if (isNaN(index)) {
                this.update();
            } else {
                this._OnPageChanged(index - 1);
            }
            setTimeout(function() {
                changing = false;
            }, 100);
        }

        var changing = false;
        mini.on(this.numInput, "change", function(e) {
            doPage.call(this);
        }, this);

        mini.on(this.numInput, "keydown", function(e) {
            if (e.keyCode == 13) {
                doPage.call(this);
                e.stopPropagation();
            }
        }, this);


        this.sizeCombo.on("valuechanged", this.__OnPageSelectChanged, this);
    },
    doLayout: function() {
        if (!this.canLayout()) return;
        mini.layout(this._leftEl);
        mini.layout(this._rightEl);
    },
    setPageIndex: function(value) {
        if (isNaN(value)) return;
        this.pageIndex = value;
        this.update();
    },
    getPageIndex: function() {
        return this.pageIndex;
    },
    setPageSize: function(value) {
        if (isNaN(value)) return;
        this.pageSize = value;
        this.update();
    },
    getPageSize: function() {
        return this.pageSize;
    },
    setTotalCount: function(value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.totalCount = value;
        this.update();
    },
    getTotalCount: function() {
        return this.totalCount;
    },
    setSizeList: function(value) {
        if (!mini.isArray(value)) return;
        this.sizeList = value;
        this.update();
    },
    getSizeList: function() {
        return this.sizeList;
    },

    pageSizeWidth: 50,
    setPageSizeWidth: function(value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        if (this.pageSizeWidth != value) {
            this.pageSizeWidth = value;
            this.sizeCombo.setWidth(value);
        }
    },
    getPageSizeWidth: function() {
        return this.pageSizeWidth;
    },

    setPageInfoText: function(value) {
        if (!mini.isString(value)) return;
        this.pageInfoText = value;
    },
    getPageInfoText: function() {
        return this.pageInfoText;
    },
    setShowPageSize: function(value) {
        this.showPageSize = value;
        this.update();
    },
    getShowPageSize: function() {
        return this.showPageSize;
    },
    setShowPageIndex: function(value) {
        this.showPageIndex = value;
        this.update();
    },
    getShowPageIndex: function() {
        return this.showPageIndex;
    },
    setShowTotalCount: function(value) {
        this.showTotalCount = value;
        this.update();
    },
    getShowTotalCount: function() {
        return this.showTotalCount;
    },
    setShowPageInfo: function(value) {
        this.showPageInfo = value;
        this.update();
    },
    getShowPageInfo: function() {
        return this.showPageInfo;
    },
    setShowReloadButton: function(value) {
        this.showReloadButton = value;
        this.update();
    },
    getShowReloadButton: function() {
        return this.showReloadButton;
    },


    setShowButtonText: function(value) {
        this.showButtonText = value;
        this.update();
    },
    getShowButtonText: function() {
        return this.showButtonText;
    },
    setShowButtonIcon: function(value) {

        this.showButtonIcon = value;
        this.update();
    },
    getShowButtonIcon: function() {
        return this.showButtonIcon;
    },



    getTotalPage: function() {
        return this.totalPage;
    },
    update: function(index, size, total) {

        if (mini.isNumber(index)) this.pageIndex = parseInt(index);
        if (mini.isNumber(size)) this.pageSize = parseInt(size);
        if (mini.isNumber(total)) this.totalCount = parseInt(total);

        this.totalPage = parseInt(this.totalCount / this.pageSize) + 1;
        if ((this.totalPage - 1) * this.pageSize == this.totalCount) {
            this.totalPage -= 1;
        }
        if (this.totalCount == 0) this.totalPage = 0;

        if (this.pageIndex > this.totalPage - 1) {
            this.pageIndex = this.totalPage - 1;
        }
        if (this.pageIndex <= 0) this.pageIndex = 0;
        if (this.totalPage <= 0) this.totalPage = 0;

        this.firstButton.enable();
        this.prevButton.enable();
        this.nextButton.enable();
        this.lastButton.enable();

        if (this.pageIndex == 0) {
            this.firstButton.disable();
            this.prevButton.disable();
        }
        if (this.pageIndex >= this.totalPage - 1) {
            this.nextButton.disable();
            this.lastButton.disable();
        }

        var pageIndex = this.pageIndex > -1 ? this.pageIndex + 1 : 0;
        if (this.totalCount == 0) pageIndex = 0;

        this.numInput.value = pageIndex;
        this.pagesLabel.innerHTML = "/ " + this.totalPage;

        var sizeList = this.sizeList.clone();
        if (sizeList.indexOf(this.pageSize) == -1) {
            sizeList.push(this.pageSize);
            sizeList = sizeList.sort(function(a, b) {
                return a > b;
            });
        }
        var sizes = [];
        for (var i = 0, l = sizeList.length; i < l; i++) {
            var num = sizeList[i];
            var option = {};
            option.text = num;
            option.id = num;
            sizes.push(option);
        }
        this.sizeCombo.setData(sizes);
        this.sizeCombo.setValue(this.pageSize);


        this.sizeTextEl.innerHTML = this.sizeText;

        this.sizeTextEl.style.display = this.sizeText ? "" : "none";

        var firstText = this.firstText,
            prevText = this.prevText,
            nextText = this.nextText,
            lastText = this.lastText,
            reloadText = this.reloadText;
        if (this.showButtonText == false) {
            firstText = prevText = nextText = lastText = reloadText = "";
        }
        this.firstButton.setText(firstText);
        this.prevButton.setText(prevText);
        this.nextButton.setText(nextText);
        this.lastButton.setText(lastText);
        this.reloadButton.setText(reloadText);

        var firstText = this.firstText,
            prevText = this.prevText,
            nextText = this.nextText,
            lastText = this.lastText;
        if (this.showButtonText) {
            this.firstButton.setTooltip(firstText);
            this.prevButton.setTooltip(prevText);
            this.nextButton.setTooltip(nextText);
            this.lastButton.setTooltip(lastText);
            this.reloadButton.setTooltip(reloadText);

        }

        this.firstButton.setIconCls(this.showButtonIcon ? "mini-pager-first" : "");
        this.prevButton.setIconCls(this.showButtonIcon ? "mini-pager-prev" : "");
        this.nextButton.setIconCls(this.showButtonIcon ? "mini-pager-next" : "");
        this.lastButton.setIconCls(this.showButtonIcon ? "mini-pager-last" : "");
        this.reloadButton.setIconCls(this.showButtonIcon ? "mini-pager-reload" : "");
        this.reloadButton.setVisible(this.showReloadButton);

        var s = this.reloadButton.el.previousSibling;
        if (s) {
            s.style.display = this.showReloadButton ? "" : "none";
        }


        this._rightEl.innerHTML = String.format(this.pageInfoText, this.pageSize, this.totalCount);

        this.indexEl.style.display = this.showPageIndex ? "" : "none";
        this.sizeEl.style.display = this.showPageSize ? "" : "none";
        this._rightEl.style.display = this.showPageInfo ? "" : "none";




    },
    __OnPageSelectChanged: function(e) {
        var size = parseInt(this.sizeCombo.getValue());
        this._OnPageChanged(0, size);
    },
    _OnPageChanged: function(index, size) {

        var e = {
            pageIndex: mini.isNumber(index) ? index : this.pageIndex,
            pageSize: mini.isNumber(size) ? size : this.pageSize,
            cancel: false
        };
        if (e.pageIndex > this.totalPage - 1) {
            e.pageIndex = this.totalPage - 1;
        }
        if (e.pageIndex < 0) e.pageIndex = 0;

        this.fire("beforepagechanged", e);
        if (e.cancel == true) {
            return;
        }

        this.fire("pagechanged", e);
        this.update(e.pageIndex, e.pageSize);

    },
    onPageChanged: function(fn, scope) {
        this.on("pagechanged", fn, scope);
    },
    getAttrs: function(el) {
        var attrs = mini.Pager.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["onpagechanged", "sizeList", "onbeforepagechanged", "buttons", "sizeText", "pageInfoText"]);
        mini._ParseBool(el, attrs, ["showPageIndex", "showPageSize", "showTotalCount", "showPageInfo", "showReloadButton", "showButtonText", "showButtonIcon"]);
        mini._ParseInt(el, attrs, ["pageIndex", "pageSize", "totalCount", "pageSizeWidth"]);



        if (typeof attrs.sizeList == "string") {
            attrs.sizeList = eval(attrs.sizeList);
        }
        if (attrs.buttons) {
            attrs.buttons = mini.byId(attrs.buttons);

        }



        return attrs;
    }

});
mini.regClass(mini.Pager, "pager");


mini.DataBinding = function() {
    this._bindFields = [];
    this._bindForms = [];
    mini.DataBinding.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.DataBinding, mini.Component, {
    bindField: function(control, source, field, mode, convert) {
        control = mini.get(control);
        source = mini.get(source);
        if (!control || !source || !field) return;
        var bind = {
            control: control,
            source: source,
            field: field,
            convert: convert,
            mode: mode
        };
        this._bindFields.push(bind);

        source.on("currentchanged", this.__OnCurrentChanged, this);
        control.on("valuechanged", this.__OnValueChanged, this);
    },
    bindForm: function(form, source, mode, convert) {
        form = mini.byId(form);
        source = mini.get(source);
        if (!form || !source) return;

        var form = new mini.Form(form);
        var controls = form.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            this.bindField(control, source, control.getName(), mode, convert);
        }
    },

    __OnCurrentChanged: function(e) {
        if (this._doSetting) return;
        this._doSetting = true;

        this._currentRecord = e.record;

        var source = e.sender;
        var record = e.record;


        for (var i = 0, l = this._bindFields.length; i < l; i++) {
            var bind = this._bindFields[i];
            if (bind.source != source) continue;

            var control = bind.control;
            var field = bind.field;
            if (control.setValue) {
                if (record) {

                    var value = mini._getMap(field, record);
                    control.setValue(value);
                } else {
                    control.setValue("");
                }
            }

            if (control.setText && control.textName) {
                if (record) {
                    control.setText(record[control.textName]);
                } else {
                    control.setText("");
                }
            }
        }

        var me = this;
        setTimeout(function() {
            me._doSetting = false;
        }, 10);
    },
    __OnValueChanged: function(e) {

        if (this._doSetting) return;
        this._doSetting = true;

        var control = e.sender;
        var value = control.getValue();



        for (var i = 0, l = this._bindFields.length; i < l; i++) {
            var bind = this._bindFields[i];

            if (bind.control != control || bind.mode === false) continue;
            var source = bind.source;
            var current = this._currentRecord;
            if (!current) continue;

            var obj = {};
            obj[bind.field] = value;

            if (control.getText && control.textName) {
                obj[control.textName] = control.getText();
            }

            source.updateRow(current, obj);

        }

        var me = this;
        setTimeout(function() {
            me._doSetting = false;
        }, 10);
    }
});
mini.regClass(mini.DataBinding, "databinding");


mini.DataSet = function() {
    this._sources = {};
    this._data = {};
    this._links = [];

    this._originals = {};

    mini.DataSet.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.DataSet, mini.Component, {
    add: function(name, listControl) {
        if (!name || !listControl) return;
        this._sources[name] = listControl;

        this._data[name] = [];


        listControl._set_autoCreateNewID(true);
        listControl._set_originalIdField(listControl.getIdField());
        listControl._set_clearOriginals(false);

        listControl.on("addrow", this.__OnRowChanged, this);
        listControl.on("updaterow", this.__OnRowChanged, this);
        listControl.on("deleterow", this.__OnRowChanged, this);
        listControl.on("removerow", this.__OnRowChanged, this);
        listControl.on("preload", this.__OnDataPreLoad, this);

        listControl.on("selectionchanged", this.__OnDataSelectionChanged, this);
    },
    addLink: function(name, childName, parentField) {
        if (!name || !childName || !parentField) return;
        if (!this._sources[name] || !this._sources[childName]) return;

        var link = {
            parentName: name,
            childName: childName,
            parentField: parentField
        };
        this._links.push(link);
    },
    clearData: function() {
        this._data = {};
        this._originals = {};
        for (var name in this._sources) {
            this._data = [];
        }
    },
    getData: function() {
        return this._data;
    },
    _getNameByListControl: function(listControl) {
        for (var name in this._sources) {
            var c = this._sources[name];
            if (c == listControl) return name;
        }
    },
    _getRecord: function(name, record, idField) {
        var rows = this._data[name];
        if (!rows) return false;
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            if (row[idField] == record[idField]) return row;
        }
        return null;
    },

    __OnRowChanged: function(e) {
        var type = e.type;
        var record = e.record;
        var name = this._getNameByListControl(e.sender);

        var oldRow = this._getRecord(name, record, e.sender.getIdField());

        var rows = this._data[name];
        if (oldRow) {
            var rows = this._data[name];
            rows.remove(oldRow);
        }


        if (type == "removerow" && record._state == "added") {} else {
            rows.push(record);
        }


        this._originals[name] = e.sender._get_originals();


        if (record._state == "added") {
            var parentSource = this._getParentSource(e.sender);
            if (parentSource) {
                var current = parentSource.getSelected();
                if (current) {
                    record._parentId = current[parentSource.getIdField()];
                } else {
                    rows.remove(record);
                }
            }
        }
    },
    __OnDataPreLoad: function(e) {
        var source = e.sender;
        var name = this._getNameByListControl(source);
        var idField = e.sender.getIdField();

        var rows = this._data[name];
        var maps = {};
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            maps[row[idField]] = row;
        }


        var ors = this._originals[name]

        if (ors) {


            source._set_originals(ors);
        }


        var nowData = e.data || [];
        for (var i = 0, l = nowData.length; i < l; i++) {
            var row = nowData[i];
            var old = maps[row[idField]];
            if (old) {
                delete old._uid;
                mini.copyTo(row, old);
            }
        }


        var parentSource = this._getParentSource(source);

        if (source.getPageIndex && source.getPageIndex() == 0) {
            var adds = [];
            for (var i = 0, l = rows.length; i < l; i++) {
                var row = rows[i];
                if (row._state == "added") {
                    if (parentSource) {
                        var current = parentSource.getSelected();
                        if (current && current[parentSource.getIdField()] == row._parentId) {
                            adds.push(row);
                        }
                    } else {
                        adds.push(row);
                    }
                }
            }
            adds.reverse();
            nowData.insertRange(0, adds);
        }


        var removes = [];
        for (var i = nowData.length - 1; i >= 0; i--) {
            var row = nowData[i];
            var old = maps[row[idField]];
            if (old && old._state == "removed") {
                nowData.removeAt(i);
                removes.push(old);
            }
        }




    },

    _getParentSource: function(source) {
        var childName = this._getNameByListControl(source);
        for (var i = 0, l = this._links.length; i < l; i++) {
            var link = this._links[i];
            if (link.childName == childName) {
                return this._sources[link.parentName];
            }
        }
    },
    _getLinks: function(source) {
        var name = this._getNameByListControl(source);
        var links = [];
        for (var i = 0, l = this._links.length; i < l; i++) {
            var link = this._links[i];
            if (link.parentName == name) {
                links.push(link);
            }
        }
        return links;
    },
    __OnDataSelectionChanged: function(e) {
        var grid1 = e.sender;
        var record = grid1.getSelected();

        var links = this._getLinks(grid1);
        for (var i = 0, l = links.length; i < l; i++) {
            var link = links[i];
            var grid2 = this._sources[link.childName];

            if (record) {
                var args = {};
                args[link.parentField] = record[grid1.getIdField()];
                grid2.load(args);
            } else {
                grid2.loadData([]);
            }
        }
    }
});
mini.regClass(mini.DataSet, "dataset");


if (typeof mini_doload == "undefined") {
    mini_doload = function(e) {}
}

if (typeof mini_onbeforeLoad == "undefined") {
    mini_onbeforeLoad = function(e) {}
}

if (typeof mini_onpreload == "undefined") {
    mini_onpreload = function(e) {}
    }
if (typeof mini_pageIndex_offset == "undefined") {
    mini_pageIndex_offset = false
}

mini.DataSource = function() {
    mini.DataSource.superclass.constructor.apply(this, arguments);
    this._init();
};
mini.extend(mini.DataSource, mini.Component, {
    idField: "id",
    textField: "text",

    loaded: false,

    _originalIdField: "_id",
    _clearOriginals: true,
    _autoCreateNewID: false,
    _init: function() {
        this.source = [];
        this.dataview = [];
        this.visibleRows = null;
        this.list = null;

        this._ids = {};
        this._removeds = [];
        if (this._clearOriginals) {
            this._originals = {};
        }
        this._errors = {};

        this._selected = null;
        this._selecteds = [];
        this._idSelecteds = {};

        this.__changeCount = 0;
    },
    getSource: function() {
        return this.source;
    },
    getList: function() {
        return this.source.clone();
    },
    getDataView: function() {
        return this.dataview.clone();
    },
    getVisibleRows: function() {

        if (!this.visibleRows) {

            this.visibleRows = this.getDataView().clone();
        }
        return this.visibleRows;
    },
    setData: function(data) {
        this.loadData(data);
    },
    loadData: function(data) {
        if (!mini.isArray(data)) data = [];







        this._init();
        this._doLoadData(data);

        this._dataChanged();
        this.fire("loaddata");
        return true;
    },
    _doLoadData: function(data) {
        this.source = data;
        this.dataview = data;

        var ds = this.source,
            ids = this._ids;
        for (var i = 0, l = ds.length; i < l; i++) {
            var record = ds[i];

            record._id = mini.DataSource.RecordId++;
            ids[record._id] = record;


            record._uid = record._id;
        }
    },
    clearData: function() {
        this._init();
        this._dataChanged();
        this.fire("cleardata");
    },
    clear: function() {
        this.clearData();
    },
    updateRecord: function(record, field, value) {
        if (mini.isNull(record)) return;
        var getMap = mini._getMap,
            setMap = mini._setMap;

        var options = {
        	slient: false
        };
		if(mini.isPlainObject(field) && mini.isPlainObject(value)){
			options = $.extend({}, options, value);
		}

        if (typeof field == 'string') {
            var change = {};
            change[field] = value;
            return this.updateRecord(record, change);
            // this.fire("beforeupdate", { record: record, change: change});

            // var oldValue = getMap(field, record);
            // if (mini.isEquals(oldValue, value)) {

            //     return false;
            // }
            // this.beginChange();

            // setMap(field, value, record);
            // this._setModified(record, field, oldValue);
            // this.endChange();


        } else {
        	if(!options.slient) {
	            this.fire("beforeupdate", {
	                record: record,
	                change: field
	            });
        	}
            this.beginChange();
            for (var p in field) {
                var oldValue = getMap(p, record);
                var value = field[p];
                if (mini.isEquals(oldValue, value)) continue;

                setMap(p, value, record);
                this._setModified(record, p, oldValue);
            }
            this.endChange("update");

        }
        if(!options.slient) {
	        this.fire("update", {
	            record: record
	        });
        }
    },
    deleteRecord: function(record) {
        this._setDeleted(record);

        this._dataChanged();
        this.fire("delete", {
            record: record
        });
    },
    getby_id: function(id) {
        id = typeof id == "object" ? id._id : id;
        return this._ids[id];
    },
    getbyId: function(id) {
        var t = typeof id;
        if (t == "number") return this.getAt(id);
        if (typeof id == "object") {
            if (this.getby_id(id)) return id;
            id = id[this.idField];
        }

        id = String(id);

        var idMap = this.ids;
        if (!idMap) {
            idMap = this.ids = {};
            var data = this.getList();
            for (var i = 0, l = data.length; i < l; i++) {
                var o = data[i];
                var oid = o[this.idField];
                if (!mini.isNull(oid)) idMap[oid] = o;
            }
        }
        return idMap[id];
    },









    getsByIds: function(value) {
        if (mini.isNull(value)) value = "";
        value = String(value);
        var nodes = [];
        var ids = String(value).split(",");
        for (var i = 0, l = ids.length; i < l; i++) {
            var node = this.getbyId(ids[i]);
            if (node) nodes.push(node);
        }
        return nodes;
    },
    getRecord: function(id) {
        return this.getRow(id);
    },
    getRow: function(index) {
        var t = typeof index;
        if (t == "string") return this.getbyId(index);
        else if (t == "number") return this.getAt(index);
        else if (t == "object") return index;
    },
    delimiter: ",",
    getValueAndText: function(records, delimiter) {
        if (mini.isNull(records)) records = [];
        delimiter = delimiter || this.delimiter;

        if (typeof records == "string" || typeof records == "number") {
            records = this.getsByIds(records);
        } else if (!mini.isArray(records)) {
            records = [records];
        }
        var values = [];
        var texts = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            if (record) {
                values.push(this.getItemValue(record));
                texts.push(this.getItemText(record));
            }
        }

        return [values.join(delimiter), texts.join(delimiter)];
    },
    getItemValue: function(item) {
        if (!item) return "";
        var t = mini._getMap(this.idField, item);
        return mini.isNull(t) ? '' : String(t);
    },
    getItemText: function(item) {
        if (!item) return "";

        var t = mini._getMap(this.textField, item);
        return mini.isNull(t) ? '' : String(t);
    },


    isModified: function(reocrd, field) {
        var or = this._originals[reocrd[this._originalIdField]];
        if (!or) return false;
        if (mini.isNull(field)) return false;
        return or.hasOwnProperty(field);
    },
    hasRecord: function(record) {
        return !!this.getby_id(record);
    },
    findRecords: function(property, value) {
        var ifFn = typeof property == "function";
        var fn = property;
        var scope = value || this;
        var data = this.source;
        var records = [];
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            if (ifFn) {
                var ret = fn.call(scope, o);
                if (ret == true) {
                    records[records.length] = o;
                }
                if (ret === 1) break;
            } else {
                if (o[property] == value) {
                    records[records.length] = o;
                }


            }
        }
        return records;
    },
    findRecord: function(property, value) {
        var records = this.findRecords(property, value);
        return records[0];
    },
    each: function(fn, scope) {
        var data = this.getDataView().clone();
        scope = scope || this;
        mini.forEach(data, fn, scope);
    },
    map: function(fn, scope) {
        var data = this.getDataView().clone();
        scope = scope || this;
        return [].map.call(data, fn.bind(scope));
    },
    filterRows: function(fn, scope) {
        var data = this.getDataView().clone();
        scope = scope || this;
        return [].filter.call(data, fn.bind(scope));
    },
    getCount: function() {
        return this.getDataView().length;
    },
    setIdField: function(value) {
        this.idField = value;
    },
    setTextField: function(value) {
        this.textField = value;
    },

    __changeCount: 0,
    beginChange: function() {
        this.__changeCount++;
    },
    endChange: function(action, raise) {
        this.__changeCount--;
        if (this.__changeCount < 0) this.__changeCount = 0;
        if ((raise !== false && this.__changeCount == 0) || raise == true) {
            this.__changeCount = 0;
            this._dataChanged(action);
        }
    },
    _dataChanged: function(action) {
        this.ids = null;
        this.visibleRows = null;
        this.list = null;
        if (this.__changeCount == 0) {
            this.fire("datachanged");
        }
    },


    _setAdded: function(record) {
        record._id = mini.DataSource.RecordId++;


        if (this._autoCreateNewID && !record[this.idField]) {
            record[this.idField] = UUID();
        }


        record._uid = record._id;


        record._state = "added";
        this._ids[record._id] = record;
        delete this._originals[record[this._originalIdField]];
    },
    _setModified: function(record, field, oldValue) {
        if (record._state != "added" &&
            record._state != "deleted" &&
            record._state != "removed"
        ) {
            record._state = "modified";
            var or = this._getOriginal(record);
            if (!or.hasOwnProperty(field)) {
                or[field] = oldValue;
            }
        }
    },
    _setDeleted: function(record) {
        if (record._state != "added" &&
            record._state != "deleted" &&
            record._state != "removed"
        ) {
            record._state = "deleted";
        }
    },
    _setRemoved: function(record) {
        delete this._ids[record._id];
        if (record._state != "added" && record._state != "removed") {
            record._state = "removed";
            delete this._originals[record[this._originalIdField]];
            this._removeds.push(record);
        }
    },
    _getOriginal: function(record) {
        var rid = record[this._originalIdField];
        var or = this._originals[rid];
        if (!or) {
            or = this._originals[rid] = {};
        }
        return or;
    },

    _selected: null,
    _selecteds: [],
    _idSelecteds: null,
    multiSelect: false,
    isSelected: function(id) {
        if (!id) return false;
        if (typeof id != "string") id = id._id;
        return !!this._idSelecteds[id];
    },
    setSelected: function(record) {
        record = this.getby_id(record);
        var selected = this.getSelected();
        if (selected != record) {
            this._selected = record;
            if (record) {
                this.select(record);
            } else {
                this.deselect(this.getSelected());
            }

            this._OnCurrentChanged(record);
        }
    },
    getSelected: function() {
        if (this.isSelected(this._selected)) return this._selected;
        return this._selecteds[0];
    },
    setCurrent: function(record) {
        this.setSelected(record);
    },
    getCurrent: function() {
        return this.getSelected();
    },
    getSelecteds: function() {
        return this._selecteds.clone();
    },
    select: function(record, fireEvent) {
        if (mini.isNull(record)) return;
        this.selects([record], fireEvent);
    },
    deselect: function(record, fireEvent) {
        if (mini.isNull(record)) return;

        this.deselects([record], fireEvent);
    },
    selectAll: function(fireEvent) {
        this.selects(this.getList(), fireEvent);
    },
    deselectAll: function(fireEvent) {
        this.deselects(this.getSelecteds(), fireEvent);
    },
    _fireSelect: function(record, name) {
        var e = {
            record: record,
            cancel: false
        };
        this.fire(name, e);
        return !e.cancel;
    },
    selects: function(records, fireEvent) {
        if (!mini.isArray(records)) return;
        records = records.clone();


        if (this.multiSelect == false) {
            this.deselects(this.getSelecteds());
            if (records.length > 0) records.length = 1;
            this._selecteds = [];
            this._idSelecteds = {};
        }

        var _records = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = this.getbyId(records[i]);

            if (!record) continue;
            if (!this.isSelected(record)) {

                if (fireEvent !== false) {

                    if (!this._fireSelect(record, 'beforeselect')) continue;
                }

                this._selecteds.push(record);
                this._idSelecteds[record._id] = record;
                _records.push(record);
                if (fireEvent !== false) {
                    this.fire("select", {
                        record: record
                    });
                }
            }
        }
        this._OnSelectionChanged(records, true, _records, fireEvent);
    },
    deselects: function(records, fireEvent) {

        if (!mini.isArray(records)) return;
        records = records.clone();
        var _records = [];
        for (var i = records.length - 1; i >= 0; i--) {
            var record = this.getbyId(records[i]);
            if (!record) continue;
            if (this.isSelected(record)) {
                if (fireEvent !== false) {
                    if (!this._fireSelect(record, 'beforedeselect')) continue;
                }


                delete this._idSelecteds[record._id];
                _records.push(record);




            }
        }

        this._selecteds = [];
        var _idSelecteds = this._idSelecteds;
        for (var i in _idSelecteds) {
            var o = _idSelecteds[i];
            if (o._id) this._selecteds.push(o);
        }


        for (var i = records.length - 1; i >= 0; i--) {
            var record = this.getbyId(records[i]);
            if (!record) continue;

            if (fireEvent !== false) {
                this.fire("deselect", {
                    record: record
                });
            }

        }
        this._OnSelectionChanged(records, false, _records, fireEvent);
    },
    _OnSelectionChanged: function(records, select, _records, fireEvent) {
        var e = {
            fireEvent: fireEvent,
            records: records,
            select: select,
            selected: this.getSelected(),
            selecteds: this.getSelecteds(),
            _records: _records
        };
        this.fire("SelectionChanged", e);

        var current = this._current;
        var now = this.getCurrent();
        if (current != now) {
            this._current = now;
            this._OnCurrentChanged(now);
        }
    },
    _OnCurrentChanged: function(record) {
        if (this._currentTimer) {
            clearTimeout(this._currentTimer);
        }
        var me = this;
        this._currentTimer = setTimeout(function() {
            me._currentTimer = null;
            var e = {
                record: record
            };
            me.fire("CurrentChanged", e);
        }, 30);
    },
    _checkSelecteds: function() {
        for (var i = this._selecteds.length - 1; i >= 0; i--) {
            var record = this._selecteds[i];
            var r = this.getby_id(record._id);
            if (!r) {
                this._selecteds.removeAt(i);
                delete this._idSelecteds[record._id];
            }
        }
        if (this._selected && this.getby_id(this._selected._id) == null) {
            this._selected = null;
        }
    },
    setMultiSelect: function(value) {
        if (this.multiSelect != value) {
            this.multiSelect = value;
            if (value == false) {

            }
        }
    },
    getMultiSelect: function() {
        return this.multiSelect;
    },
    selectPrev: function() {
        var record = this.getSelected();
        if (!record) {
            record = this.getAt(0);
        } else {
            var index = this.indexOf(record);
            record = this.getAt(index - 1);
        }
        if (record) {
            this.deselectAll();
            this.select(record);
            this.setCurrent(record);
        }
    },
    selectNext: function() {
        var record = this.getSelected();
        if (!record) {
            record = this.getAt(0);
        } else {
            var index = this.indexOf(record);
            record = this.getAt(index + 1);
        }
        if (record) {
            this.deselectAll();
            this.select(record);
            this.setCurrent(record);
        }
    },
    selectFirst: function() {
        var record = this.getAt(0);
        if (record) {
            this.deselectAll();
            this.select(record);
            this.setCurrent(record);
        }
    },
    selectLast: function() {
        var data = this.getVisibleRows();
        var record = this.getAt(data.length - 1);
        if (record) {
            this.deselectAll();
            this.select(record);
            this.setCurrent(record);
        }
    },
    getSelectedsId: function(delimiter) {
        var nodes = this.getSelecteds();
        var vts = this.getValueAndText(nodes, delimiter);
        return vts[0];
    },
    getSelectedsText: function(delimiter) {
        var nodes = this.getSelecteds();
        var vts = this.getValueAndText(nodes, delimiter);
        return vts[1];
    },

    _filterInfo: null,
    _sortInfo: null,
    filter: function(fn, scope) {

        if (typeof fn != "function") return;
        scope = scope || this;

        this._filterInfo = [fn, scope];

        this._doFilter();

        this._doSort();

        this._dataChanged();

        this.fire("filter");
    },
    clearFilter: function() {
        if (!this._filterInfo) return;
        this._filterInfo = null;
        this._doFilter();
        this._doSort();
        this._dataChanged();
        this.fire("filter");
    },
    sort: function(fn, scope, reverse) {
        if (typeof fn != "function") return;
        scope = scope || this;
        this._sortInfo = [fn, scope, reverse];
        this._doSort();
        this._dataChanged();
        this.fire("sort");
    },
    clearSort: function() {
        this._sortInfo = null;

        this.sortField = this.sortOrder = "";

        this._doFilter();
        this._dataChanged();

        if (this.sortMode == "server") {
            var params = this.getLoadParams();
            params.sortField = "";
            params.sortOrder = "";

            this.load(params);
        } else {

        }

        this.fire("filter");
    },
    _sortMulti: function($) {},
    _doClientSortField: function(sortField, sortOrder, dataType) {

        var sortFn = this._getSortFnByField(sortField, dataType);
        if (!sortFn) return;





        var reverse = sortOrder == "desc";
        this.sort(sortFn, this, reverse);
    },
    _getSortFnByField: function(field, sortType) {
        if (typeof field == 'function') return field;

        if (!field) return null;
        var sortFn = null;
        var typeFn = mini.sortTypes[sortType];
        if (!typeFn) typeFn = mini.sortTypes["string"];

        function sortBy(a, b) {

            var a1 = mini._getMap(field, a),
                b1 = mini._getMap(field, b);

            var nullA = mini.isNull(a1) || a1 === "";
            var nullB = mini.isNull(b1) || b1 === "";
            if (nullA) return 0;
            if (nullB) return 1;

            if (sortType == "chinese") {
                return a1.localeCompare(b1);
            }

            var v1 = typeFn(a1);
            var v2 = typeFn(b1);
            if (v1 > v2) return 1;
            else return 0;


        }

        sortFn = sortBy;
        return sortFn;
    },





    ajaxOptions: null,
    autoLoad: false,
    url: "",

    pageSize: 10,
    pageIndex: 0,
    totalCount: 0,
    totalPage: 0,

    sortField: "",
    sortOrder: "",

    loadParams: null,
    getLoadParams: function() {
        return this.loadParams || {};
    },


    sortMode: "server",

    pageIndexField: "pageIndex",
    pageSizeField: "pageSize",
    sortFieldField: "sortField",
    sortOrderField: "sortOrder",
    totalField: "total",
    dataField: "data",

    startField: '',
    limitField: '',

    errorField: 'status',
    errorMsgField: 'message',
    stackTraceField: 'stackTrace',

    load: function(params, success, error, complete) {
        if (typeof params == "string") {
            this.setUrl(params);
            return;
        }

        if (this._loadTimer) clearTimeout(this._loadTimer);
        this.loadParams = params || {};
        if (!mini.isNumber(this.loadParams.pageIndex)) this.loadParams.pageIndex = 0;

        if (this._xhr) {
            this._xhr.abort();
        }
        if (this.ajaxAsync && mini_ajaxAsyncInvoke) {
            var me = this;
            this._loadTimer = setTimeout(function() {
                me._doLoadAjax(me.loadParams, success, error, complete);
                me._loadTimer = null;
            }, 1);
        } else {
            this._doLoadAjax(this.loadParams, success, error, complete);
        }
    },
    reload: function(success, error, complete) {

        this.load(this.loadParams, success, error, complete);
    },
    gotoPage: function(index, size) {
        var params = this.loadParams || {};
        if (mini.isNumber(index)) params.pageIndex = index;
        if (mini.isNumber(size)) params.pageSize = size;
        this.load(params);
    },

    sortBy: function(sortField, sortOrder) {
        this.sortField = sortField;
        this.sortOrder = sortOrder == "asc" ? "asc" : "desc";
        if (this.sortMode == "server") {
            var params = this.getLoadParams();
            params.sortField = sortField;
            params.sortOrder = sortOrder;
            params.pageIndex = this.pageIndex;
            this.load(params);
        } else {


        }
    },
    setSortField: function(value) {
        this.sortField = value;
        if (this.sortMode == "server") {
            var params = this.getLoadParams();
            params.sortField = value;
        }
    },
    setSortOrder: function(value) {
        this.sortOrder = value;
        if (this.sortMode == "server") {
            var params = this.getLoadParams();
            params.sortOrder = value;
        }
    },

    checkSelectOnLoad: true,
    selectOnLoad: false,

    ajaxData: null,
    ajaxAsync: true,
    ajaxType: '',


    _doLoadAjax: function(params, success, errorFn, complete, _successHandler) {

        params = params || {};
        if (mini.isNull(params.pageIndex)) params.pageIndex = this.pageIndex;
        if (mini.isNull(params.pageSize)) params.pageSize = this.pageSize;

        if (params.sortField) this.sortField = params.sortField;
        if (params.sortOrder) this.sortOrder = params.sortOrder;
        params.sortField = this.sortField;
        params.sortOrder = this.sortOrder;

        if(mini_pageIndex_offset){
            this.loadParams = mini.clone(params);
        } else {
        this.loadParams = params;
        }

        var url = this._evalUrl();
        var type = this._evalType(url);

        var obj = mini._evalAjaxData(this.ajaxData, this);

        jQuery.extend(true, params, obj);

        var e = {
            url: url,
            async: this.ajaxAsync,
            type: type,
            data: params,
            params: params,
            cache: false,
            cancel: false
        };




        jQuery.extend(true, e, this.ajaxOptions);
        mini_onbeforeLoad(e);

        this._OnBeforeLoad(e);
        if (e.cancel == true) {
            params.pageIndex = this.getPageIndex();
            params.pageSize = this.getPageSize();
            return;
        }


        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }

        if (e.url != url && e.type == type) {
            e.type = this._evalType(e.url);
        }


        var o = {};
        o[this.pageIndexField] = params.pageIndex;
        o[this.pageSizeField] = params.pageSize;
        if (params.sortField) o[this.sortFieldField] = params.sortField;
        if (params.sortOrder) o[this.sortOrderField] = params.sortOrder;

        if (this.startField && this.limitField) {
            o[this.startField] = params.pageIndex * params.pageSize;
            o[this.limitField] = params.pageSize;
        }







        jQuery.extend(true, params, o);
        jQuery.extend(true, e.data, o);


        if (this.sortMode == 'client') {
            params[this.sortFieldField] = "";
            params[this.sortOrderField] = "";
        }







        var selected = this.getSelected();
        this._currentSelectValue = selected ? selected[this.idField] : null;;
        if (mini.isNumber(this._currentSelectValue)) this._currentSelectValue = String(this._currentSelectValue);


        var selecteds = this.getSelecteds();
        var _selectsArr = [];
        for (var i = 0, l = selecteds.length; i < l; i++) {
            var id = selecteds[i][this.idField];
            if (!mini.isNull(id)) id = String(id);
            _selectsArr.push(id)
        }
        this._selectedValue = _selectsArr.length == 0 ? null : _selectsArr;
        if (mini.isNumber(this._selectedValue)) this._selectedValue = String(this._selectedValue);


        var me = this;
        me._resultObject = null;


        var async = e.async;
        mini.copyTo(e, {
            success: function(text, textStatus, xhr) {


                if (!text || text == "null") {
                    text = '{ tatal: 0, data: [] }';
                }

                delete e.params;
                var obj = {
                    text: text,
                    result: null,
                    sender: me,
                    options: e,
                    xhr: xhr
                };
                var result = null;
                try {
                    mini_doload(obj);
                    result = obj.result;
                    if (!result) {
                        result = mini.decode(text);
                    }
                } catch (ex) {
                    if (mini_debugger == true) {
                        alert(url + "\n json is error.");
                    }
                }

                if (result && !mini.isArray(result)) {
                    result.total = parseInt(mini._getMap(me.totalField, result));
                    result.data = mini._getMap(me.dataField, result);
                } else {
                    if (result == null) {
                        result = {};
                        result.data = [];
                        result.total = 0;
                    } else if (mini.isArray(result)) {
                        var r = {};
                        r.data = result;
                        r.total = result.length;
                        result = r;
                    }
                }
                if (!result.data) result.data = [];
                if (!result.total) result.total = 0;
                me._resultObject = result;

                if (!mini.isArray(result.data)) {
                    result.data = [result.data];
                }

                var ex = {
                    xhr: xhr,
                    text: text,
                    textStatus: textStatus,
                    result: result,
                    total: result.total,
                    data: result.data.clone(),

                    pageIndex: params[me.pageIndexField],
                    pageSize: params[me.pageSizeField]
                };


                var error = mini._getMap(me.errorField, result);
                var errorMsg = mini._getMap(me.errorMsgField, result);
                var stackTrace = mini._getMap(me.stackTraceField, result);

                if (mini.isNumber(error) && error != 1 || error === false) {

                    ex.textStatus = "servererror";
                    ex.errorCode = error;
                    ex.stackTrace = stackTrace || "";
                    ex.errorMsg = errorMsg || "";
                    if (mini_debugger == true) {
                        alert(url + "\n" + ex.textStatus + "\n" + ex.errorMsg + "\n" + ex.stackTrace);
                    }
                    me.fire("loaderror", ex);
                    if (errorFn) errorFn.call(me, ex);
                } else {
		    if (ex.pageIndex > 0 && ex.data.length == 0) {
                        me.gotoPage(ex.pageIndex - 1);
                        return
                    }
                    if (_successHandler) {
                        _successHandler(ex);
                    } else {

                        mini_onpreload(ex);
                        me.pageIndex = ex.pageIndex;
                        me.pageSize = ex.pageSize;
                        me.setTotalCount(ex.total);


                        me._OnPreLoad(ex);

                        me.loaded = true;


                        me.setData(ex.data);









                        if (me._selectedValue && me.checkSelectOnLoad) {
                            var selects = [];
                            var _selects = me._selectedValue;
                            if (_selects.length > 0) {
                                for (var i = 0, l = _selects.length; i < l; i++) {

                                    var o = me.getbyId(_selects[i]);
                                    if (o) {
                                        selects.push(o);
                                    }
                                }






                                if (selects.length) me.selects(selects);

                                me._selected = me.getbyId(me._currentSelectValue);

                            }
                        }




                        if (me.getSelected() == null && me.selectOnLoad && me.getDataView().length > 0) {
                            me.select(0);
                        }
                        me.fire("load", ex);

                        if (success) {
                            if (async) {
                                setTimeout(function() {
                                    success.call(me, ex);
                                }, 20);
                            } else {
                                success.call(me, ex);
                            }
                        }



                    }
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                if (textStatus == "abort") return;

                var ex = {
                    xhr: xhr,
                    text: xhr.responseText,
                    textStatus: textStatus
                };
                ex.errorMsg = xhr.responseText;
                ex.errorCode = xhr.status;


                if (mini_debugger == true) {
                    alert(url + "\n" + ex.errorCode + "\n" + ex.errorMsg);
                }

                me.fire("loaderror", ex);
                if (errorFn) errorFn.call(me, ex);
            },
            complete: function(xhr, textStatus) {
                var ex = {
                    xhr: xhr,
                    text: xhr.responseText,
                    textStatus: textStatus
                };
                me.fire("loadcomplete", ex);
                if (complete) complete.call(me, ex);
                me._xhr = null;
            }
        });
        if (this._xhr) {

        }
        this._xhr = mini.ajax(e);
    },
    _OnBeforeLoad: function(e) {
        this.fire("beforeload", e);
    },
    _OnPreLoad: function(e) {
        this.fire("preload", e);
    },
    _evalUrl: function() {
        var url = this.url;
        if (typeof url == "function") {
            url = url();
        } else {
            try {
                url = eval(url);
            } catch (ex) {
                url = this.url;
            }
            if (!url) {
                url = this.url;
            }
        }
        return url;
    },
    _evalType: function(url) {
        var type = this.ajaxType;
        if (!type) {
            type = 'post';
            if (url) {
                if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
                    type = "get";
                }
            } else {
                type = "get";
            }
        }
        return type;
    },
    setSortMode: function(value) {
        this.sortMode = value;
    },
    getSortMode: function() {
        return this.sortMode;
    },
    setAjaxOptions: function(value) {
        this.ajaxOptions = value;
    },
    getAjaxOptions: function() {
        return this.ajaxOptions;
    },
    setAutoLoad: function(value) {
        this.autoLoad = value;
    },
    getAutoLoad: function() {
        return this.autoLoad;
    },
    setUrl: function(value) {
        this.url = value;
        if (this.autoLoad) {
            this.load();
        }
    },
    getUrl: function() {
        return this.url;
    },
    setPageIndex: function(value) {
        this.pageIndex = value;

        var params = this.loadParams || {};
        if (mini.isNumber(value)) params.pageIndex = value;

        this.fire("pageinfochanged");
    },
    getPageIndex: function() {
        return this.pageIndex;
    },
    setPageInfoText: function(value) {
        this.pageInfoText = value;
        this.fire("pageinfochanged");
    },
    getPageInfoText: function() {
        return this.pageInfoText;
    },
    setPageSize: function(value) {
        this.pageSize = value;

        var params = this.loadParams || {};
        if (mini.isNumber(value)) params.pageSize = value;

        this.fire("pageinfochanged");
    },
    getPageSize: function() {
        return this.pageSize;
    },
    setTotalCount: function(value) {
        this.totalCount = parseInt(value);
        this.fire("pageinfochanged");
    },
    getTotalCount: function() {
        return this.totalCount;
    },
    getTotalPage: function() {
        return this.totalPage;
    },
    setCheckSelectOnLoad: function(value) {
        this.checkSelectOnLoad = value;
    },
    getCheckSelectOnLoad: function() {
        return this.checkSelectOnLoad;
    },
    setSelectOnLoad: function(value) {
        this.selectOnLoad = value;
    },
    getSelectOnLoad: function() {
        return this.selectOnLoad;
    }

});
mini.DataSource.RecordId = 1;








mini.DataTable = function() {
    mini.DataTable.superclass.constructor.apply(this, arguments);
};
mini.extend(mini.DataTable, mini.DataSource, {
    _init: function() {
        mini.DataTable.superclass._init.call(this);
        this._filterInfo = null;
        this._sortInfo = null;
    },
    add: function(record) {
        return this.insert(this.source.length, record);
    },
    addRange: function(records) {
        this.insertRange(this.source.length, records);
    },
    insert: function(index, record) {
        if (!record) return null;

        var e = {
            index: index,
            record: record
        };

        this.fire("beforeadd", e);

        if (!mini.isNumber(index)) {
            var insertRow = this.getRecord(index);
            if (insertRow) {
                index = this.indexOf(insertRow);
            } else {
                index = this.getDataView().length;
            }

        }

        var target = this.dataview[index];
        if (target) {
            this.dataview.insert(index, record);
        } else {
            this.dataview.add(record);
        }

        if (this.dataview != this.source) {
            if (target) {
                var sourceIndex = this.source.indexOf(target);
                this.source.insert(sourceIndex, record);
            } else {
                this.source.add(record);
            }
        }

        this._setAdded(record);

        this._dataChanged();


        this.fire("add", e);
    },
    insertRange: function(index, records) {
        if (!mini.isArray(records)) return;
        this.beginChange();
        records = records.clone();
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            this.insert(index + i, record);
        }
        this.endChange();
    },
    remove: function(record, autoSelect) {
        var index = this.indexOf(record);
        return this.removeAt(index, autoSelect);
    },
    removeAt: function(index, autoSelect) {
        var record = this.getAt(index);
        if (!record) return null;

        var e = {
            record: record
        };
        this.fire("beforeremove", e);

        var isSelected = this.isSelected(record);


        this.source.remove(record);
        if (this.dataview !== this.source) {
            this.dataview.removeAt(index);
        }

        this._setRemoved(record);

        this._checkSelecteds();

        this._dataChanged();

        this.fire("remove", e);

        if (isSelected && autoSelect) {
            var newSelected = this.getAt(index);
            if (!newSelected) newSelected = this.getAt(index - 1);
            this.deselectAll();
            this.select(newSelected);
        }
    },
    removeRange: function(records, autoSelect) {
        if (!mini.isArray(records)) return;
        this.beginChange();
        records = records.clone();
        for (var i = 0, l = records.length; i < l; i++) {
            var o = records[i];
            this.remove(o, autoSelect);
        }
        this.endChange();
    },
    move: function(record, newIndex) {
        if (!record || !mini.isNumber(newIndex)) return;
        if (newIndex < 0) return;
        if (mini.isArray(record)) {
            this.beginChange();

            var rs = record,
                targetRecord = this.getAt(newIndex);
            var sf = this;
            mini.sort(rs, function(a, b) {
                return sf.indexOf(a) > sf.indexOf(b);
            }, this);
            for (var i = 0, l = rs.length; i < l; i++) {
                var r = rs[i];
                var index = this.indexOf(targetRecord);
                this.move(r, index);
            }
            this.endChange();
            return;
        }

        var e = {
            index: newIndex,
            record: record
        };
        this.fire("beforemove", e);

        var target = this.dataview[newIndex];

        this.dataview.remove(record);

        var _index = this.dataview.indexOf(target);
        if (_index != -1) {
            newIndex = _index;
        }
        if (target) {
            this.dataview.insert(newIndex, record);
        } else {
            this.dataview.add(record);
        }

        if (this.dataview != this.source) {
            this.source.remove(record);
            var _index = this.source.indexOf(target);
            if (_index != -1) {
                newIndex = _index;
            }
            if (target) {
                this.source.insert(newIndex, record);
            } else {
                this.source.add(record);
            }
        }

        this._dataChanged();


        this.fire("move", e);
    },
    indexOf: function(record) {
        return this.getVisibleRows().indexOf(record);
    },
    getAt: function(index) {

        return this.getVisibleRows()[index];
    },
    getRange: function(start, end) {
        if (start > end) {
            var t = start;
            start = end;
            end = t;
        }
        var range = [];
        for (var i = start, l = end; i <= l; i++) {
            var o = this.dataview[i];
            range.push(o);
        }
        return range;
    },
    selectRange: function(start, end) {
        if (!mini.isNumber(start)) start = this.indexOf(start);
        if (!mini.isNumber(end)) end = this.indexOf(end);
        if (mini.isNull(start) || mini.isNull(end)) return;

        var rs = this.getRange(start, end);
        this.selects(rs);
    },
    toArray: function() {
        return this.source.clone();
    },

    isChanged: function() {
        return this.getChanges().length > 0;
    },

    getChanges: function(rowState, onlyField) {
        var changes = [];
        if (rowState == "removed" || rowState == null) {
            changes.addRange(this._removeds.clone());
        }
        for (var i = 0, l = this.source.length; i < l; i++) {
            var record = this.source[i];
            if (!record._state) continue;
            if (record._state == rowState || rowState == null) {
                changes[changes.length] = record;
            }
        }
        var rows = changes;
        if (onlyField) {
            for (var i = 0, l = rows.length; i < l; i++) {
                var row = rows[i];
                if (row._state == "modified") {
                    var newRow = {};
                    newRow._state = row._state;
                    newRow[this.idField] = row[this.idField];
                    for (var field in row) {
                        var modifed = this.isModified(row, field);
                        if (modifed) {
                            newRow[field] = row[field];
                        }
                    }
                    rows[i] = newRow;
                }
            }
        }

        var grid = this;
        mini.sort(changes, function(a, b) {
            var index1 = grid.indexOf(a);
            var index2 = grid.indexOf(b);
            if (index1 > index2) return 1;
            if (index1 < index2) return -1;
            return 0;
        });
        return changes;
    },

    accept: function() {
        this.beginChange();
        for (var i = 0, l = this.source.length; i < l; i++) {
            var record = this.source[i];
            this.acceptRecord(record);
        }
        this._removeds = [];
        this._originals = {};
        this.endChange();
    },
    reject: function() {
        this.beginChange();
        for (var i = 0, l = this.source.length; i < l; i++) {
            var record = this.source[i];
            this.rejectRecord(record);
        }
        this._removeds = [];
        this._originals = {};
        this.endChange();
    },
    acceptRecord: function(node) {
        if (!node._state) return;
        delete this._originals[node[this._originalIdField]];
        if (node._state == "deleted") {
            this.remove(node);
        } else {
            delete node._state;
            delete this._originals[node[this._originalIdField]];
            this._dataChanged();
        }
        this.fire("update", {
            record: node
        });
    },
    rejectRecord: function(node) {
        if (!node._state) return;
        if (node._state == "added") {
            this.remove(node);
        } else if (node._state == "modified" || node._state == "deleted") {
            var or = this._getOriginal(node);





            for (var field in or) {
                var val = or[field];
                mini._setMap(field, val, node);
            }


            delete node._state;
            delete this._originals[node[this._originalIdField]];
            this._dataChanged();
            this.fire("update", {
                record: node
            });
        }
    },

    _doFilter: function() {
        if (!this._filterInfo) {
            this.dataview = this.source;
            return;
        }
        var fn = this._filterInfo[0],
            scope = this._filterInfo[1];
        var view = [];
        var data = this.source;
        for (var i = 0, l = data.length; i < l; i++) {
            var r = data[i];
            var add = fn.call(scope, r, i, this);
            if (add !== false) {
                view.push(r);
            }
        }
        this.dataview = view;
    },
    _doSort: function() {
        if (!this._sortInfo) return;
        var fn = this._sortInfo[0],
            scope = this._sortInfo[1],
            reverse = this._sortInfo[2];
        var dv = this.getDataView().clone();
        mini.sort(dv, fn, scope);
        if (reverse) dv.reverse();
        this.dataview = dv;
    }
});
mini.regClass(mini.DataTable, "datatable");





mini.DataTree = function() {
    mini.DataTree.superclass.constructor.apply(this, arguments);
};
mini.extend(mini.DataTree, mini.DataSource, {
    isTree: true,

    expandOnLoad: false,

    idField: "id",
    parentField: "pid",
    nodesField: "children",
    checkedField: "checked",
    resultAsTree: true,

    dataField: "",

    checkModel: "cascade",
    autoCheckParent: false,
    onlyLeafCheckable: false,


    setExpandOnLoad: function(value) {
        this.expandOnLoad = value;
    },
    getExpandOnLoad: function() {
        return this.expandOnLoad;
    },
    setParentField: function(value) {
        this.parentField = value;
    },
    setNodesField: function(value) {
        if (this.nodesField != value) {
            var data = this.root[this.nodesField];
            this.nodesField = value;
            this._doLoadData(data);
        }
    },
    setResultAsTree: function(value) {
        this.resultAsTree = value;
    },
    setCheckRecursive: function(value) {
        this.checkModel = value ? "cascade" : "multiple";
    },
    getCheckRecursive: function() {
        return this.checkModel == "cascade";
    },
    setShowFolderCheckBox: function(value) {
        this.onlyLeafCheckable = !value;
    },
    getShowFolderCheckBox: function() {
        return !this.onlyLeafCheckable;
    },
    _doExpandOnLoad: function(nodes) {

        var nodesField = this.nodesField;
        var expandOnLoad = this.expandOnLoad;

        function eachNodes(nodes, level) {
            for (var i = 0, l = nodes.length; i < l; i++) {
                var node = nodes[i];

                if (mini.isNull(node.expanded)) {
                    if (expandOnLoad === true ||
                        (mini.isNumber(expandOnLoad) && level <= expandOnLoad)) {
                        node.expanded = true;
                    } else {
                        node.expanded = false;
                    }
                } else {

                }

                var childs = node[nodesField];
                if (childs) {
                    eachNodes(childs, level + 1);
                }
            }
        }
        eachNodes(nodes, 0);
    },


    _OnBeforeLoad: function(e) {
        var node = this._loadingNode || this.root;
        e.node = node;

        if (this._isNodeLoading()) {
            e.async = true;
            e.isRoot = e.node == this.root;
            if (!e.isRoot) {
                e.data[this.idField] = this.getItemValue(e.node);
            }
        }
        this.fire("beforeload", e);
    },
    _OnPreLoad: function(e) {

        if (this.resultAsTree == false) {
            e.data = mini.arrayToTree(e.data, this.nodesField, this.idField, this.parentField)
        }
        this.fire("preload", e);




    },
    _init: function() {
        mini.DataTree.superclass._init.call(this);
        this.root = {
            _id: -1,
            _level: -1
        };
        this.source = this.root[this.nodesField] = [];
        this.viewNodes = null;
        this.dataview = null;
        this.visibleRows = null;
        this.list = null;

        this._ids[this.root._id] = this.root;
    },
    _doLoadData: function(data) {
        data = data || [];

        this._doExpandOnLoad(data);

        this.source = this.root[this.nodesField] = data;
        this.viewNodes = null;
        this.dataview = null;
        this.visibleRows = null;
        this.list = null;


        var ds = mini.treeToArray(data, this.nodesField);
        var ids = this._ids;
        ids[this.root._id] = this.root;
        for (var i = 0, l = ds.length; i < l; i++) {
            var node = ds[i];

            node._id = mini.DataSource.RecordId++;
            ids[node._id] = node;


            node._uid = node._id;
        }


        var checkedField = this.checkedField;
        var ds = mini.treeToArray(data, this.nodesField, "_id", "_pid", this.root._id);
        for (var i = 0, l = ds.length; i < l; i++) {
            var node = ds[i];
            var parentNode = this.getParentNode(node);
            node._pid = parentNode._id;
            node._level = parentNode._level + 1;
	    if(node._state) delete node._state;





            node.checked = node[checkedField];
            if (node.checked) {
                node.checked = node.checked != 'false';
            }


            if (this.isLeafNode(node) == false) {
                var cs = node[this.nodesField];
                if (cs && cs.length > 0) {

                }
            }
        }


        this._doUpdateLoadedCheckedNodes();
    },
    _setAdded: function(node) {
        var parentNode = this.getParentNode(node);
        node._id = mini.DataSource.RecordId++;


        if (this._autoCreateNewID && !node[this.idField]) {
            node[this.idField] = UUID();
        }


        node._uid = node._id;


        node._pid = parentNode._id;
        if (parentNode[this.idField]) {
            node[this.parentField] = parentNode[this.idField];
        }
        node._level = parentNode._level + 1;
        node._state = "added";
        this._ids[node._id] = node;
        delete this._originals[node[this._originalIdField]];
    },
    _createNodes: function(node) {
        var nodes = node[this.nodesField];
        if (!nodes) {
            nodes = node[this.nodesField] = [];

        }
        if (this.viewNodes && !this.viewNodes[node._id]) {
            this.viewNodes[node._id] = [];
        }
        return nodes;
    },

    addNode: function(node, parentNode) {
        if (!node) return;
        return this.insertNode(node, -1, parentNode);
    },
    addNodes: function(nodes, parentNode, action) {
        if (!mini.isArray(nodes)) return;
        if (mini.isNull(action)) action = "add";
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.insertNode(node, action, parentNode);
        }
    },
    insertNodes: function(nodes, index, parentNode) {
        if (!mini.isNumber(index)) return;
        if (!mini.isArray(nodes)) return;
        if (!parentNode) parentNode = this.root;
        this.beginChange();

        var pnodes = this._createNodes(parentNode);
        if (index < 0 || index > pnodes.length) index = pnodes.length;

        nodes = nodes.clone();
        for (var i = 0, l = nodes.length; i < l; i++) {
            this.insertNode(nodes[i], index + i, parentNode);
        }

        this.endChange();
        return nodes;
    },
    removeNode: function(node) {
        var parentNode = this.getParentNode(node);
        if (!parentNode) return;
        var index = this.indexOfNode(node);
        return this.removeNodeAt(index, parentNode);
    },
    removeNodes: function(nodes) {
        if (!mini.isArray(nodes)) return;
        this.beginChange();
        nodes = nodes.clone();
        for (var i = 0, l = nodes.length; i < l; i++) {
            this.removeNode(nodes[i]);
        }
        this.endChange();
    },
    moveNodes: function(nodes, targetNode, action) {
        if (!nodes || nodes.length == 0 || !targetNode || !action) return;
        this.beginChange();
        var sf = this;
        mini.sort(nodes, function(a, b) {
            return sf.indexOf(a) > sf.indexOf(b);
        }, this);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.moveNode(node, targetNode, action);
            if (i != 0) {
                targetNode = node;
                action = "after";
            }

        }
        this.endChange();
    },

    moveNode: function(node, targetNode, action) {
        if (!node || !targetNode || mini.isNull(action)) return;


        if (this.viewNodes) {
            var parentNode = targetNode;
            var index = action;
            if (index == 'before') {
                parentNode = this.getParentNode(targetNode);
                index = this.indexOfNode(targetNode);
            } else if (index == 'after') {
                parentNode = this.getParentNode(targetNode);
                index = this.indexOfNode(targetNode) + 1;
            } else if (index == 'add' || index == "append") {
                if (!parentNode[this.nodesField]) parentNode[this.nodesField] = [];
                index = parentNode[this.nodesField].length;
            } else if (!mini.isNumber(index)) {
                return;
            }
            if (this.isAncestor(node, parentNode)) {
                return false;
            }

            var childNodes = this.getChildNodes(parentNode);
            if (index < 0 || index > childNodes.length) index = childNodes.length;


            var ___node = {};
            childNodes.insert(index, ___node);


            var oldParentNode = this.getParentNode(node);
            var oldChildNodes = this.getChildNodes(oldParentNode);
            oldChildNodes.remove(node);


            index = childNodes.indexOf(___node);
            childNodes[index] = node;

        }

        var parentNode = targetNode;
        var index = action;
        var childNodes = this._createNodes(parentNode);

        if (index == 'before') {
            parentNode = this.getParentNode(targetNode);
            childNodes = this._createNodes(parentNode);
            index = childNodes.indexOf(targetNode);
        } else if (index == 'after') {
            parentNode = this.getParentNode(targetNode);
            childNodes = this._createNodes(parentNode);
            index = childNodes.indexOf(targetNode) + 1;
        } else if (index == 'add' || index == "append") {
            index = childNodes.length;
        } else if (!mini.isNumber(index)) {
            return;
        }
        if (this.isAncestor(node, parentNode)) {
            return false;
        }

        if (index < 0 || index > childNodes.length) index = childNodes.length;


        var ___node = {};
        childNodes.insert(index, ___node);


        var oldParentNode = this.getParentNode(node);
        oldParentNode[this.nodesField].remove(node);


        index = childNodes.indexOf(___node);
        childNodes[index] = node;


        this._updateParentAndLevel(node, parentNode);

        this._dataChanged();
        var e = {
            oldParentNode: oldParentNode,
            parentNode: parentNode,
            index: index,
            node: node
        };

        this.fire("movenode", e);
    },

    insertNode: function(node, index, parentNode) {
        if (!node) return;
        if (!parentNode) {
            parentNode = this.root;
            index = "add";
        }
        if (!mini.isNumber(index)) {
            switch (index) {
                case "before":
                    index = this.indexOfNode(parentNode);
                    parentNode = this.getParentNode(parentNode);
                    node = this.insertNode(node, index, parentNode);
                    break;
                case "after":
                    index = this.indexOfNode(parentNode);
                    parentNode = this.getParentNode(parentNode);
                    node = this.insertNode(node, index + 1, parentNode);
                    break;
                case "append":
                case "add":
                    node = this.addNode(node, parentNode);
                    break;
                default:
                    break;
            }
            return node;
        };

        var nodes2 = this._createNodes(parentNode);
        var nodes = this.getChildNodes(parentNode);
        if (index < 0) index = nodes.length;

        nodes.insert(index, node);

        index = nodes.indexOf(node);

        if (this.viewNodes) {
            var preNode = nodes[index - 1];
            if (preNode) {
                var index2 = nodes2.indexOf(preNode);
                nodes2.insert(index2 + 1, node);
            } else {
                nodes2.insert(0, node);
            }
        }

        node._pid = parentNode._id;
        this._setAdded(node);
        this.cascadeChild(node, function(n, i, p) {
            n._pid = p._id;
            this._setAdded(n);
        }, this);

        this._dataChanged();
        var e = {
            parentNode: parentNode,
            index: index,
            node: node
        };
        this.fire("addnode", e);
        return node;
    },
    removeNodeAt: function(index, parentNode) {

        if (!parentNode) parentNode = this.root;
        var nodes = this.getChildNodes(parentNode);
        var node = nodes[index];
        if (!node) return null;

        nodes.removeAt(index);
        if (this.viewNodes) {
            var nodes2 = parentNode[this.nodesField];
            nodes2.remove(node);
        }

        this._setRemoved(node);
        this.cascadeChild(node, function(n, i, p) {
            this._setRemoved(n);
        }, this);

        this._checkSelecteds();

        this._dataChanged();
        var e = {
            parentNode: parentNode,
            index: index,
            node: node
        };
        this.fire("removenode", e);

        return node;
    },


    bubbleParent: function(node, fn, scope) {
        scope = scope || this;
        if (node) fn.call(this, node);
        var parentNode = this.getParentNode(node);
        if (parentNode && parentNode != this.root) {
            this.bubbleParent(parentNode, fn, scope);
        }
    },

    cascadeChild: function(node, fn, scope) {
        if (!fn) return;
        if (!node) node = this.root;

        var nodes = this.getChildNodes(node);
        if (nodes) {
            nodes = nodes.clone();
            for (var i = 0, l = nodes.length; i < l; i++) {
                var c = nodes[i];
                if (fn.call(scope || this, c, i, node) === false) return;
                this.cascadeChild(c, fn, scope);
            }
        }
    },

    eachChild: function(node, fn, scope) {
        if (!fn || !node) return;
        var nodes = node[this.nodesField];
        if (nodes) {
            var list = nodes.clone();
            for (var i = 0, l = list.length; i < l; i++) {
                var o = list[i];
                if (fn.call(scope || this, o, i, node) === false) break;
            }
        }
    },

    collapse: function(node, deep) {
        node = this.getNode(node);
        if (!node) return;
        this.beginChange();

        node.expanded = false;
        if (deep) {
            this.eachChild(node, function(o) {
                if (o[this.nodesField] != null) {
                    this.collapse(o, deep);
                }
            }, this);
        }

        this.endChange("collapse");

        var e = {
            node: node
        };
        this.fire("collapse", e);
    },
    expand: function(node, deep) {
        node = this.getNode(node);
        if (!node) return;
        this.beginChange();

        node.expanded = true;
        if (deep) {
            this.eachChild(node, function(o) {
                if (o[this.nodesField] != null) {
                    this.expand(o, deep);
                }
            }, this);
        }

        this.endChange("expand");

        var e = {
            node: node
        };
        this.fire("expand", e);
    },
    toggle: function(node) {
        if (this.isExpandedNode(node)) this.collapse(node);
        else this.expand(node);
    },
    expandNode: function(node) {
        this.expand(node);
    },
    collapseNode: function(node) {
        this.collapse(node);
    },
    collapseAll: function() {
        this.collapse(this.root, true);
    },
    expandAll: function() {
        this.expand(this.root, true);
    },
    collapseLevel: function(level, deep) {
        this.beginChange();
        this.each(function(node) {
            var nodeLevel = this.getLevel(node);
            if (level == nodeLevel) {
                this.collapse(node, deep);
            }
        }, this);
        this.endChange();
    },
    expandLevel: function(level, deep) {
        this.beginChange();
        this.each(function(node) {
            var nodeLevel = this.getLevel(node);
            if (level == nodeLevel) {
                this.expand(node, deep);
            }
        }, this);
        this.endChange();
    },
    expandPath: function(node) {
        node = this.getNode(node);
        if (!node) return;
        var ans = this.getAncestors(node);
        for (var i = 0, l = ans.length; i < l; i++) {
            this.expandNode(ans[i]);
        }
    },
    collapsePath: function(node) {
        node = this.getNode(node);
        if (!node) return;
        var ans = this.getAncestors(node);
        for (var i = 0, l = ans.length; i < l; i++) {
            this.collapseNode(ans[i]);
        }
    },


    isAncestor: function(parentNode, node) {
        if (parentNode == node) return true;
        if (!parentNode || !node) return false;
        if (parentNode == this.getRootNode()) return true;
        var as = this.getAncestors(node);
        for (var i = 0, l = as.length; i < l; i++) {
            if (as[i] == parentNode) return true;
        }
        return false;
    },

    getAncestors: function(node) {
        var as = [];
        while (1) {
            var parentNode = this.getParentNode(node);
            if (!parentNode || parentNode == this.root) break;
            as[as.length] = parentNode;
            node = parentNode;
        }
        as.reverse();
        return as;
    },
    getNode: function(node) {
        return this.getRecord(node);
    },
    getRootNode: function() {
        return this.root;
    },
    getParentNode: function(node) {

        if (!node) return null;
        return this.getby_id(node._pid);
    },
    getAllChildNodes: function(node) {
        return this.getChildNodes(node, true);
    },
    getChildNodes: function(node, all, useView) {
        node = this.getNode(node);
        if (!node) node = this.getRootNode();
        var nodes = node[this.nodesField];


        if (this.viewNodes && useView !== false) {
            nodes = this.viewNodes[node._id];
        }




        if (all === true && nodes) {
            var view = [];
            for (var i = 0, l = nodes.length; i < l; i++) {
                var cnode = nodes[i];
                view[view.length] = cnode;
                var cnodes = this.getChildNodes(cnode, all, useView);
                if (cnodes && cnodes.length > 0) {
                    view.addRange(cnodes);
                }
            }
            nodes = view;
        }
        return nodes || [];
    },
    getChildNodeAt: function(index, node) {
        var nodes = this.getChildNodes(node);
        if (nodes) return nodes[index];
        return null;
    },

    hasChildNodes: function(node) {
        var nodes = this.getChildNodes(node);
        return nodes.length > 0;
    },
    getLevel: function(node) {
        return node._level;
    },









    _is_true: function(v) {
        return String(v) == "true" || v === 1 || v === 'Y' || v === 'y'
    },
    _is_false: function(v) {
        return String(v) == "false" || v === 0 || v === 'N' || v === 'n';
    },
    leafField: 'isLeaf',
    isLeafNode: function(node) {
        return this.isLeaf(node);
    },
    isLeaf: function(node) {
        if (!node) return false;
        var v = node[this.leafField];
        if (!node || this._is_false(v)) return false;
        var nodes = this.getChildNodes(node, false, false);
        if (nodes.length > 0) return false;
        return true;
    },
    hasChildren: function(node) {
        var subNodes = this.getChildNodes(node);
        return !!(subNodes && subNodes.length > 0);
    },
    isFirstNode: function(node) {
        if (node == this.root) return true;
        var parentNode = this.getParentNode(node);
        if (!parentNode) return false;
        return this.getFirstNode(parentNode) == node;
    },
    isLastNode: function(node) {
        if (node == this.root) return true;
        var parentNode = this.getParentNode(node);
        if (!parentNode) return false;
        return this.getLastNode(parentNode) == node;
    },
    isCheckedNode: function(node) {
        return node.checked === true;
    },
    isExpandedNode: function(node) {
        return node.expanded == true || node.expanded == 1 || mini.isNull(node.expanded);
    },
    isEnabledNode: function(node) {
        return node.enabled !== false;
    },
    isVisibleNode: function(node) {
        if (node.visible == false) return false;
        var pnode = this._ids[node._pid];
        if (!pnode || pnode == this.root) return true;
        if (pnode.expanded === false) return false;
        return this.isVisibleNode(pnode);
    },
    getNextNode: function(node) {
        var parentNode = this.getby_id(node._pid);
        if (!parentNode) return null;
        var index = this.indexOfNode(node);
        return this.getChildNodes(parentNode)[index + 1];
    },
    getPrevNode: function(node) {
        var parentNode = this.getby_id(node._pid);
        if (!parentNode) return null;
        var index = this.indexOfNode(node);
        return this.getChildNodes(parentNode)[index - 1];
    },
    getFirstNode: function(parentNode) {
        return this.getChildNodes(parentNode)[0];
    },
    getLastNode: function(parentNode) {
        var nodes = this.getChildNodes(parentNode);
        return nodes[nodes.length - 1];
    },
    indexOfNode: function(node) {
        var parentNode = this.getby_id(node._pid);
        if (parentNode) {
            return this.getChildNodes(parentNode).indexOf(node);
        }
        return -1;
    },
    indexOfList: function(node) {
        return this.getList().indexOf(node);
    },
    getAt: function(index) {

        return this.getVisibleRows()[index];
    },
    indexOf: function(record) {
        return this.getVisibleRows().indexOf(record);
    },
    getRange: function(start, end) {
        if (start > end) {
            var t = start;
            start = end;
            end = t;
        }
        var data = this.getChildNodes(this.root, true);
        var range = [];
        for (var i = start, l = end; i <= l; i++) {
            var o = data[i];
            if (o) {
                range.push(o);
            }
        }
        return range;
    },
    selectRange: function(start, end) {
        var data = this.getChildNodes(this.root, true);
        if (!mini.isNumber(start)) start = data.indexOf(start);
        if (!mini.isNumber(end)) end = data.indexOf(end);
        if (mini.isNull(start) || mini.isNull(end)) return;

        var rs = this.getRange(start, end);
        this.selects(rs);
    },
    findRecords: function(property, value) {
        var data = this.toArray();

        var ifFn = typeof property == "function";
        var fn = property;
        var scope = value || this;
        var records = [];

        if (!mini.isNull(value)) value = String(value);

        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];

            if (ifFn) {
                var ret = fn.call(scope, o);
                if (ret == true) {
                    records[records.length] = o;
                }
                if (ret === 1) break;
            } else {




                if (value.indexOf(",") != -1) {
                    var vls = value.split(",");
                    for (var j = 0, len = vls.length; j < len; j++) {
                        var v = vls[j];
                        if (o[property] == v) {
                            records[records.length] = o;
                        }
                    }
                } else {
                    if (o[property] == value) {
                        records[records.length] = o;
                    }
                }
            }
        }
        return records;
    },

    _dataChangedCount: 0,
    _dataChanged: function(action) {

        this._dataChangedCount++;
        if (action != "update") {
            this.ids = null;
            this.dataview = null;
            this.visibleRows = null;
            if ($ == "collapse" || $ == "expand" || $ == "loaddata");
            else this.list = null;


        }
        if (this.__changeCount == 0) {
            this.fire("datachanged");
        }
    },









    _createDataView: function() {

        var data = !this.viewNodes ? this.getList().clone() : this.getChildNodes(this.root, true);
        return data;
    },
    _createVisibleRows: function() {

        //var data = !this.viewNodes ? this.getList().clone() : this.getChildNodes(this.root, true);

        //var view = [];
        //for (var i = 0, l = data.length; i < l; i++) {
        //    var node = data[i];
        //    if (this.isVisibleNode(node)) view[view.length] = node;
        //}
        //return view;


        var view = [],
            nodesField = this.nodesField,
            viewNodes = this.viewNodes,
            hasNode = !!viewNodes,
            node, currentNode;

        function getNode(node) {
            return hasNode ? viewNodes[node._id] : node[nodesField]
        }

        function loopNodes(nodes) {
            for (var i = 0, len = nodes.length; i < len; i++) {
                node = nodes[i];
                view[view.length] = node;
                if (node.expanded === false);
                else {
                    currentNode = getNode(node);
                    if (currentNode) loopNodes(currentNode)
                }
            }
        }
        loopNodes(getNode(this.root));
        return view;

    },



    getList: function() {

        if (!this.list) {

            this.list = mini.treeToList(this.source, this.nodesField);
        }
        return this.list;



    },
    getDataView: function() {
        if (!this.dataview) {
            this.dataview = this._createDataView();
        }
        return this.dataview;
    },
    getVisibleRows: function() {
        if (!this.visibleRows) {
            this.visibleRows = this._createVisibleRows();
        }
        return this.visibleRows;
    },

    _doFilter: function() {
        if (!this._filterInfo) {
            this.viewNodes = null;
            return;
        }

        var fn = this._filterInfo[0],
            scope = this._filterInfo[1];

        var viewNodes = this.viewNodes = {},
            nodesField = this.nodesField;

        function filter(node) {
            var nodes = node[nodesField];
            if (!nodes) return false;
            var id = node._id;
            var views = viewNodes[id] = [];

            for (var i = 0, l = nodes.length; i < l; i++) {
                var r = nodes[i];
                var cadd = filter(r);
                var add = fn.call(scope, r, i, this);
                if (add === true || cadd) {
                    views.push(r);
                }

            }
            return views.length > 0;
        }
        filter(this.root);
    },
    _doSort: function() {
        if (!this._filterInfo && !this._sortInfo) {
            this.viewNodes = null;
            return;
        }
        if (!this._sortInfo) return;
        var fn = this._sortInfo[0],
            scope = this._sortInfo[1],
            reverse = this._sortInfo[2];


        var nodesField = this.nodesField;
        if (!this.viewNodes) {
            var viewNodes = this.viewNodes = {};

            viewNodes[this.root._id] = this.root[nodesField].clone();
            this.cascadeChild(this.root, function(node, i, p) {
                var nodes = node[nodesField];
                if (nodes) {
                    viewNodes[node._id] = nodes.clone();
                }
            });
        }

        var sf = this;

        function sort(node) {
            var nodes = sf.getChildNodes(node);
            mini.sort(nodes, fn, scope);
            if (reverse) nodes.reverse();
            for (var i = 0, l = nodes.length; i < l; i++) {
                var r = nodes[i];
                sort(r);
            }
        };
        sort(this.root);
    },


    toArray: function() {


        if (!this._array || this._dataChangedCount != this._dataChangedCount2) {
            this._dataChangedCount2 = this._dataChangedCount;
            this._array = this.getChildNodes(this.root, true, false);
        }



        return this._array;
    },
    toTree: function() {
        return this.root[this.nodesField];
    },
    isChanged: function() {
        return this.getChanges().length > 0;
    },

    getChanges: function(rowState, onlyField) {
        var changes = [];
        if (rowState == "removed" || rowState == null) {
            changes.addRange(this._removeds.clone());
        }
        this.cascadeChild(this.root, function(record, i, p) {
            if (record._state == null || record._state == "") return;
            if (record._state == rowState || rowState == null) {
                changes[changes.length] = record;
            }
        }, this);
        var rows = changes;
        if (onlyField) {
            for (var i = 0, l = rows.length; i < l; i++) {
                var row = rows[i];
                if (row._state == "modified") {
                    var newRow = {};
                    newRow._state = row._state;
                    newRow[this.idField] = row[this.idField];
                    for (var field in row) {
                        var modifed = this.isModified(row, field);
                        if (modifed) {
                            newRow[field] = row[field];
                        }
                    }
                    rows[i] = newRow;
                }
            }
        }
        return changes;
    },

    accept: function(node) {
        node = node || this.root;
        this.beginChange();
        this.cascadeChild(this.root, function(node) {
            this.acceptRecord(node);
        }, this);
        this._removeds = [];
        this._originals = {};
        this.endChange();
    },
    reject: function(node) {
        this.beginChange();
        this.cascadeChild(this.root, function(node) {
            this.rejectRecord(node);
        }, this);
        this._removeds = [];
        this._originals = {};
        this.endChange();
    },
    acceptRecord: function(node) {
        if (!node._state) return;
        delete this._originals[node[this._originalIdField]];
        if (node._state == "deleted") {
            this.removeNode(node);
        } else {
            delete node._state;
            delete this._originals[node[this._originalIdField]];
            this._dataChanged();
            this.fire("update", {
                record: node
            });
        }

    },
    rejectRecord: function(node) {
        if (!node._state) return;
        if (node._state == "added") {
            this.removeNode(node);
        } else if (node._state == "modified" || node._state == "deleted") {
            var or = this._getOriginal(node);
            mini.copyTo(node, or);
            delete node._state;
            delete this._originals[node[this._originalIdField]];
            this._dataChanged();
            this.fire("update", {
                record: node
            });
        }
    },


    upGrade: function(task) {
        var parentTask = this.getParentNode(task);
        if (parentTask == this.root || task == this.root) {
            return false;
        }


        var pNodes = parentTask[this.nodesField];

        var index = pNodes.indexOf(task);
        var appendIndex = task[this.nodesField] ? task[this.nodesField].length : 0;

        for (var i = pNodes.length - 1; i >= index; i--) {
            var o = pNodes[i];
            pNodes.removeAt(i);
            if (o != task) {
                if (!task[this.nodesField]) task[this.nodesField] = [];
                task[this.nodesField].insert(appendIndex, o);
            }
        }

        var pparentTask = this.getParentNode(parentTask);
        var ppNodes = pparentTask[this.nodesField];
        var index = ppNodes.indexOf(parentTask);
        ppNodes.insert(index + 1, task);


        this._updateParentAndLevel(task, pparentTask);

        this._doFilter();

        this._dataChanged();
    },
    downGrade: function(node) {

        if (this.isFirstNode(node)) {
            return false;
        }

        var oldParentNode = this.getParentNode(node);

        var opNodes = oldParentNode[this.nodesField];

        var index = opNodes.indexOf(node);

        var parentNode = opNodes[index - 1];


        opNodes.removeAt(index);
        if (!parentNode[this.nodesField]) parentNode[this.nodesField] = [];
        parentNode[this.nodesField].add(node);


        this._updateParentAndLevel(node, parentNode);



        this._doFilter();

        this._dataChanged();


    },

    _updateParentAndLevel: function(node, parentNode) {
        var that = this;
        node._pid = parentNode._id;
        node._level = parentNode._level + 1;
        node[that.parentField] = parentNode[that.idField];
        if (!node[that.parentField]) node[that.parentField] = parentNode._id;

        this.cascadeChild(node, function(n, i, p) {
            n._pid = p._id;
            n._level = p._level + 1;

            n[that.parentField] = p[that.idField];
        }, this);
        this._setModified(node);
    },



    setCheckModel: function(value) {
        this.checkModel = value;
    },
    getCheckModel: function() {
        return this.checkModel;
    },
    setOnlyLeafCheckable: function(value) {
        this.onlyLeafCheckable = value;
    },
    getOnlyLeafCheckable: function() {
        return this.onlyLeafCheckable;
    },
    setAutoCheckParent: function(value) {
        this.autoCheckParent = value;
    },
    getAutoCheckParent: function() {
        return this.autoCheckParent;
    },
    _doUpdateLoadedCheckedNodes: function() {

        var nodes = this.getAllChildNodes(this.root);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            if (node.checked == true) {
                if (this.autoCheckParent == false || !this.hasChildNodes(node)) {
                    this._doUpdateNodeCheckState(node);
                }
            }
        }

    },
    _doUpdateNodeCheckState: function(node) {


        if (!node) return;
        var checked = this.isChecked(node);
        if (this.checkModel == "cascade" || this.autoCheckParent) {

            this.cascadeChild(node, function(cnode) {


                this.doCheckNodes(cnode, checked);

            }, this);

            if (!this.autoCheckParent) {
                var ans = this.getAncestors(node);
                ans.reverse();
                for (var i = 0, l = ans.length; i < l; i++) {
                    var pnode = ans[i];


                    var childNodes = this.getChildNodes(pnode);
                    var checkAll = true;
                    for (var ii = 0, ll = childNodes.length; ii < ll; ii++) {
                        var cnode = childNodes[ii];
                        if (!this.isCheckedNode(cnode)) {
                            checkAll = false;
                        }
                    }
                    if (checkAll) this.doCheckNodes(pnode, true);
                    else {
                        this.doCheckNodes(pnode, false);
                    }

                    this.fire("checkchanged", {
                        nodes: [pnode],
                        _nodes: [pnode]
                    });
                }
            }
        }
        var that = this;

        function hasCheckedChildNode(pnode) {
            var childNodes = that.getChildNodes(pnode);
            for (var ii = 0, ll = childNodes.length; ii < ll; ii++) {
                var cnode = childNodes[ii];
                if (that.isCheckedNode(cnode)) {
                    return true;
                }
            }
            return false;
        }
        if (this.autoCheckParent) {

            var ans = this.getAncestors(node);
            ans.reverse();
            for (var i = 0, l = ans.length; i < l; i++) {
                var pnode = ans[i];


                pnode.checked = hasCheckedChildNode(pnode);
                this.fire("checkchanged", {
                    nodes: [pnode],
                    _nodes: [pnode]
                });
            }
        }
    },
    doCheckNodes: function(nodes, checked, cascade) {


        if (!nodes) return;
        if (typeof nodes == "string") {
            nodes = nodes.split(",");
        }
        if (!mini.isArray(nodes)) nodes = [nodes];
        nodes = nodes.clone();
        var _nodes = [];
        checked = checked !== false;

        if (cascade === true) {
            if (this.checkModel == "single") {
                this.uncheckAllNodes();
            }
        }
        for (var i = nodes.length - 1; i >= 0; i--) {
            var node = this.getRecord(nodes[i]);
            if (!node ||
                (checked && node.checked === true) ||
                (!checked && node.checked !== true)
            ) {
                if (node) {


                    if (cascade === true) {
                        this._doUpdateNodeCheckState(node);
                    }
                    if (!checked && !this.isLeaf(node)) {
                        _nodes.push(node);
                    }

                }
                continue;
            }
            node.checked = checked;
            _nodes.push(node);
            if (cascade === true) {
                this._doUpdateNodeCheckState(node);
            }

        }

        var me = this;
        setTimeout(function() {
            me.fire("checkchanged", {
                nodes: nodes,
                _nodes: _nodes,
                checked: checked
            });
        }, 1);
    },
    checkNode: function(node, cascade) {

        this.doCheckNodes([node], true, cascade !== false);
    },
    uncheckNode: function(node, cascade) {
        this.doCheckNodes([node], false, cascade !== false);
    },
    checkNodes: function(nodes, cascade) {
        if (!mini.isArray(nodes)) nodes = [];
        this.doCheckNodes(nodes, true, cascade !== false);
    },
    uncheckNodes: function(nodes, cascade) {
        if (!mini.isArray(nodes)) nodes = [];
        this.doCheckNodes(nodes, false, cascade !== false);
    },
    checkAllNodes: function() {
        var nodes = this.getList();
        this.doCheckNodes(nodes, true, false);
    },
    uncheckAllNodes: function() {
        var nodes = this.getList();
        this.doCheckNodes(nodes, false, false);
    },

    doGetCheckedNodes: function(sourceNodes, mode) {
        if (mode === false) mode = 'leaf';
        var nodes = [];
        var maps = {};

        for (var j = 0, k = sourceNodes.length; j < k; j++) {
            var node = sourceNodes[j];
            var isLeaf = this.isLeafNode(node);
            if (mode === true) {

                if (!maps[node._id]) {
                    maps[node._id] = node;
                    nodes.push(node);
                }
                var ans = this.getAncestors(node);
                for (var i = 0, l = ans.length; i < l; i++) {
                    var anode = ans[i];
                    if (!maps[anode._id]) {
                        maps[anode._id] = anode;
                        nodes.push(anode);
                    }
                }
            } else if (mode === "parent") {
                if (!isLeaf) {

                    if (!maps[node._id]) {
                        maps[node._id] = node;
                        nodes.push(node);
                    }
                }
            } else if (mode === "leaf") {
                if (isLeaf) {

                    if (!maps[node._id]) {
                        maps[node._id] = node;
                        nodes.push(node);
                    }
                }
            } else {

                if (!maps[node._id]) {
                    maps[node._id] = node;
                    nodes.push(node);
                }
            }

        }
        return nodes;
    },

    getCheckedNodes: function(mode) {
        var nodes = [];

        this.cascadeChild(this.root, function(node) {
            if (node.checked == true) nodes.push(node);
        });


        nodes = this.doGetCheckedNodes(nodes, mode);

        return nodes;
    },


    getCheckedTopNodes: function(nodes) {
        var tmp = [],
            j = 0,
            i = 0;
        do {
            var parentNode = this.getParentNode(nodes[i]);
            if (parentNode && parentNode != this.root) {
                if (this.isCheckedNode(parentNode)) {
                    if (!~tmp.indexOf(parentNode)) {
                        tmp.push(parentNode);
                    }
                } else {
                    if (this.isCheckedNode(nodes[i])) {
                        if (!~tmp.indexOf(nodes[i])) {
                            tmp.push(nodes[i]);
                            j++;
                        }
                    }
                }
            } else {
                if (this.isCheckedNode(nodes[i])) {
                    if (!~tmp.indexOf(nodes[i])) {
                        tmp.push(nodes[i]);
                        j++;
                    }
                }
            }
            i++;
        } while (i < nodes.length);
        if (i == j) {
            return tmp;
        } else {
            return this.getCheckedTopNodes(tmp);
        }
    },









    getCheckedNodesId: function(mode, delimiter) {
        var nodes = this.getCheckedNodes(mode);
        var vts = this.getValueAndText(nodes, delimiter);
        return vts[0];
    },
    getCheckedNodesText: function(mode, delimiter) {
        var nodes = this.getCheckedNodes(mode);
        var vts = this.getValueAndText(nodes, delimiter);
        return vts[1];
    },
    isChecked: function(node) {
        node = this.getRecord(node);
        if (!node) return null;
        return node.checked === true || node.checked === 1;
    },
    getCheckState: function(node) {

        node = this.getRecord(node);
        if (!node) return null;
        if (node.checked === true) return "checked";
        if (!node[this.nodesField]) return "unchecked";
        var children = this.getChildNodes(node, true);
        for (var i = 0, l = children.length; i < l; i++) {
            var node = children[i];
            if (node.checked === true) return "indeterminate";
        }
        return "unchecked";
    },
    getUnCheckableNodes: function() {
        var nodes = [];
        this.cascadeChild(this.root, function(node) {
            var checkable = this.getCheckable(node);
            if (checkable == false) {
                nodes.push(node);
            }
        }, this);
        return nodes;
    },
    setCheckable: function(nodes, checkable) {
        if (!nodes) return;
        if (!mini.isArray(nodes)) nodes = [nodes];
        nodes = nodes.clone();
        checkable = !!checkable;
        for (var i = nodes.length - 1; i >= 0; i--) {
            var node = this.getRecord(nodes[i]);
            if (!node) {
                continue;
            }
            node.checkable = checked;
        }

    },
    getCheckable: function(node) {
        node = this.getRecord(node);
        if (!node) return false;
        if (node.checkable === true) return true;
        if (node.checkable === false) return false;
        return this.isLeafNode(node) ? true : !this.onlyLeafCheckable;
    },
    showNodeCheckbox: function(node, show) {

    },

    reload: function(success, error, complete) {

        this._loadingNode = null;


        this.load(this.loadParams, success, error, complete);
    },
    _isNodeLoading: function() {
        return !!this._loadingNode;
    },
    loadNode: function(node, expand) {

        this._loadingNode = node;
        var e = {
            node: node
        };
        this.fire("beforeloadnode", e);


        var time = new Date();

        var me = this;
        me._doLoadAjax(me.loadParams, null, null, null, function(e) {
            var t = new Date() - time;
            if (t < 60) t = 60 - t;

            setTimeout(function() {


                e.node = node;
                me._OnPreLoad(e);

                e.node = me._loadingNode;
                me._loadingNode = null;
                if (me.loadParams) delete me.loadParams[me.idField];

                var oldNodes = node[me.nodesField];
                me.removeNodes(oldNodes);

                var nodes = e.data;
                if (nodes && nodes.length > 0) {

                    me.collapse(node);

                    me.addNodes(nodes, node);


                    var all = me.getAllChildNodes(node);
                    for (var i = 0, l = all.length; i < l; i++) {
                        var treeNode = all[i];

                        delete treeNode._state;
                    }

                    if (expand !== false) {
                        me.expand(node, true);
                    } else {
                        me.collapse(node, true);
                    }
                } else {
                    delete node[me.leafField];
                    me.expand(node, true);
                }


                me.fire("loadnode", e);
                me.fire("load", e);
            }, t);
        }, true);
    }
});
mini.regClass(mini.DataTree, "datatree");





mini._DataTableApplys = {

    idField: "id",
    textField: "text",
    setAjaxData: function(value) {
        this._dataSource.ajaxData = value;
    },
    getby_id: function(id) {
        return this._dataSource.getby_id(id);
    },
    getValueAndText: function(records, delimiter) {
        return this._dataSource.getValueAndText(records, delimiter);
    },
    setIdField: function(value) {
        this._dataSource.setIdField(value);
        this.idField = value;
    },
    getIdField: function() {
        return this._dataSource.idField;
    },
    setTextField: function(value) {
        this._dataSource.setTextField(value);
        this.textField = value;
    },
    getTextField: function() {
        return this._dataSource.textField;
    },

    getLoadParams: function() {
        return this._dataSource.loadParams;
    },
    clearData: function() {
        this._dataSource.clearData();
    },
    loadData: function(data) {
        this._dataSource.loadData(data);
    },
    setData: function(data) {
        this._dataSource.loadData(data);
    },
    getData: function() {
        return this._dataSource.getSource().clone();
    },
    getList: function() {
        return this._dataSource.getList();
    },
    getDataView: function() {
        return this._dataSource.getDataView();
    },
    getVisibleRows: function() {
        if (this._useEmptyView) return [];
        return this._dataSource.getVisibleRows();
    },
    toArray: function() {
        return this._dataSource.toArray();
    },
    getRecord: function(id) {
        if (typeof id == "object") return id;
        return this._dataSource.getRecord(id);
    },
    getRow: function(index) {
	if (typeof index == "object") return index;
        return this._dataSource.getRow(index);
    },
    getRange: function(start, end) {
        if (mini.isNull(start) || mini.isNull(end)) return;
        return this._dataSource.getRange(start, end);
    },
    getAt: function(index) {
        return this._dataSource.getAt(index);
    },
    indexOf: function(record) {
        return this._dataSource.indexOf(record);
    },
    getRowByUID: function(uid) {
        return this._dataSource.getby_id(uid);
    },
    getRowByUid: function($) {
        return this.getRowByUID($)
    },

    getRowById: function(id) {
        return this._dataSource.getbyId(id);
    },
    clearRows: function() {
        this._dataSource.clearData();
    },



    updateRow: function(record, field, value) {
        this._dataSource.updateRecord(record, field, value);
    },
    addRow: function(record, index) {
        return this._dataSource.insert(index, record);
    },
    removeRow: function(record, autoSelect) {
        return this._dataSource.remove(record, autoSelect);
    },
    removeRows: function(records, autoSelect) {
        return this._dataSource.removeRange(records, autoSelect);
    },
    removeSelected: function() {
        var row = this.getSelected();
        if (row) {
            this.removeRow(row, true);
        }
    },
    removeRowAt: function(index, autoSelect) {
        return this._dataSource.removeAt(index, autoSelect);
    },
    moveRow: function(row, index) {
        this._dataSource.move(row, index);
    },
    addRows: function(records, index) {
        return this._dataSource.insertRange(index, records);
    },
    findRows: function(field, value) {
        return this._dataSource.findRecords(field, value);
    },
    findRow: function(field, value) {
        return this._dataSource.findRecord(field, value);
    },









    multiSelect: false,
    setMultiSelect: function(value) {
        this._dataSource.setMultiSelect(value);
        this.multiSelect = value;
    },
    getMultiSelect: function() {
        return this._dataSource.getMultiSelect();
    },
    setCurrent: function(record) {
        this._dataSource.setCurrent(record);
    },
    getCurrent: function() {
        return this._dataSource.getCurrent();
    },
    isSelected: function(record) {
        return this._dataSource.isSelected(record);
    },
    setSelected: function(record) {
        this._dataSource.setSelected(record);
    },
    getSelected: function() {
        return this._dataSource.getSelected();
    },
    getSelecteds: function() {
        return this._dataSource.getSelecteds();
    },
    select: function(record, fireEvent) {
        this._dataSource.select(record, fireEvent);
    },
    selects: function(records, fireEvent) {
        this._dataSource.selects(records, fireEvent);
    },
    deselect: function(record, fireEvent) {
        this._dataSource.deselect(record, fireEvent);
    },
    deselects: function(records, fireEvent) {
        this._dataSource.deselects(records, fireEvent);
    },
    selectAll: function(fireEvent) {
        this._dataSource.selectAll(fireEvent);
    },
    deselectAll: function(fireEvent) {
        this._dataSource.deselectAll(fireEvent);
    },
    clearSelect: function(fireEvent) {
        this.deselectAll(fireEvent);
    },
    selectPrev: function() {
        this._dataSource.selectPrev();
    },
    selectNext: function() {
        this._dataSource.selectNext();
    },
    selectFirst: function() {
        this._dataSource.selectFirst();
    },
    selectLast: function() {
        this._dataSource.selectLast();
    },
    selectRange: function(start, end) {
        this._dataSource.selectRange(start, end);
    },

    filter: function(fn, scope) {
        this._dataSource.filter(fn, scope);
    },
    clearFilter: function() {
        this._dataSource.clearFilter();
    },
    sort: function(fn, scope, reverse) {
        this._dataSource.sort(fn, scope, reverse);
    },
    clearSort: function() {
        this._dataSource.clearSort();
    },
    findItems: function(a, b, c) {
        return this._dataSource.findRecords(c, b, c);
    },

    getResultObject: function() {
        return this._dataSource._resultObject || {};
    },
    isChanged: function() {
        return this._dataSource.isChanged();
    },
    getChanges: function(state, onlyField) {
        return this._dataSource.getChanges(state, onlyField);
    },
    accept: function() {
        this._dataSource.accept();
    },
    reject: function() {
        this._dataSource.reject();
    },
    acceptRecord: function(record) {
        this._dataSource.acceptRecord(record);
    },
    rejectRecord: function(record) {
        this._dataSource.rejectRecord(record);
    }
};


mini._DataTreeApplys = {
    addRow: null,
    removeRow: null,
    removeRows: null,
    removeRowAt: null,
    moveRow: null,


    setExpandOnLoad: function(value) {
        this._dataSource.setExpandOnLoad(value);
    },
    getExpandOnLoad: function() {
        return this._dataSource.getExpandOnLoad();
    },

    isSelectedNode: function(node) {
        node = this.getNode(node);
        return this.getSelectedNode() === node;
    },
    selectNode: function(node, fireEvent) {
        if (node) {
            this._dataSource.select(node, fireEvent);
        } else {
            this._dataSource.deselect(this.getSelectedNode(), fireEvent);
        }
    },
    getSelectedNode: function() {
        return this.getSelected();
    },
    getSelectedNodes: function() {
        return this.getSelecteds();
    },
    updateNode: function(node, field, value) {
        this._dataSource.updateRecord(node, field, value);
    },
    addNode: function(node, action, parentNode) {
        return this._dataSource.insertNode(node, action, parentNode);
    },
    removeNodeAt: function(index, parentNode) {
        return this._dataSource.removeNodeAt(index, parentNode);
        this._changed = true;
    },
    removeNode: function(node) {
        return this._dataSource.removeNode(node);
    },
    moveNode: function(node, action, targetNode) {
        this._dataSource.moveNode(node, action, targetNode);
    },
    addNodes: function(nodes, parentNode, action) {
        return this._dataSource.addNodes(nodes, parentNode, action);
    },
    insertNodes: function(nodes, index, parentNode) {
        return this._dataSource.insertNodes(index, nodes, parentNode);
    },
    moveNodes: function(nodes, targetNode, action) {
        this._dataSource.moveNodes(nodes, targetNode, action);
    },
    removeNodes: function(nodes) {
        return this._dataSource.removeNodes(nodes);
    },


    expandOnLoad: false,
    checkRecursive: true,
    autoCheckParent: false,
    showFolderCheckBox: true,

    idField: "id",
    textField: "text",
    parentField: "pid",
    nodesField: "children",
    checkedField: "checked",
    leafField: 'isLeaf',
    resultAsTree: true,






    setShowFolderCheckBox: function(value) {
        this._dataSource.setShowFolderCheckBox(value);
        if (this.doUpdate) this.doUpdate();
        this.showFolderCheckBox = value;
    },
    getShowFolderCheckBox: function() {
        return this._dataSource.getShowFolderCheckBox();
    },
    setCheckRecursive: function(value) {
        this._dataSource.setCheckRecursive(value);
        this.checkRecursive = value;
    },
    getCheckRecursive: function() {
        return this._dataSource.getCheckRecursive();
    },
    setResultAsTree: function(value) {
        this._dataSource.setResultAsTree(value);
    },
    getResultAsTree: function(value) {
        return this._dataSource.resultAsTree;
    },
    setParentField: function(value) {
        this._dataSource.setParentField(value);
        this.parentField = value;
    },
    getParentField: function() {
        return this._dataSource.parentField;
    },
    setLeafField: function(value) {
        this._dataSource.leafField = value;
        this.leafField = value;
    },
    getLeafField: function() {
        return this._dataSource.leafField;
    },
    setNodesField: function(value) {
        this._dataSource.setNodesField(value);
        this.nodesField = value;
    },
    getNodesField: function() {
        return this._dataSource.nodesField;
    },
    setCheckedField: function(value) {
        this._dataSource.checkedField = value;
        this.checkedField = value;
    },
    getCheckedField: function() {
        return this.checkedField;
    },

    findNodes: function(field, value) {
        return this._dataSource.findRecords(field, value);
    },
    getLevel: function(node) {
        return this._dataSource.getLevel(node);
    },
    isVisibleNode: function(node) {
        return this._dataSource.isVisibleNode(node);
    },

    isEnabledNode: function(node) {
        return this._dataSource.isEnabledNode(node);
    },
    isExpandedNode: function(node) {
        return this._dataSource.isExpandedNode(node);
    },
    isCheckedNode: function(node) {
        return this._dataSource.isCheckedNode(node);
    },
    isLeaf: function(node) {
        return this._dataSource.isLeafNode(node);
    },
    hasChildren: function(node) {
        return this._dataSource.hasChildren(node);
    },
    isAncestor: function(pnode, node) {
        return this._dataSource.isAncestor(pnode, node);
    },
    getNode: function(node) {
        return this._dataSource.getRecord(node);
    },
    getRootNode: function() {
        return this._dataSource.getRootNode();
    },
    getParentNode: function(node) {
        return this._dataSource.getParentNode.apply(this._dataSource, arguments);
    },
    getAncestors: function(node) {
        return this._dataSource.getAncestors(node);
    },
    getAllChildNodes: function(node) {
        return this._dataSource.getAllChildNodes.apply(this._dataSource, arguments);
    },
    getChildNodes: function(node, all) {
        return this._dataSource.getChildNodes.apply(this._dataSource, arguments);
    },
    getChildNodeAt: function(index, node) {
        return this._dataSource.getChildNodeAt.apply(this._dataSource, arguments);
    },
    indexOfNode: function(node) {
        return this._dataSource.indexOfNode.apply(this._dataSource, arguments);
    },
    hasChildNodes: function(node) {
        return this._dataSource.hasChildNodes.apply(this._dataSource, arguments);
    },
    isFirstNode: function(node) {
        return this._dataSource.isFirstNode.apply(this._dataSource, arguments);
    },
    isLastNode: function(node) {
        return this._dataSource.isLastNode.apply(this._dataSource, arguments);
    },
    getNextNode: function(node) {
        return this._dataSource.getNextNode.apply(this._dataSource, arguments);
    },
    getPrevNode: function(node) {
        return this._dataSource.getPrevNode.apply(this._dataSource, arguments);
    },
    getFirstNode: function(parentNode) {
        return this._dataSource.getFirstNode.apply(this._dataSource, arguments);
    },
    getLastNode: function(parentNode) {
        return this._dataSource.getLastNode.apply(this._dataSource, arguments);
    },


    toggleNode: function(node) {
        this._dataSource.toggle(node);
    },
    collapseNode: function(node, deep) {
        this._dataSource.collapse(node, deep);
    },
    expandNode: function(node, deep) {
        this._dataSource.expand(node, deep);
    },
    collapseAll: function() {
        this.useAnimation = false;
        this._dataSource.collapseAll();
        this.useAnimation = true;
    },
    expandAll: function() {
        this.useAnimation = false;
        this._dataSource.expandAll();
        this.useAnimation = true;
    },
    expandLevel: function(level) {
        this.useAnimation = false;
        this._dataSource.expandLevel(level);
        this.useAnimation = true;
    },
    collapseLevel: function(level) {
        this.useAnimation = false;
        this._dataSource.collapseLevel(level);
        this.useAnimation = true;
    },
    expandPath: function(node) {
        this.useAnimation = false;
        this._dataSource.expandPath(node);
        this.useAnimation = true;
    },
    collapsePath: function(node) {
        this.useAnimation = false;
        this._dataSource.collapsePath(node);
        this.useAnimation = true;
    },

    loadNode: function(node, options) {
        this._dataSource.loadNode(node, options);
    },

    setCheckModel: function(value) {
        this._dataSource.setCheckModel(value);
    },
    getCheckModel: function() {
        return this._dataSource.getCheckModel();
    },
    setOnlyLeafCheckable: function(value) {
        this._dataSource.setOnlyLeafCheckable(value);
    },
    getOnlyLeafCheckable: function() {
        return this._dataSource.getOnlyLeafCheckable();
    },
    setAutoCheckParent: function(value) {
        this._dataSource.setAutoCheckParent(value);
    },
    getAutoCheckParent: function() {
        return this._dataSource.getAutoCheckParent();
    },
    checkNode: function(node, cascade) {
        this._dataSource.checkNode(node, cascade);
    },
    uncheckNode: function(node, cascade) {
        this._dataSource.uncheckNode(node, cascade);
    },
    checkNodes: function(nodes, cascade) {
        this._dataSource.checkNodes(nodes, cascade);
    },
    uncheckNodes: function(nodes, cascade) {
        this._dataSource.uncheckNodes(nodes, cascade);
    },
    checkAllNodes: function() {
        this._dataSource.checkAllNodes();
    },
    uncheckAllNodes: function() {
        this._dataSource.uncheckAllNodes();
    },
    getCheckedNodes: function() {
        return this._dataSource.getCheckedNodes.apply(this._dataSource, arguments);
    },
    getCheckedTopNodes: function() {
        return this._dataSource.getCheckedTopNodes.apply(this._dataSource, arguments);
    },
    getCheckedNodesId: function() {
        return this._dataSource.getCheckedNodesId.apply(this._dataSource, arguments);
    },
    getCheckedNodesText: function() {
        return this._dataSource.getCheckedNodesText.apply(this._dataSource, arguments);
    },
    getNodesByValue: function(value) {
        if (mini.isNull(value)) value = "";
        value = String(value);
        var nodes = [];
        var ids = String(value).split(",");
        for (var i = 0, l = ids.length; i < l; i++) {
            var node = this.getNode(ids[i]);
            if (node) nodes.push(node);
        }
        return nodes;
    },
    isChecked: function(node) {
        return this._dataSource.isChecked.apply(this._dataSource, arguments);
    },
    getCheckState: function(node) {
        return this._dataSource.getCheckState.apply(this._dataSource, arguments);
    },
    setCheckable: function(nodes, checkable) {
        this._dataSource.setCheckable.apply(this._dataSource, arguments);
    },
    getCheckable: function(node) {
        return this._dataSource.getCheckable.apply(this._dataSource, arguments);
    },

    bubbleParent: function(node, fn, scope) {
        this._dataSource.bubbleParent.apply(this._dataSource, arguments);
    },
    cascadeChild: function(node, fn, scope) {
        this._dataSource.cascadeChild.apply(this._dataSource, arguments);
    },
    eachChild: function(node, fn, scope) {
        this._dataSource.eachChild.apply(this._dataSource, arguments);
    }
};




mini.ColumnModel = function(grid) {
    this.owner = grid;
    mini.ColumnModel.superclass.constructor.apply(this, arguments);
    this._init();
}
mini.ColumnModel_ColumnID = 1;
mini.extend(mini.ColumnModel, mini.Component, {

    _defaultColumnWidth: 100,

    _init: function() {
        this.columns = [];

        this._columnsRow = [];
        this._visibleColumnsRow = [];

        this._bottomColumns = [];
        this._visibleColumns = [];

        this._idColumns = {};
        this._nameColumns = {};
        this._fieldColumns = {};
    },
    getColumns: function() {
        return this.columns;
    },
    getAllColumns: function() {
        var columns = [];
        for (var id in this._idColumns) {
            var column = this._idColumns[id];
            columns.push(column);
        }
        return columns;
    },
    getColumnsRow: function() {
        return this._columnsRow;
    },
    getVisibleColumnsRow: function() {
        return this._visibleColumnsRow;
    },
    getBottomColumns: function() {
        return this._bottomColumns;
    },
    getVisibleColumns: function() {
        return this._visibleColumns;
    },
    _getBottomColumnsByColumn: function(column) {

        column = this.getColumn(column);
        var columns = this._bottomColumns;
        var cs = [];
        for (var i = 0, l = columns.length; i < l; i++) {
            var c = columns[i];
            if (this.isAncestorColumn(column, c)) cs.push(c);
        }
        return cs;
    },
    _getVisibleColumnsByColumn: function(column) {

        column = this.getColumn(column);
        var columns = this._visibleColumns;
        var cs = [];
        for (var i = 0, l = columns.length; i < l; i++) {
            var c = columns[i];
            if (this.isAncestorColumn(column, c)) cs.push(c);
        }
        return cs;
    },
    frozenPosition: 'left',
    setFrozenPosition: function (v){
        this.frozenPosition = v;
    },
    isRightFrozen: function() {
        return this.frozenPosition == 'right';
    },
    setColumns: function(columns) {
        if (!mini.isArray(columns)) columns = [];
        this._init();
        this.columns = columns;
        this._columnsChanged();
    },
    _columnsChanged: function() {
        this._updateColumnsView();
        this.fire("columnschanged");
    },
    _updateColumnsView: function() {

        this._maxColumnLevel = 0;
        var level = 0;

        function init(column, index, parentColumn) {
            if (column.type) {
                if (!mini.isNull(column.header) && typeof column.header !== "function") {
                    if (column.header.trim() == "") {
                        delete column.header;
                    }
                }
                var col = mini._getColumn(column.type);
                if (col) {
                    var _column = mini.copyTo({}, column);
                    mini.copyTo(column, col);
                    mini.copyTo(column, _column);
                }
            }


            if (!column._id) column._id = mini.ColumnModel_ColumnID++;
            column._pid = parentColumn == this ? -1 : parentColumn._id;
            this._idColumns[column._id] = column;
            if (column.name) this._nameColumns[column.name] = column;


            column._level = level;
            level += 1;
            this.eachColumns(column, init, this);
            level -= 1;
            if (column._level > this._maxColumnLevel) this._maxColumnLevel = column._level;


            var width = parseInt(column.width);
            if (mini.isNumber(width) && String(width) == column.width) column.width = width + "px";
            if (mini.isNull(column.width)) column.width = this._defaultColumnWidth + "px";
            if (String(column.width).indexOf("px")) column.pxWidth = parseInt(column.width);
            column.visible = column.visible !== false;
            column.allowResize = column.allowResize !== false;
            column.allowMove = column.allowMove !== false;
            column.allowSort = column.allowSort === true;
            column.allowDrag = !!column.allowDrag;
            column.readOnly = !!column.readOnly;

            column.autoEscape = !!column.autoEscape;
            column.enabled = column.enabled !== false;

            column.showCellTip = column.showCellTip !== false;

            column.valueFromSelect = column.valueFromSelect !== false;

            column.vtype = column.vtype || "";




            if (typeof column.filter == "string") {
                column.filter = eval('(' + column.filter + ')');
            }
            if (column.filter && !column.filter.el) {
                column.filter = mini.create(column.filter);
            }


            if (typeof column.init == "function" && column.inited != true) {
                column.init(this.owner);
            }
            column.inited = true;


            column._gridUID = this.owner.uid;
            column._rowIdField = this.owner._rowIdField;
        }
        this.eachColumns(this, init, this);


        this._createColumnsRow();


        var index = 0;
        var view = this._visibleColumns = [];
        var bottoms = this._bottomColumns = [];
        this.cascadeColumns(this, function(column) {
            if (!column.columns || column.columns.length == 0) {
                bottoms.push(column);
                if (this.isVisibleColumn(column)) {
                    view.push(column);
                    column._index = index++;
                }
            }
        }, this);

        this._fieldColumns = {};
        var columns = this.getAllColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.field && !this._fieldColumns[column.field]) {
                this._fieldColumns[column.field] = column;
            }
        }


        this._createFrozenColSpan();
    },

    _frozenStartColumn: -1,
    _frozenEndColumn: -1,
    isFrozen: function() {
        return this._frozenStartColumn >= 0 && this._frozenEndColumn >= this._frozenStartColumn;
    },
    isFrozenColumn: function(column) {
        if (!this.isFrozen()) return false;
        column = this.getColumn(column);
        if (!column) return false;
        var index = this.getVisibleColumns().indexOf(column);
        return this._frozenStartColumn <= index && index <= this._frozenEndColumn;
    },
    frozen: function(startColumn, finishColumn) {
        startColumn = this.getColumn(startColumn);
        finishColumn = this.getColumn(finishColumn);

        var columns = this.getVisibleColumns();
        this._frozenStartColumn = columns.indexOf(startColumn);
        this._frozenEndColumn = columns.indexOf(finishColumn);

        if (startColumn && finishColumn) {
            this._columnsChanged();
        }
    },
    unFrozen: function() {
        this._frozenStartColumn = -1;
        this._frozenEndColumn = -1;
        this._columnsChanged();
    },
    setFrozenStartColumn: function(value) {
        this.frozen(value, this._frozenEndColumn);
    },
    setFrozenEndColumn: function(value) {
        this.frozen(this._frozenStartColumn, value);
    },
    getFrozenColumns: function() {
        var columns = [],
            isFrozen = this.isFrozen();
        for (var i = 0, l = this._visibleColumns.length; i < l; i++) {
            if (isFrozen && this._frozenStartColumn <= i && i <= this._frozenEndColumn) {
                columns.push(this._visibleColumns[i]);
            }
        }
        return columns;
    },
    getUnFrozenColumns: function() {
        var columns = [],
            isFrozen = this.isFrozen();
        for (var i = 0, l = this._visibleColumns.length; i < l; i++) {
            if ((isFrozen && (i > this._frozenEndColumn || i < this._frozenStartColumn)) || !isFrozen) {
                columns.push(this._visibleColumns[i]);
            }
        }
        return columns;
    },
    getFrozenColumnsRow: function() {
        return this.isFrozen() ? this._columnsRow1 : [];
    },
    getUnFrozenColumnsRow: function() {
        return this.isFrozen() ? this._columnsRow2 : this.getVisibleColumnsRow();
    },

    _createFrozenColSpan: function() {


        var me = this;
        var visibleColumns = this.getVisibleColumns();
        var start = this._frozenStartColumn,
            end = this._frozenEndColumn;

        function isViewIndex(column, viewIndex) {
            var columns = me.isBottomColumn(column) ? [column] : me._getVisibleColumnsByColumn(column);
            for (var i = 0, l = columns.length; i < l; i++) {
                var c = columns[i];
                var index = visibleColumns.indexOf(c);
                if (viewIndex == 0 && index < start) return true;
                if (viewIndex == 1 && start <= index && index <= end) return true;
                if (viewIndex == 2 && index > end) return true;
            }
            return false;
        }

        function isView2Index(column, viewIndex) {
            var columns = me.isBottomColumn(column) ? [column] : me._getVisibleColumnsByColumn(column);
            for (var i = 0, l = columns.length; i < l; i++) {
                var c = columns[i];
                var index = visibleColumns.indexOf(c);
                if (viewIndex == 0 && index > end) return true;
                if (viewIndex == 1 && start <= index && index <= end) return true;
                if (viewIndex == 2 && index < start) return true;
            }
            return false;
        }


        function getColSpan(col, viewIndex) {
            var subColumns = mini.treeToList(col.columns, "columns");
            var colSpan = 0;
            for (var i = 0, l = subColumns.length; i < l; i++) {
                var c = subColumns[i];
                if (me.isVisibleColumn(c) == false || isViewIndex(c, viewIndex) == false) continue;
                if (!c.columns || c.columns.length == 0) {
                    colSpan += 1;
                }
            }
            return colSpan;
        }

        function getCol2Span(col, viewIndex) {
            var subColumns = mini.treeToList(col.columns, "columns");
            var colSpan = 0;
            for (var i = 0, l = subColumns.length; i < l; i++) {
                var c = subColumns[i];
                if (me.isVisibleColumn(c) == false || isView2Index(c, viewIndex) == false) continue;
                if (!c.columns || c.columns.length == 0) {
                    colSpan += 1;
                }
            }
            return colSpan;
        }

        var list = mini.treeToList(this.columns, "columns");
        for (var i = 0, l = list.length; i < l; i++) {
            var column = list[i];

            delete column.colspan0;
            delete column.colspan1;
            delete column.colspan2;

            delete column.viewIndex0;
            delete column.viewIndex1;
            delete column.viewIndex2;

            if (this.isFrozen()) {
                if (column.columns && column.columns.length > 0) {
                    if(this.isRightFrozen()) {
                        column.colspan1 = getCol2Span(column, 1);
                        column.colspan2 = getCol2Span(column, 2);
                        column.colspan0 = getCol2Span(column, 0);

                    } else {
                        column.colspan1 = getColSpan(column, 1);
                        column.colspan2 = getColSpan(column, 2);
                        column.colspan0 = getColSpan(column, 0);
                    }
                } else {
                    column.colspan1 = 1;
                    column.colspan2 = 1;
                    column.colspan0 = 1;
                }

                if(this.isRightFrozen()) {
                    if (isView2Index(column, 0)) {
                        column["viewIndex" + 0] = true;
                    }
                    if (isView2Index(column, 1)) {
                        column["viewIndex" + 1] = true;
                    }
                    if (isView2Index(column, 2)) {
                        column["viewIndex" + 2] = true;
                    }
                } else {
                    if (isViewIndex(column, 0)) {
                        column["viewIndex" + 0] = true;
                    }
                    if (isViewIndex(column, 1)) {
                        column["viewIndex" + 1] = true;
                    }
                    if (isViewIndex(column, 2)) {
                        column["viewIndex" + 2] = true;
                    }
                }
            }
        }


        var maxLevel = this._getMaxColumnLevel();
        this._columnsRow1 = [];
        this._columnsRow2 = [];
        for (var i = 0, l = this._visibleColumnsRow.length; i < l; i++) {
            var columns = this._visibleColumnsRow[i];
            var columns1 = [];
            var columns2 = [];
            this._columnsRow1.push(columns1);
            this._columnsRow2.push(columns2);

            for (var j = 0, k = columns.length; j < k; j++) {
                var c = columns[j];
                if (c.viewIndex1) columns1.push(c);
                if (c.viewIndex2) columns2.push(c);
            }
        }
    },
    _createColumnsRow: function() {

        var maxLevel = this._getMaxColumnLevel();

        var columnsRow = [];
        var visibleColumnsRow = [];
        for (var i = 0, l = maxLevel; i <= l; i++) {
            columnsRow.push([]);
            visibleColumnsRow.push([]);
        }

        var me = this;

        function getColSpan(col) {
            var subColumns = mini.treeToList(col.columns, "columns");
            var colSpan = 0;
            for (var i = 0, l = subColumns.length; i < l; i++) {
                var c = subColumns[i];
                if (me.isVisibleColumn(c) == false) continue;
                if (!c.columns || c.columns.length == 0) {
                    colSpan += 1;
                }
            }
            return colSpan;
        }

        var list = mini.treeToList(this.columns, "columns");

        for (var i = 0, l = list.length; i < l; i++) {
            var column = list[i];
            var cols = columnsRow[column._level];
            var vcols = visibleColumnsRow[column._level];

            delete column.rowspan;
            delete column.colspan;

            if (column.columns && column.columns.length > 0) {
                column.colspan = getColSpan(column);
            }
            if ((!column.columns || column.columns.length == 0) && column._level < maxLevel) {
                column.rowspan = maxLevel - column._level + 1;
            }

            cols.push(column);
            if (this.isVisibleColumn(column)) {
                vcols.push(column);
            }
        }

        this._columnsRow = columnsRow;
        this._visibleColumnsRow = visibleColumnsRow;
    },
    _getMaxColumnLevel: function() {
        return this._maxColumnLevel;
    },
    cascadeColumns: function(node, fn, scope) {
        if (!fn) return;
        var nodes = node.columns;
        if (nodes) {
            nodes = nodes.clone();
            for (var i = 0, l = nodes.length; i < l; i++) {
                var c = nodes[i];
                if (fn.call(scope || this, c, i, node) === false) return;
                this.cascadeColumns(c, fn, scope);
            }
        }
    },
    eachColumns: function(column, fn, scope) {
        var columns = column.columns;
        if (columns) {
            var list = columns.clone();
            for (var i = 0, l = list.length; i < l; i++) {
                var o = list[i];
                if (fn.call(scope, o, i, column) === false) break;
            }
        }
    },
    getColumn: function(index) {
        var t = typeof index;
        if (t == "number") return this._bottomColumns[index];
        else if (t == "object") return index;
        else if (this._nameColumns[index]) {
            return this._nameColumns[index];
        } else {
            return this._fieldColumns[index];
        }
    },
    getColumnByField: function(field) {
        if (!field) return null;
        return this._fieldColumns[field];
    },
    _getColumnById: function(id) {
        return this._idColumns[id];
    },
    _getDataTypeByField: function(field) {
        var sortType = "string";
        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.field == field) {
                if (column.sortType) {
                    sortType = column.sortType.toLowerCase();
                } else if (column.dataType) sortType = column.dataType.toLowerCase();
                break;
            }
        }
        return sortType;
    },
    getParentColumn: function(column) {
        column = this.getColumn(column);
        var pid = column._pid;
        if (pid == -1) return this;
        return this._idColumns[pid];
    },
    getAncestorColumns: function(node) {
        var as = [node];
        while (1) {
            var parentNode = this.getParentColumn(node);
            if (!parentNode || parentNode == this) break;
            as[as.length] = parentNode;
            node = parentNode;
        }
        as.reverse();
        return as;
    },
    isAncestorColumn: function(parentNode, node) {
        if (parentNode == node) return true;
        if (!parentNode || !node) return false;
        var as = this.getAncestorColumns(node);
        for (var i = 0, l = as.length; i < l; i++) {
            if (as[i] == parentNode) return true;
        }
        return false;
    },
    isVisibleColumn: function(column) {
        column = this.getColumn(column);
        if (column.visible == false) return false;

        var columns = this.getAncestorColumns(column);
        for (var i = 0, l = columns.length; i < l; i++) {
            if (columns[i].visible == false) return false;
        }

        var nodes = column.columns;
        if (nodes) {
            var allHide = true;
            for (var i = 0, l = nodes.length; i < l; i++) {
                var node = nodes[i];
                if (this.isVisibleColumn(node)) {
                    allHide = false;
                    break;
                }
            }
            if (allHide) return false;
        }

        return true;
    },
    isBottomColumn: function(column) {
        column = this.getColumn(column);
        return !(column.columns && column.columns.length > 0);
    },

    updateColumn: function(column, options) {
        column = this.getColumn(column);
        if (!column) return;
        mini.copyTo(column, options);
        this._columnsChanged();
    },
    moveColumn: function(column, targetColumn, action) {
        column = this.getColumn(column);
        targetColumn = this.getColumn(targetColumn);
        if (!column || !targetColumn || !action || column == targetColumn) return;

        if (this.isAncestorColumn(column, targetColumn)) {
            return;
        }


        var pcolumn = this.getParentColumn(column);
        if (pcolumn) {
            pcolumn.columns.remove(column);
        }


        var parentColumn = targetColumn;
        var index = action;
        if (index == 'before') {
            parentColumn = this.getParentColumn(targetColumn);
            index = parentColumn.columns.indexOf(targetColumn);
        } else if (index == 'after') {
            parentColumn = this.getParentColumn(targetColumn);
            index = parentColumn.columns.indexOf(targetColumn) + 1;
        } else if (index == 'add' || index == "append") {
            if (!parentColumn.columns) parentColumn.columns = [];
            index = parentColumn.columns.length;
        } else if (!mini.isNumber(index)) {
            return;
        }

        parentColumn.columns.insert(index, column);

        this._columnsChanged();
    },
    addColumn: function(column) {
        if (!column) return;
        delete column._id;
        this._columnsChanged();
    },
    removeColumn: function() {
        this._columnsChanged();
    }
});

mini.GridView = function() {
    this._createTime = new Date();


    this._createColumnModel();
    this._bindColumnModel();


    this.data = [];
    this._createSource();
    this._bindSource();

    this._initData();

    mini.GridView.superclass.constructor.apply(this, arguments);


    this._doUpdateFilterRow();
    this._doUpdateSummaryRow();

    this.doUpdate();


    if (mini.isNull(this._paddingTop)) {

        if (mini.isNull(mini.GridView._paddingTop)) {
            var d = $('<div class="mini-grid-cell-inner" style="position:absolute;left:-1000px;top:-1000px;"></div>').appendTo('body');
            var p = mini.getPaddings(d);
            mini.GridView._paddingTop = p.top;
            mini.GridView._paddingBottom = p.bottom;
        }
        this._paddingTop = mini.GridView._paddingTop;
        this._paddingBottom = mini.GridView._paddingBottom;
    }

    this._rowClsHash = {};

}
mini.extend(mini.GridView, mini.Panel, {
    _displayStyle: "block",

    _rowIdField: "_id",

    width: "100%",

    showSortIcon: false,

    showColumns: true,
    showFilterRow: false,
    showSummaryRow: false,
    showPager: false,

    allowCellWrap: false,
    allowHeaderWrap: false,

    showModified: true,
    showNewRow: true,

    showEmptyText: false,
    emptyText: "No data returned.",

    showHGridLines: true,
    showVGridLines: true,

    allowAlternating: false,
    _alternatingCls: "mini-grid-row-alt",

    _rowCls: "mini-grid-row",
    _cellCls: "mini-grid-cell",
    _headerCellCls: "mini-grid-headerCell",

    _rowSelectedCls: "mini-grid-row-selected",
    _rowHoverCls: "mini-grid-row-hover",

    _cellSelectedCls: "mini-grid-cell-selected",

    defaultRowHeight: 25,
    fixedRowHeight: false,
    isFixedRowHeight: function() {
        return this.fixedRowHeight;
    },

    fitColumns: true,
    isFitColumns: function() {
        return this.fitColumns;
    },
    getAllowAlternating: function() {
        return this.allowAlternating
    },
    setAllowAlternating: function($) {
        this.allowAlternating = $;
        this.doUpdate()
    },
    showGroupSummary: false,
    getShowGroupSummary: function() {
        return this.showGroupSummary
    },
    setShowGroupSummary: function(value) {
        this.showGroupSummary = value
    },
    summaryPosition: "bottom",
    getSummaryPosition: function() {
        return this.summaryPosition
    },
    setSummaryPosition: function(value) {
        this.summaryPosition = value;
        if (this.summaryPosition == "top") {
            mini.before(this._rowsEl, this._summaryEl);
            mini.before(this._summaryViewEl, this._summaryLockEl)
        }
        jQuery(this.el).toggleClass("mini-grid-summary-top", value == "top")
    },
    uiCls: "mini-gridview",
    _create: function() {

        mini.GridView.superclass._create.call(this);
        var el = this.el;
        mini.addClass(el, 'mini-grid');
        mini.addClass(this._borderEl, 'mini-grid-border');
        mini.addClass(this._viewportEl, 'mini-grid-viewport');

        var bottomPager = '<div class="mini-grid-pager"></div>';
        var filter = '<div class="mini-grid-filterRow"><div class="mini-grid-filterRow-view"></div><div class="mini-grid-scrollHeaderCell"></div></div>';
        var summary = '<div class="mini-grid-summaryRow"><div class="mini-grid-summaryRow-view"></div><div class="mini-grid-scrollHeaderCell"></div></div>';
        var columns = '<div class="mini-grid-columns"><div class="mini-grid-columns-view"></div><div class="mini-grid-scrollHeaderCell"></div></div>';


        this._columnsEl = mini.after(this._toolbarEl, columns);
        this._filterEl = mini.after(this._columnsEl, filter);
        this._rowsEl = this._bodyEl;
        mini.addClass(this._rowsEl, "mini-grid-rows");
        this._summaryEl = mini.after(this._rowsEl, summary);
        this._bottomPagerEl = mini.after(this._summaryEl, bottomPager);

        this._columnsViewEl = this._columnsEl.childNodes[0];



        this._rowsViewEl = mini.append(this._rowsEl, '<div class="mini-grid-rows-view"><div class="mini-grid-rows-content"></div></div>')
        this._rowsViewContentEl = this._rowsViewEl.firstChild;


        this._filterViewEl = this._filterEl.childNodes[0];

        this._summaryViewEl = this._summaryEl.childNodes[0];

        var s = '<a href="#" class="mini-grid-focus" style="position:absolute;left:0px;top:0px;width:0px;height:0px;outline:none;" hideFocus onclick="return false" ></a>';
        this._focusEl = mini.append(this._borderEl, s);
        var me = this;
        mini_on(this._filterViewEl, "scroll", function(e) {
            if (me._filterViewEl.scrollLeft > 0) me._filterViewEl.scrollLeft = 0
        })
    },
    destroy: function(removeEl) {

        if (this._dataSource) {
            this._dataSource.destroy();
            this._dataSource = null;
        }
        if (this._columnModel) {
            this._columnModel.destroy();
            this._columnModel = null;
        }
        if (this._pagers) {
            var ps = this._pagers.clone();
            for (var i = 0, l = ps.length; i < l; i++) {
                ps[i].destroy(removeEl);
            }

            this._pagers = null;
        }
        if (this._viewportEl) {
            mini.clearEvent(this._viewportEl);
        }

        if (this._rowsViewEl) {
            mini.clearEvent(this._rowsViewEl);
        }
        if (this._rowsEl) {
            mini.clearEvent(this._rowsEl);
        }
        if (this._vscrollEl) {
            mini.clearEvent(this._vscrollEl)
        }

        if (this._headerEl) {
            mini.clearEvent(this._headerEl)
        }
        if (this._columnsEl) {
            jQuery(this._columnsEl).off("mouseenter");
            jQuery(this._columnsEl).off("mouseleave");
        }

        this._columnsEl = this._rowsEl = this._filterEl = this._summaryEl = this._bottomPagerEl = null;
        this._columnsViewEl = this._topRightCellEl = this._rowsViewEl = this._rowsViewContentEl = null;
        this._filterViewEl = this._summaryViewEl = this._focusEl = null;
        this._viewportEl = this._vscrollEl = this._bottomPager = null;

        mini.GridView.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function() {
        mini.GridView.superclass._initEvents.call(this);

        mini.on(this._rowsViewEl, "scroll", this.__OnRowViewScroll, this);
    },



    _sizeChanged: function() {
        mini.GridView.superclass._sizeChanged.call(this);


        var autoHeight = this.isAutoHeight();
        if (mini.isIE) {
            if (autoHeight) {
                mini.addClass(this._rowsViewEl, 'mini-grid-hidden-y');
            } else {
                mini.removeClass(this._rowsViewEl, 'mini-grid-hidden-y');
            }
        }

    },
    _setBodyWidth: false,
    doLayoutCardView: function() {
        var A = this,
            $ = this._rowsViewEl.scrollHeight > this._rowsViewEl.clientHeight + 1,
            B = this._columnsViewEl.firstChild,
            _ = $ ? mini.getScrollOffset() : 0;
        B.parentNode.style["paddingRight"] = _ + "px";
        B.style.width = "100%"
    },
    doLayout: function() {
        var that = this;
        if (!this.canLayout()) return;
        mini.GridView.superclass.doLayout.call(this);

        this._stopLayout();
        if (this.viewType == "cardview") {
            this.doLayoutCardView();
            return
        }

        var autoHeight = this.isAutoHeight();
        var hdTable = this._columnsViewEl.firstChild;
        var bdTable = this._rowsViewContentEl.firstChild;

        var filterTable = this._filterViewEl.firstChild;
        var summaryTable = this._summaryViewEl.firstChild;
        var //H = jQuery(this._columnsViewEl).height(),
            filterTableHeight = filterTable.offsetHeight,
            outScrollHeight = this._rowsViewEl.scrollHeight > this._rowsViewEl.clientHeight + 1,
            outScrollWidth = this._rowsViewEl.scrollWidth > this._rowsViewEl.clientWidth + 1,
            outOffsetWidth = this._rowsViewContentEl.parentNode.offsetWidth,
            scrollOffset = outOffsetWidth - (outScrollHeight ? mini.getScrollOffset() : 0);






        function doLayout(hdTable) {


            if (this.isFitColumns()) {
                bdTable.style.width = "100%";

                if (mini.isSafari || mini.isChrome || mini.isIE6) {




                    hdTable.style.width = bdTable.offsetWidth + "px";


                } else {

                    if (this._rowsViewEl.scrollHeight > this._rowsViewEl.clientHeight + 1) {

                        hdTable.style.width = "100%";
                        hdTable.parentNode.style.width = "auto";

                        hdTable.parentNode.style["paddingRight"] = mini.getScrollOffset() + "px";



                        if (mini.isIE8) mini.removeClass(this._rowsViewEl, 'mini-grid-hidden-y');
                    } else {
                        hdTable.style.width = "100%";
                        hdTable.parentNode.style.width = "auto";
                        hdTable.parentNode.style["paddingRight"] = "0px";

                        if (mini.isIE8) mini.addClass(this._rowsViewEl, 'mini-grid-hidden-y');
                    }


                }
            } else {
                bdTable.style.width = "0px";
                hdTable.style.width = "0px";
                if (mini.isSafari || mini.isChrome || mini.isIE6) {

                } else {
                    hdTable.parentNode.style.width = "100%";
                    hdTable.parentNode.style["paddingRight"] = "0px";
                }
            }

        }
        doLayout.call(this, hdTable);
        doLayout.call(this, filterTable);
        doLayout.call(this, summaryTable);


        this._syncScroll();
        var me = this;
        setTimeout(function() {
            mini.layout(me._filterEl);
            mini.layout(me._summaryEl)
        }, 10);

        if (mini.isIE6) {
            setTimeout(function() {
                doLayout.call(that, hdTable);
            }, 1);
        }


        if (mini.isIE10) {

            setTimeout(function() {
                if (me.isFitColumns()) {
                    hdTable.style.width = 'auto';
                    hdTable.offsetWidth;
                    hdTable.style.width = '100%';
                } else {
                    hdTable.style.width = '0px';

                }
            }, 0);
            mini.repaint(bdTable);
        }


        this._topRightCellEl = this._columnsViewEl.childNodes[1];

        if (mini.isIE6) {
            this._topRightCellEl.style.height = jQuery(this._columnsViewEl).height() + "px";
        }




        if (mini.isIE6 || mini.isIE7) {
            this._rowsViewContentEl.style["paddingBottom"] = "0px";
            if (autoHeight) {
                var outScrollWidth = this._rowsViewEl.scrollWidth > this._rowsViewEl.clientWidth + 1;
                if (outScrollWidth) {
                    this._rowsViewContentEl.style["paddingBottom"] = "17px";
                }
            }
        }
        this._filterViewEl.style.height = filterTableHeight + "px";
        filterTable.style.width = this.isFitColumns() ? (scrollOffset + "px") : ""
    },
    setBody: function() {},







    _createTopRowHTML: function(columns, force, data) {
        var s = "";
        if (mini.isIE) {
            if (mini.isIE6 || mini.isIE7 || !mini.boxModel) {

                s += '<tr style="display:none;height:0px;">';
            } else {
                s += '<tr style="height:0px;">';
            }

        } else if (mini.isChrome && data && data.length == 0)
        	s += "<tr style=\"height:1px;\">";
		else {
            s += '<tr style="height:0px;">';
        }

        if (this._userEmptyTd !== false) s += '<td style="height:0px;width:0;"></td>';


        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var width = column.width;
            var id = column._id;
            s += '<td id="' + id + '" style="padding:0;border:0;margin:0;height:0px;';
            if (column.width) s += 'width:' + column.width;
            s += '" ></td>';
        }
        s += '<td style="width:0px;"></td>';
        s += "</tr>";
        return s;
    },

    _createColumnsHTML: function(rows, viewIndex, visibleColumns) {
        var visibleColumns = visibleColumns ? visibleColumns : this.getVisibleColumns();
        var sb = ['<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0">'];
        sb.push(this._createTopRowHTML(visibleColumns));


        var sortField = this.getSortField();
        var sortOrder = this.getSortOrder();

        for (var j = 0, k = rows.length; j < k; j++) {
            var columns = rows[j];
            sb[sb.length] = '<tr>';
            sb[sb.length] = '<td style="width:0;"></td>';
            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];
                var _sortField = column.sortField || column.field;

                var headerText = this._createHeaderText(column, viewIndex);

                var columnId = this._createHeaderCellId(column, viewIndex)



                var sortCls = "";
                if (sortField && sortField == _sortField) {
                    sortCls = sortOrder == "asc" ? "mini-grid-asc" : "mini-grid-desc";
                }
                var cls = "";
                if (this.allowHeaderWrap == false) {
                    cls = " mini-grid-headerCell-nowrap ";
                }

                sb[sb.length] = '<td id="';
                sb[sb.length] = columnId;
                sb[sb.length] = '" class="mini-grid-headerCell ' + sortCls + ' ' + (column.headerCls || "") + ' ';

                var isButtom = !(column.columns && column.columns.length > 0)
                if (isButtom) sb[sb.length] = ' mini-grid-bottomCell ';
                if (i == l - 1) sb[sb.length] = ' mini-grid-rightCell ';

                sb[sb.length] = '" style="';
                if (column.headerStyle) {

                    sb[sb.length] = column.headerStyle + ';';
                }
                if (column.headerAlign) {
                    sb[sb.length] = 'text-align:' + column.headerAlign + ';';
                }

                sb[sb.length] = '" ';

                if (column.rowspan) {
                    sb[sb.length] = 'rowspan="' + column.rowspan + '" ';
                }
                this._createColumnColSpan(column, sb, viewIndex);

                sb[sb.length] = '><div class="mini-grid-headerCell-outer"><div class="mini-grid-headerCell-inner ' + cls + '">';

                sb[sb.length] = headerText;

                if (sortCls) {
                    sb[sb.length] = '<span class="mini-grid-sortIcon"></span>';
                } else {
                    if (this.showSortIcon) {
                        if (column.allowSort) {
                            sb[sb.length] = '<span class="mini-grid-allowsort"></span>';
                        }
                    }
                }

                sb[sb.length] = '</div><div id="' + column._id + '" class="mini-grid-column-splitter"></div>';

                sb[sb.length] = '</div></td>';
            }


            if (this.isFrozen() && viewIndex == 1) {
                sb[sb.length] = '<td class="mini-grid-headerCell" style="width:0;"><div class="mini-grid-headerCell-inner" style="';


                sb[sb.length] = '">0</div></td>';
            }

            sb[sb.length] = '</tr>';
        }
        sb.push('</table>');
        return sb.join('');
    },
    _createHeaderText: function(column, viewIndex) {
        var header = column.header;
        if (typeof header == "function") header = header.call(this, column);
        if (mini.isNull(header) || header === "") header = "&nbsp;";
        return header;
    },
    _createColumnColSpan: function(column, sb, viewIndex) {
        if (column.colspan) {
            sb[sb.length] = 'colspan="' + column.colspan + '" ';
        }
    },
    doUpdateColumns: function() {
        var scrollLeft = this._columnsViewEl.scrollLeft;

        var columnRows = this.getVisibleColumnsRow();
        var html = this._createColumnsHTML(columnRows, 2);
        var s = '<div class="mini-grid-topRightCell"></div>';
        html += s;
        this._columnsViewEl.innerHTML = html;

        this._columnsViewEl.scrollLeft = scrollLeft;
    },
    doUpdate: function() {
        if (this.canUpdate() == false) return;
        var that = this;


        var defer = this._isCreating();

        var sss = new Date();

        this._doUpdateSummaryRow();

        var me = this;

        var scrollLeft = this.getScrollLeft();

        function doUpdate() {
            if (!me.el) return;
            me.doUpdateColumns();

            if (me.viewType == "cardview") me.updateCardView();
            else me.doUpdateRows();
            me.doLayout();
            me._doUpdateTimer = null;
        }

        me.doUpdateColumns();

        if (defer) {
            this._useEmptyView = true;
        }

        this._doRemoveRowContent();

        if (me.viewType == "cardview") me.updateCardView();
        else me.doUpdateRows();

        if (scrollLeft > 0 && me.isVirtualScroll()) {
            me.setScrollLeft(scrollLeft);
        }

        if (defer) {
            this._useEmptyView = false;
        }
        me.doLayout();
        if (defer && !this._doUpdateTimer) {
            this._doUpdateTimer = setTimeout(doUpdate, 15);
        }
        this.unmask();

        if (that._fireUpdateTimer) {
            clearTimeout(that._fireUpdateTimer);
            that._fireUpdateTimer = null;
        }
        that._fireUpdateTimer = setTimeout(function() {
            that._fireUpdateTimer = null;
            that.fire("update");
        }, 100);

    },

    _doRemoveRowContent: function() {
        if (this._rowsViewContentEl && this._rowsViewContentEl.firstChild) {
            this._rowsViewContentEl.removeChild(this._rowsViewContentEl.firstChild);
        }
        if (this._rowsLockContentEl && this._rowsLockContentEl.firstChild) {
            this._rowsLockContentEl.removeChild(this._rowsLockContentEl.firstChild);
        }
    },


    _isCreating: function() {
        return (new Date() - this._createTime) < 1000;
    },
    deferUpdate: function(time) {
        if (!time) time = 5;
        if (this._updateTimer || this._doUpdateTimer) return;
        var me = this;
        this._updateTimer = setTimeout(function() {
            me._updateTimer = null;
            me.doUpdate();
        }, time);
    },
    _stopDeferUpdate: function() {
        if (this._updateTimer) {
            clearTimeout(this._updateTimer);
            this._updateTimer = null
        }
    },
    _pushUpdateCallback: function(fn, scope, args) {
        var time = 0;

        if (this._doUpdateTimer || this._updateTimer) time = 20;

        if (time == 0) {
            fn.apply(scope, args);
        } else {
            setTimeout(function() {
                fn.apply(scope, args);
            }, time);
        }
    },
    _updateCount: 0,
    beginUpdate: function() {
        this._updateCount++;
    },
    endUpdate: function(raise) {
        this._updateCount--;
        if (this._updateCount == 0 || raise === true) {
            this._updateCount = 0;
            this.doUpdate();
        }
    },
    canUpdate: function() {

        return this._updateCount == 0;
    },

    setDefaultRowHeight: function(value) {
        this.defaultRowHeight = value;
    },
    getDefaultRowHeight: function() {
        return this.defaultRowHeight;
    },
    _getRowHeight: function(record) {



        var h = this.defaultRowHeight;
        if (record._height) {
            h = parseInt(record._height);
            if (isNaN(parseInt(record._height))) h = rowHeight;
        }


        h = h - this._paddingTop - this._paddingBottom;


        h -= 1;

        return h;
    },
    _createGroupingHTML: function(columns, viewIndex) {

        var groups = this.getGroupingView();
        var showGroupSummary = this._showGroupSummary;

        var isFrozen = this.isFrozen();

        var rowIndex = 0;
        var me = this;

        function createRows(rows, group) {
            sb.push('<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0">');
            if (columns.length > 0) {
                sb.push(me._createTopRowHTML(columns));
                for (var j = 0, k = rows.length; j < k; j++) {
                    var row = rows[j];
                    me._createRowHTML(row, rowIndex++, columns, viewIndex, sb);
                }
            }

            if (showGroupSummary) {

            }
            sb.push('</table>');
        }

        var groupTitleCollapsible = this.groupTitleCollapsible !== false;

        var sb = ['<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0">'];
        sb.push(this._createTopRowHTML(columns));
        for (var j = 0, k = groups.length; j < k; j++) {

            if (viewIndex == 1 && !this.isFrozen()) continue;

            var group = groups[j];
            var id = this._createRowGroupId(group, viewIndex);
            var rowid = this._createRowGroupRowsId(group, viewIndex);
            var e = this._OnDrawGroup(group);
            var cls = group.expanded ? '' : ' mini-grid-group-collapse ';

            sb[sb.length] = '<tr id="';
            sb[sb.length] = id;
            sb[sb.length] = '" class="mini-grid-groupRow';
            sb[sb.length] = cls;

            sb[sb.length] = '"><td style="width:0;"></td><td class="mini-grid-groupCell ';

            sb[sb.length] = e.cls;
            sb[sb.length] = '" style="';
            sb[sb.length] = e.style;
            sb[sb.length] = '" colspan="';
            sb[sb.length] = columns.length;

            sb[sb.length] = '"><div class="mini-grid-groupHeader ';
            if (groupTitleCollapsible) {
                sb[sb.length] = 'mini-grid-groupHeader-collapsible';
            }
            sb[sb.length] = '">';


            if (!isFrozen || (isFrozen && viewIndex == 1)) {
                sb[sb.length] = '<div class="mini-grid-group-ecicon"></div>';
                sb[sb.length] = '<div class="mini-grid-groupTitle">' + e.cellHtml + '</div>';
            } else {
                sb[sb.length] = "&nbsp;";
            }
            sb[sb.length] = '</div></td></tr>';



            var style = group.expanded ? "" : "display:none";
            sb[sb.length] = '<tr class="mini-grid-groupRows-tr" style="';


            sb[sb.length] = '"><td style="width:0;"></td><td class="mini-grid-groupRows-td" colspan="';

            sb[sb.length] = columns.length;
            sb[sb.length] = '"><div id="';
            sb[sb.length] = rowid;
            sb[sb.length] = '" class="mini-grid-groupRows" style="';
            sb[sb.length] = style;
            sb[sb.length] = '">';
            createRows(group.rows, group);
            sb[sb.length] = '</div></td></tr>';
            if (showGroupSummary)
                if (columns.length > 0) {
                    sb[sb.length] = "<tr class=\"mini-grid-groupFooter\">";
                    sb[sb.length] = "<td style=\"width:0;\"></td>";
                    for (var D = 0, H = columns.length; D < H; D++) {
                        var column = columns[D],
                            id = "",
                            $ = this._OnDrawSummaryCell(group.rows, column, group);
                        sb[sb.length] = "<td id=\"";
                        sb[sb.length] = id;
                        sb[sb.length] = "\" class=\"mini-grid-cell " + $.cellCls + "\" style=\"" + $.cellStyle + ";";
                        sb[sb.length] = "\"><div class=\"mini-grid-cell-inner\">";
                        sb[sb.length] = $.cellHtml;
                        sb[sb.length] = "</div></td>"
                    }
                    sb[sb.length] = "</tr>"
                }
        }
        sb.push('</table>');
        return sb.join('');
    },

    _isFastCreating: function() {

        var data = this.getVisibleRows();
        if (data.length > 50) {
            return this._isCreating() || this.getScrollTop() < 50 * this._defaultRowHeight;
        }
        return false;
    },
    isShowRowDetail: function(row) {
        return false;
    },
    isCellValid: function(record, column) {
        return true;
    },
    updateCardView: function() {
        var grid = this,
            $ = this.getVisibleRows(),
            _ = this.getVisibleColumns(),
            G = [];
        for (var D = 0, F = $.length; D < F; D++) {
            var B = $[D],
                A = {
                    rowCls: "",
                    rowStyle: ""
                },
                E = grid.itemRenderer(B, D, A, grid);
            G[G.length] = "<div class=\"mini-grid-row ";
            G[G.length] = A.rowCls;
            G[G.length] = "\" style=\"";
            G[G.length] = A.rowStyle;
            G[G.length] = "\" id=\"";
            G[G.length] = grid._createRowId(B, 1);
            G[G.length] = "\">";
            G[G.length] = E;
            G[G.length] = "</div>"
        }
        grid._rowsViewContentEl.innerHTML = G.join("")
    },
    itemRenderer: function(A, B, $, _) {
        return ""
    },
    _injectRowHTML: function(type, record, rowIndex, columns) {
        var e = {
            injectHtml: '',
            wrap: true,
            record: record,
            rowIndex: rowIndex,
            columns: columns
        };
        var eventName = type == 'prepend' ? 'prependrowrender' : 'appendrowrender';
        this.fire(eventName, e);
        if (e.injectHtml) {
            var ss = [];
            if (e.wrap) {
                ss = ['<tr class="mini-grid-row-' + type + '">'];
                if (this._userEmptyTd !== false) ss[ss.length] = '<td style="width:0;"></td>';
            }
            // !(e.appendHtml).match(/<\s*(td)\s*>[\s\S]*?<\/\s*\1\s*>/)
            if (!/<\s*td/.test(e.injectHtml)) {
                e.injectHtml = '<td colspan="' + columns.length + '">' + e.injectHtml + '</td>';
            }
            ss[ss.length] = e.injectHtml;
            if (e.wrap) {
                ss[ss.length] = '</tr>';
            }
            return ss.join('');
        }
    },
    _createRowHTML: function(record, rowIndex, columns, viewIndex, sb) {
        var isReturn = !sb;
        if (!sb) sb = [];
        var rowHeight = "";
        var isFixedRowHeight = this.isFixedRowHeight();
        if (isFixedRowHeight) {
            rowHeight = this._getRowHeight(record);
        }
        var defaultRowHeight = this.defaultRowHeight - 1;

        var e = {
            prependHtml: '',
            record: record,
            rowIndex: rowIndex,
            viewIndex: viewIndex,
            columns: columns
        };
        var prepend = this._injectRowHTML('prepend', record, rowIndex, columns);
        if (prepend) {
            sb[sb.length] = prepend;
        }

        var rowClsIndex = -1;
        var rowCls = " ";
        var rowStyleIndex = -1;
        var rowStyle = " ";

        sb[sb.length] = '<tr class="mini-grid-row ';

        if (record._state == "added" && this.showNewRow) sb[sb.length] = "mini-grid-newRow ";
        if (this.isShowRowDetail(record)) sb[sb.length] = "mini-grid-expandRow ";

        if (this.allowAlternating && rowIndex % 2 == 1) {
            sb[sb.length] = this._alternatingCls;
            sb[sb.length] = " ";
        }



        var _rowClsSb = this._rowClsHash[record._id];
        if (_rowClsSb) {

            sb[sb.length] = _rowClsSb.join(' ');
            sb[sb.length] = " ";
        }



        var isSelected = this._dataSource.isSelected(record);
        if (isSelected) {
            sb[sb.length] = this._rowSelectedCls;
            sb[sb.length] = " ";
        }

        rowClsIndex = sb.length;
        sb[sb.length] = rowCls;
        sb[sb.length] = '" style="';
        rowStyleIndex = sb.length;
        sb[sb.length] = rowStyle;

        if (record.visible === false) {
            sb[sb.length] = ";display:none;";
        }

        sb[sb.length] = '" id="';
        sb[sb.length] = this._createRowId(record, viewIndex);
        sb[sb.length] = '">';

        if (this._userEmptyTd !== false) sb[sb.length] = '<td style="width:0;"></td>';

        var _currentCell = this._currentCell;

        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var cellId = this._createCellId(record, column);

            var cls = "";


            var e = this._OnDrawCell(record, column, rowIndex, column._index);
            if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") {
                e.cellHtml = "&nbsp;";
            }

            sb[sb.length] = '<td ';
            if (e.rowSpan) {
                sb[sb.length] = 'rowspan="' + e.rowSpan + '"';
            }
            if (e.colSpan) {
                sb[sb.length] = 'colspan="' + e.colSpan + '"';
            }
            sb[sb.length] = ' id="';
            sb[sb.length] = cellId;

            sb[sb.length] = '" class="mini-grid-cell ';

            if (!this.isCellValid(record, column)) sb[sb.length] = ' mini-grid-cell-error ';

            if (i == l - 1) sb[sb.length] = ' mini-grid-rightCell ';

            if (e.cellCls) sb[sb.length] = ' ' + e.cellCls + ' ';
            if (cls) sb[sb.length] = cls;

            if (_currentCell && _currentCell[0] == record && _currentCell[1] == column) {
                sb[sb.length] = " ";
                sb[sb.length] = this._cellSelectedCls;
            }

            sb[sb.length] = '" style="';
            if (e.showHGridLines == false) {
                sb[sb.length] = 'border-bottom:0;';
            }
            if (e.showVGridLines == false) {
                sb[sb.length] = 'border-right:0;';
            }

            if (!e.visible) sb[sb.length] = "display:none;";

            if (column.align) {
                sb[sb.length] = 'text-align:';
                sb[sb.length] = column.align;
                sb[sb.length] = ';';
            }

            if (e.cellStyle) sb[sb.length] = e.cellStyle;

            sb[sb.length] = '">';
            sb[sb.length] = '<div class="mini-grid-cell-inner ';
            if (!e.allowCellWrap) {
                sb[sb.length] = ' mini-grid-cell-nowrap ';
            }
            if (e.cellInnerCls) {
                sb[sb.length] = e.cellInnerCls;
            }

            var isModified = column.field ? this._dataSource.isModified(record, column.field) : false;
            if (isModified && this.showModified) {
                sb[sb.length] = ' mini-grid-cell-dirty';
            }


            sb[sb.length] = '" style="';
            if (isFixedRowHeight) {

                sb[sb.length] = 'height:';


                if (!column.name || this._treeColumn !== column.name) {
                    sb[sb.length] = rowHeight;
                } else {
                    sb[sb.length] = defaultRowHeight;
                }

                sb[sb.length] = 'px;';
                sb[sb.length] = 'line-height:';


                if (!column.name || this._treeColumn !== column.name) {
                    sb[sb.length] = rowHeight;
                } else {
                    sb[sb.length] = defaultRowHeight;
                }

                sb[sb.length] = 'px;';
            }
            if (e.cellInnerStyle) {
                sb[sb.length] = e.cellInnerStyle;
            }
            sb[sb.length] = '">';
            sb[sb.length] = e.cellHtml;
            sb[sb.length] = '</div>';
            sb[sb.length] = '</td>';

            if (e.rowCls) rowCls = e.rowCls;
            if (e.rowStyle) rowStyle = e.rowStyle;
        }

        if (this.isFrozen() && viewIndex == 1) {
            sb[sb.length] = '<td class="mini-grid-cell" style="width:0;';
            if (this.showHGridLines == false) {
                sb[sb.length] = 'border-bottom:0;';
            }
            sb[sb.length] = '"><div class="mini-grid-cell-inner" style="';
            if (isFixedRowHeight) {
                sb[sb.length] = 'height:';
                sb[sb.length] = rowHeight;
                sb[sb.length] = 'px;';
            }

            sb[sb.length] = '">0</div></td>';
        }

        sb[rowClsIndex] = rowCls;
        sb[rowStyleIndex] = rowStyle;

        sb[sb.length] = '</tr>';


        var append = this._injectRowHTML('append', record, rowIndex, columns);
        if (append) {
            sb[sb.length] = append;
        }

        if (isReturn) {
            var s = sb.join('');


            var reg = /(<script(.*)<\/script(\s*)>)/i;
            s = s.replace(reg, "");

            return s;
        }
    },
    _createRowsHTML: function(columns, viewIndex, data, bottomHtml) {

        data = data || this.getVisibleRows();

        var sb = ['<table class="mini-grid-table mini-grid-rowstable" cellspacing="0" cellpadding="0" border="0">'];
        sb.push(this._createTopRowHTML(columns, true, data));

        var emptyId = this.uid + "$emptytext" + viewIndex;
        if (viewIndex == 2 && this._dataSource.loaded) {
            var style = (this.showEmptyText && data.length == 0) ? '' : 'display:none;';
            sb.push('<tr id="' + emptyId + '" style="' + style + '"><td style="width:0"></td><td class="mini-grid-emptyText" colspan="' + columns.length + '">' + this.emptyText + '</td></tr>');
        }

        var startIndex = 0;
        if (data.length > 0) {
            var first = data[0];
            startIndex = this.getVisibleRows().indexOf(first);

        }
        for (var j = 0, k = data.length; j < k; j++) {
            var rowIndex = startIndex + j;
            var record = data[j];
            this._createRowHTML(record, rowIndex, columns, viewIndex, sb);
        }

        if (bottomHtml) {
            sb.push(bottomHtml);
        }

        sb.push('</table>');

        return sb.join('');
    },
    doUpdateRows: function() {
        var data = this.getVisibleRows();

        var sss = new Date();

        var columns = this.getVisibleColumns();
        if (this.isGrouping()) {
            var html = this._createGroupingHTML(columns, 2);
            this._rowsViewContentEl.innerHTML = html;
        } else {
            var html = this._createRowsHTML(columns, 2, data);
            this._rowsViewContentEl.innerHTML = html;
        }


    },

    _createFilterRowHTML: function(columns, viewIndex) {
        var sb = ['<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0">'];
        sb.push(this._createTopRowHTML(columns));
        sb[sb.length] = '<tr>';
        sb[sb.length] = '<td style="width:0;"></td>';
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var id = this._createFilterCellId(column);
            sb[sb.length] = '<td id="';
            sb[sb.length] = id;
            sb[sb.length] = '" class="mini-grid-filterCell" style="';
            sb[sb.length] = '">&nbsp;</td>';
        }
        sb[sb.length] = '</tr></table><div class="mini-grid-scrollHeaderCell"></div>';
        var s = sb.join('');
        return s;
    },
    _doRenderFilters: function() {

        var columns = this.getVisibleColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.filter) {

                var cellEl = this.getFilterCellEl(column);
                if (cellEl) {
                    cellEl.innerHTML = "";
                    column.filter.render(cellEl);
                }
            }
        }
    },
    _doUpdateFilterRow: function() {
        if (this._filterViewEl.firstChild) {
            this._filterViewEl.removeChild(this._filterViewEl.firstChild);
        }
        var isFrozen = this.isFrozen();
        var columns = this.getVisibleColumns();

        var html = this._createFilterRowHTML(columns, 2);
        this._filterViewEl.innerHTML = html;

        this._doRenderFilters();
    },

    _createSummaryRowHTML: function(columns, viewIndex) {
        var records = this.getDataView();

        var sb = ['<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0">'];
        sb.push(this._createTopRowHTML(columns));
        sb[sb.length] = '<tr>';
        sb[sb.length] = '<td style="width:0;"></td>';
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var id = this._createSummaryCellId(column);

            var e = this._OnDrawSummaryCell(records, column);

            sb[sb.length] = '<td id="';
            sb[sb.length] = id;
            sb[sb.length] = '" class="mini-grid-summaryCell ' + e.cellCls + '" style="' + e.cellStyle + ';';
            sb[sb.length] = '">';
            sb[sb.length] = e.cellHtml;
            sb[sb.length] = '</td>';
        }
        sb[sb.length] = '</tr></table><div class="mini-grid-scrollHeaderCell"></div>';
        var s = sb.join('');
        return s;
    },
    _doUpdateSummaryRow: function() {
        if (!this.showSummaryRow) return;
        var columns = this.getVisibleColumns();
        var html = this._createSummaryRowHTML(columns, 2);
        this._summaryViewEl.innerHTML = html;
    },

    _doSortByField: function(sortField, sortOrder) {
        if (!sortField) return null;
        var dataType = this._columnModel._getDataTypeByField(sortField);
        this._dataSource._doClientSortField(sortField, sortOrder, dataType);
    },
    _expandGroupOnLoad: true,
    _GroupID: 1,
    _groupField: "",
    _groupDir: "",
    groupBy: function(field, dir) {
        if (!field) return;
        this._groupField = field;
        if (typeof dir == "string") dir = dir.toLowerCase();
        this._groupDir = dir;
        this._createGroupingView();
        this.deferUpdate();
    },
    clearGroup: function() {
        this._groupField = "";
        this._groupDir = "";
        this._groupDataView = null;
        this.deferUpdate();
    },
    setGroupField: function(value) {
        this.groupBy(value);
    },
    setGroupDir: function(value) {
        this._groupDir = field;
        this.groupBy(this._groupField, value);
    },
    isGrouping: function() {
        return this._groupField != "";
    },
    getGroupingView: function() {
        return this._groupDataView;
    },

    enableGroupOrder: true,
    _createGroupingView: function() {
        if (this.isGrouping() == false) return;
        this._groupDataView = null;

        var source = this._dataSource;

        var field = this._groupField,
            dir = this._groupDir;



        if (this.enableGroupOrder) {
            this._doSortByField(field, dir);
        }


        var data = this.getVisibleRows();
        var groups = [];
        var groupMaps = {};
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var v = o[field];
            var p = mini.isDate(v) ? v.getTime() : v;
            var group = groupMaps[p];
            if (!group) {
                group = groupMaps[p] = {};
                group.field = field,
                    group.dir = dir;
                group.value = v;
                group.rows = [];
                groups.push(group);
                group.id = "g" + this._GroupID++;
                group.expanded = this._expandGroupOnLoad;
            }
            group.rows.push(o);
        }


        var sortField = source.sortField,
            sortOrder = source.sortOrder;

        if (sortField) {
            var dataType = this._columnModel._getDataTypeByField(sortField);
            var sortFn = source._getSortFnByField(sortField, dataType);
            if (sortFn) {
                var reverse = sortOrder == "desc";

                for (var i = 0, l = groups.length; i < l; i++) {
                    var group = groups[i];

                    mini.sort(group.rows, sortFn);
                    if (reverse) group.rows.reverse();
                }

            }
        }

        this._groupDataView = groups;
    },
    _OnDrawGroup: function(group) {
        var e = {
            group: group,
            rows: group.rows,
            field: group.field,
            dir: group.dir,
            value: group.value,
            cls: "",
            style: "",
            cellHtml: group.field + " (" + group.rows.length + " Items)"
        };
        this.fire("drawgroup", e);
        return e;
    },
    getRowGroup: function(id) {
        var t = typeof id;
        if (t == "number") return this.getGroupingView()[id];
        if (t == "string") return this._getRowGroupById(id);
        return id;
    },
    getRowGroupByValue: function(value) {
        var groups = this.getGroupingView();
        for (var i = 0, l = groups.length; i < l; i++) {
            var g = groups[i];
            if (g.value == value) return g;
        }
        return null;
    },
    _getRowGroupByEvent: function(e) {
        var t = mini.findParent(e.target, 'mini-grid-groupRow')
        if (t) {
            var ids = t.id.split("$");
            if (ids[0] != this._id) return null;
            var id = ids[ids.length - 1];
            return this._getRowGroupById(id);
        }
        return null;
    },
    _getRowGroupById: function(id) {
        var groups = this.getGroupingView();
        for (var i = 0, l = groups.length; i < l; i++) {
            var g = groups[i];
            if (g.id == id) return g;
        }
        return null;
    },
    _createRowGroupId: function(group, viewIndex) {
        return this._id + "$group" + viewIndex + "$" + group.id;
    },
    _createRowGroupRowsId: function(group, viewIndex) {
        return this._id + "$grouprows" + viewIndex + "$" + group.id;
    },

    _createRowId: function(row, index) {
        var id = this._id + "$row" + index + "$" + row._id;
        return id;
    },
    _createHeaderCellId: function(column, index) {
        var id = this._id + "$headerCell" + index + "$" + column._id;
        return id;
    },
    _createCellId: function(row, column) {
        var id = row._id + "$cell$" + column._id;
        return id;
    },
    _createFilterCellId: function(column) {
        return this._id + "$filter$" + column._id;
    },
    _createSummaryCellId: function(column) {
        return this._id + "$summary$" + column._id;
    },

    getFilterCellEl: function(column) {
        column = this.getColumn(column);
        if (!column) return null;
        return document.getElementById(this._createFilterCellId(column));
    },
    getSummaryCellEl: function(column) {
        column = this.getColumn(column);
        if (!column) return null;
        return document.getElementById(this._createSummaryCellId(column));
    },

    _doVisibleEls: function() {
        mini.GridView.superclass._doVisibleEls.call(this);
        this._columnsEl.style.display = this.showColumns ? "block" : "none";
        this._filterEl.style.display = this.showFilterRow ? "block" : "none";
        this._summaryEl.style.display = this.showSummaryRow ? "block" : "none";
        this._bottomPagerEl.style.display = this.showPager ? "block" : "none";
    },
    setShowColumns: function(value) {
        this.showColumns = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    setShowFilterRow: function(value) {
        this.showFilterRow = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    setShowSummaryRow: function(value) {
        this.showSummaryRow = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    setShowPager: function(value) {

        this.showPager = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    setFitColumns: function(value) {
        this.fitColumns = value;
        mini.removeClass(this.el, 'mini-grid-fixwidth');
        if (this.fitColumns == false) {
            mini.addClass(this.el, 'mini-grid-fixwidth');
        }
        this.deferLayout();
    },
    getBodyHeight: function(content) {
        var h = mini.GridView.superclass.getBodyHeight.call(this, content);
        h = h - this.getColumnsHeight() - this.getFilterHeight() -
            this.getSummaryHeight() - this.getPagerHeight();
        return h;
    },
    getColumnsHeight: function() {
        if (!this.showColumns) return 0;
        var h = mini.getHeight(this._columnsEl);




        return h;
    },
    getFilterHeight: function() {
        return this.showFilterRow ? mini.getHeight(this._filterEl) : 0;
    },
    getSummaryHeight: function() {
        return this.showSummaryRow ? mini.getHeight(this._summaryEl) : 0;
    },
    getPagerHeight: function() {
        return this.showPager ? mini.getHeight(this._bottomPagerEl) : 0;
    },
    getGridViewBox: function(content) {
        var box = mini.getBox(this._columnsEl);
        var bodyBox = mini.getBox(this._bodyEl);
        box.height = bodyBox.bottom - box.top;
        box.bottom = box.top + box.height;
        return box;
    },
    getSortField: function(value) {
        return this._dataSource.sortField;
    },
    getSortOrder: function(value) {
        return this._dataSource.sortOrder;
    },
    map: function(fn, scope) {
        scope = scope || this;
        return this._dataSource.map(fn, scope);
    },
    filterRows: function(fn, scope) {
        scope = scope || this;
        return this._dataSource.filterRows(fn, scope);
    },
    _createSource: function() {
        this._dataSource = new mini.DataTable();
    },
    _bindSource: function() {
        var source = this._dataSource;

        source.on("loaddata", this.__OnSourceLoadData, this);
        source.on("cleardata", this.__OnSourceClearData, this);

    },
    __OnSourceLoadData: function(e) {

        this._initData();

        this.doUpdate();

    },
    __OnSourceClearData: function(e) {
        this._initData();
        this.doUpdate();
    },
    _initData: function() {

    },



    isFrozen: function() {
        var sc = this._columnModel._frozenStartColumn,
            fc = this._columnModel._frozenEndColumn;

        return this._columnModel.isFrozen();
    },
    _createColumnModel: function() {
        this._columnModel = new mini.ColumnModel(this);
    },
    _bindColumnModel: function() {
        this._columnModel.on("columnschanged", this.__OnColumnsChanged, this);
    },
    __OnColumnsChanged: function(e) {
        this.columns = this._columnModel.columns;
        this._doUpdateFilterRow();
        this._doUpdateSummaryRow();

        this.doUpdate();
        this.fire("columnschanged");

    },
    setColumns: function(columns) {
        this._columnModel.setColumns(columns);
        this.columns = this._columnModel.columns;
    },
    getColumns: function() {
        return this._columnModel.getColumns();
    },
    getBottomColumns: function() {
        return this._columnModel.getBottomColumns();
    },
    getVisibleColumnsRow: function() {

        var rows = this._columnModel.getVisibleColumnsRow().clone();
        return rows;
    },
    getVisibleColumns: function() {

        var columns = this._columnModel.getVisibleColumns().clone();
        return columns;
    },
    getFrozenColumns: function() {

        var columns = this._columnModel.getFrozenColumns().clone();

        return columns;
    },
    getUnFrozenColumns: function() {

        var columns = this._columnModel.getUnFrozenColumns().clone();
        return columns;
    },
    getColumn: function(name) {

        return this._columnModel.getColumn(name);
    },
    updateColumn: function(column, options) {
        this._columnModel.updateColumn(column, options);
    },
    showColumns: function(columns) {
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = this.getColumn(columns[i]);
            if (!column) continue;
            column.visible = true;
        }
        this._columnModel._columnsChanged();

    },
    hideColumns: function(columns) {
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = this.getColumn(columns[i]);
            if (!column) continue;
            column.visible = false;
        }
        this._columnModel._columnsChanged();

    },
    showColumn: function(column) {
        this.updateColumn(column, {
            visible: true
        });
    },
    hideColumn: function(column) {
        this.updateColumn(column, {
            visible: false
        });
    },
    moveColumn: function(column, targetColumn, action) {
        this._columnModel.moveColumn(column, targetColumn, action);
    },
    removeColumn: function(column) {
        column = this.getColumn(column);
        if (!column) return;
        var pcolumn = this.getParentColumn(column);
        if (column && pcolumn) {
            pcolumn.columns.remove(column);

            this._columnModel._columnsChanged();
        }
        return column;
    },
    addColumn: function(column){
        column = this.getColumn(column);
        column._pid = -1;
        var pcolumn = this.getParentColumn(column);
        if (column && pcolumn) {
            pcolumn.columns.add(column);
            this._columnModel._columnsChanged();
        }
        return column;
    },
    addColumns: function(columns){
        var oldcolumns = this.getColumns();
        columns.forEach(function(column){
	        if (!column) return;
	        delete column._id;
        });
        oldcolumns.addRange(columns);
        // this.setColumns(oldcolumns);
        this._columnModel._columnsChanged();
    },
    setDefaultColumnWidth: function(value) {
        this._columnModel._defaultColumnWidth = value;
    },
    getDefaultColumnWidth: function() {
        return this._columnModel._defaultColumnWidth;
    },
    setColumnWidth: function(column, width) {
        this.updateColumn(column, {
            width: width
        });
    },
    getColumnWidth: function(column) {
        var box = this.getColumnBox(column);
        return box.width;
    },
    getParentColumn: function(column) {
        return this._columnModel.getParentColumn(column);
    },
    getMaxColumnLevel: function() {
        return this._columnModel._getMaxColumnLevel();
    },

    _isCellVisible: function(rowIndex, columnIndex) {
        return true;
    },
    _createDrawCellEvent: function(record, column, rowIndex, columnIndex) {




        var value = mini._getMap(column.field, record);
        var e = {
            sender: this,

            rowIndex: rowIndex,
            columnIndex: columnIndex,
            record: record,
            row: record,
            column: column,
            field: column.field,
            value: value,
            cellHtml: value,
            rowCls: "",
            rowStyle: null,
            cellCls: column.cellCls || '',
            cellStyle: column.cellStyle || '',
            allowCellWrap: this.allowCellWrap,
            showHGridLines: this.showHGridLines,
            showVGridLines: this.showVGridLines,
            cellInnerCls: "",
            cellInnnerStyle: "",
            autoEscape: column.autoEscape
        };
        e.visible = this._isCellVisible(rowIndex, columnIndex);
        if (e.visible == true && this._mergedCellMaps) {
            var cell = this._mergedCellMaps[rowIndex + ":" + columnIndex];
            if (cell) {
                e.rowSpan = cell.rowSpan;
                e.colSpan = cell.colSpan;
            }
        }
        return e;
    },
    _OnDrawCell: function(record, column, rowIndex, columnIndex) {
        var e = this._createDrawCellEvent(record, column, rowIndex, columnIndex);
        var value = e.value;

	var dateFormat = column.dateFormat || (column.dataType == "date" ? this.defaultColumnDateFormat : "");

        if (dateFormat) {
            if (mini.isDate(e.value)) {

                e.cellHtml = mini.formatDate(value, dateFormat);
            } else e.cellHtml = value;
        }


        if (column.dataType == "float") {
            var value = parseFloat(e.value);
            if (!isNaN(value)) {
                decimalPlaces = parseInt(column.decimalPlaces);
                if (isNaN(decimalPlaces)) decimalPlaces = 2;

                e.cellHtml = value.toFixed(decimalPlaces);
            }
        }

        if (column.dataType == "currency") {
            e.cellHtml = mini.formatCurrency(e.value, column.currencyUnit);
        }

        if (column.displayField) {
            e.cellHtml = mini._getMap(column.displayField, record);
        }
        if (column.numberFormat) {
            var number = parseFloat(e.cellHtml);
            if (!isNaN(number)) {
                e.cellHtml = mini.formatNumber(number, column.numberFormat);
            }
        }
        if (e.autoEscape == true) {
            e.cellHtml = mini.htmlEncode(e.cellHtml);

        }

        var renderer = column.renderer;
        if (renderer) {

            var fn = typeof renderer == "function" ? renderer : mini._getFunctoin(renderer);

            if (fn) {
                e.cellHtml = fn.call(column, e);
            }
        }



        e.cellHtml = (e.cellHtml === 0 || e.cellHtml) ? String(e.cellHtml).trim() : "";

        if (typeof mini_OnDrawCell == 'function') {
            e.cellHtml = mini_OnDrawCell(e.cellHtml, e);
        }
        this.fire("drawcell", e);

        if (e.cellHtml && !!e.cellHtml.unshift && e.cellHtml.length == 0) {
            e.cellHtml = "&nbsp;";
        }
        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        return e;
    },
    _OnDrawSummaryCell: function(records, column, group) {
        var e = {
            group: group,
            result: this.getResultObject(),
            sender: this,
            data: records,
            column: column,
            field: column.field,
            value: "",
            cellHtml: "",
            cellCls: column.cellCls || '',
            cellStyle: column.cellStyle || '',
            allowCellWrap: this.allowCellWrap
        };

        if (column.summaryType) {
            var fn = mini.summaryTypes[column.summaryType];
            if (fn) {
                e.value = fn(records, column.field);
            }
        }

        var value = e.value;
        e.cellHtml = e.value;

        if (e.value && parseInt(e.value) != e.value && e.value.toFixed) {
            decimalPlaces = parseInt(column.decimalPlaces);
            if (isNaN(decimalPlaces)) decimalPlaces = 2;

            e.cellHtml = parseFloat(e.value.toFixed(decimalPlaces));
        }

        if (column.dateFormat) {
            if (mini.isDate(e.value)) {

                e.cellHtml = mini.formatDate(value, column.dateFormat);
            } else e.cellHtml = value;
        }
        if (e.cellHtml) {
            if (column.dataType == "currency") {
                e.cellHtml = mini.formatCurrency(e.cellHtml, column.currencyUnit);
            }
        }

        var renderer = column.summaryRenderer;
        if (renderer) {
            fn = typeof renderer == "function" ? renderer : window[renderer];
            if (fn) {
                e.cellHtml = fn.call(column, e);
            }
        }
        column.summaryValue = e.value;

        this.fire("drawsummarycell", e);

        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        return e;
    },

    getScrollTop: function() {
        return this._rowsViewEl.scrollTop;
    },
    setScrollTop: function(value) {
        this._rowsViewEl.scrollTop = value;
    },
    getScrollLeft: function() {
        return this._rowsViewEl.scrollLeft;
    },
    setScrollLeft: function(value) {

        this._rowsViewEl.scrollLeft = value;
    },
    _syncScroll: function() {
        var scrollLeft = this._rowsViewEl.scrollLeft;
        var filterViewEl = this._filterViewEl.firstChild;
        filterViewEl.style.left = -scrollLeft + "px";
        this._summaryViewEl.scrollLeft = scrollLeft;
        this._columnsViewEl.scrollLeft = scrollLeft;
    },
    __OnRowViewScroll: function(e) {
        this._syncScroll();
    },



    pagerType: "pager",
    getPagerType: function() {
        return this.pagerType;
    },
    setPagerType: function(value) {
        this.pagerType = value;

        var pager = mini.create({
            type: this.pagerType
        });
        if (pager) this._setBottomPager(pager);
    },

    _pagers: [],
    _createPagers: function() {


        this._pagers = [];
        var bottomPager = new mini.Pager();
        this._setBottomPager(bottomPager);
    },

    _setBottomPager: function(pager) {
        pager = mini.create(pager);
        if (!pager) return;
        if (this._bottomPager) {
            this.unbindPager(this._bottomPager);
            this._bottomPagerEl.removeChild(this._bottomPager.el);
        }
        this._bottomPager = pager;
        pager.render(this._bottomPagerEl);
        this.bindPager(pager);
    },

    bindPager: function(pager) {
        this._pagers.add(pager);
    },
    unbindPager: function(pager) {
        this._pagers.remove(pager);
    },
    alwaysShowEmptyText: false,
    setAlwaysShowEmptyText: function($) {
        this.alwaysShowEmptyText = $
    },
    getAlwaysShowEmptyText: function() {
        return this.alwaysShowEmptyText
    },
    setShowEmptyText: function(value) {
        this.showEmptyText = value;
        if (this.data.length == 0) this.deferUpdate();
    },
    getShowEmptyText: function() {
        return this.showEmptyText;
    },
    setEmptyText: function(value) {
        this.emptyText = value;
    },
    getEmptyText: function() {
        return this.emptyText;
    },
    setShowModified: function(value) {
        this.showModified = value;
    },
    getShowModified: function() {
        return this.showModified;
    },
    setShowNewRow: function(value) {
        this.showNewRow = value;
    },
    getShowNewRow: function() {
        return this.showNewRow;
    },
    setAllowCellWrap: function(value) {
        this.allowCellWrap = value;
    },
    getAllowCellWrap: function() {
        return this.allowCellWrap;
    },
    setAllowHeaderWrap: function(value) {
        this.allowHeaderWrap = value;
    },
    getAllowHeaderWrap: function() {
        return this.allowHeaderWrap;
    },
    setEnableGroupOrder: function(value) {
        this.enableGroupOrder = value;
    },
    getEnableGroupOrder: function() {
        return this.enableGroupOrder;
    },




    setShowHGridLines: function(value) {
        if (this.showHGridLines != value) {
            this.showHGridLines = value;
            this.deferUpdate();
        }
    },
    getShowHGridLines: function() {
        return this.showHGridLines;
    },
    setShowVGridLines: function(value) {
        if (this.showVGridLines != value) {
            this.showVGridLines = value;
            this.deferUpdate();
        }
    },
    getShowVGridLines: function() {
        return this.showVGridLines;
    },

    setShowSortIcon: function(value) {
        if (this.showSortIcon != value) {
            this.showSortIcon = value;
            this.deferUpdate();
        }
    },
    getShowSortIcon: function() {
        return this.showSortIcon;
    }


});

mini.copyTo(mini.GridView.prototype, mini._DataTableApplys);

mini.regClass(mini.GridView, "gridview");



mini.FrozenGridView = function() {
    mini.FrozenGridView.superclass.constructor.apply(this, arguments);
};
mini.extend(mini.FrozenGridView, mini.GridView, {


    isFixedRowHeight: function() {


        return this.fixedRowHeight;
    },
    setFrozenPosition: function (v){
        this.frozenPosition = v;
    },
    frozenPosition: 'left',
    isRightFrozen: function() {
        return this.frozenPosition == 'right';
    },








    _create: function() {
        mini.FrozenGridView.superclass._create.call(this);
        var el = this.el;

        var lockColumns = '<div class="mini-grid-columns-lock"></div>';
        var lockRows = '<div class="mini-grid-rows-lock"><div class="mini-grid-rows-content"></div></div>';

        this._columnsLockEl = mini.before(this._columnsViewEl, lockColumns);
        this._rowsLockEl = mini.before(this._rowsViewEl, lockRows);

        this._rowsLockContentEl = this._rowsLockEl.firstChild;


        var lockFilter = '<div class="mini-grid-filterRow-lock"></div>';
        this._filterLockEl = mini.before(this._filterViewEl, lockFilter);

        var lockSummary = '<div class="mini-grid-summaryRow-lock"></div>';
        this._summaryLockEl = mini.before(this._summaryViewEl, lockSummary);
    },
    _initEvents: function() {
        mini.FrozenGridView.superclass._initEvents.call(this);

        mini.on(this._rowsEl, "mousewheel", this.__OnMouseWheel, this);

    },
    _createHeaderText: function(column, viewIndex) {
        var header = column.header;
        if (typeof header == "function") header = header.call(this, column);
        if (mini.isNull(header) || header === "") header = "&nbsp;";
        if (this.isFrozen() && viewIndex == 2) {
            if (column.viewIndex1) {
                header = "&nbsp;";
            }
        }
        return header;
    },
    _createColumnColSpan: function(column, sb, viewIndex) {
        if (this.isFrozen()) {
            var colspan = column["colspan" + viewIndex];
            if (colspan) {
                sb[sb.length] = 'colspan="' + colspan + '" ';
            }
        } else {
            if (column.colspan) {
                sb[sb.length] = 'colspan="' + column.colspan + '" ';
            }
        }
    },
    doUpdateColumns: function() {
        var scrollLeft = this._columnsViewEl.scrollLeft;

        var frozenColumnsRow = this.isFrozen() ? this.getFrozenColumnsRow() : [];
        var unFrozenColumnsRow = this.isFrozen() ? this.getUnFrozenColumnsRow() : this.getVisibleColumnsRow();

        var frozenColumns = this.isFrozen() ? this.getFrozenColumns() : [];
        var unfrozenColumns = this.isFrozen() ? this.getUnFrozenColumns() : this.getVisibleColumns();


        var lockHtml = this._createColumnsHTML(frozenColumnsRow, 1, frozenColumns);
        var html = this._createColumnsHTML(unFrozenColumnsRow, 2, unfrozenColumns);
        var s = '<div class="mini-grid-topRightCell"></div>';

        lockHtml += s;
        html += s;

        this._columnsLockEl.innerHTML = lockHtml;
        this._columnsViewEl.innerHTML = html;

        var lockTable = this._columnsLockEl.firstChild;
        lockTable.style.width = "0px";


        this._columnsViewEl.scrollLeft = scrollLeft;
    },
    doUpdateRows: function() {

        var data = this.getVisibleRows();


        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();


        if (this.isGrouping()) {
            var lockHtml = this._createGroupingHTML(columns1, 1);
            var html = this._createGroupingHTML(columns2, 2);

            this._rowsLockContentEl.innerHTML = lockHtml;
            this._rowsViewContentEl.innerHTML = html;
        } else {

            var lockHtml = this._createRowsHTML(columns1, 1, this.isFrozen() ? data : []);
            var html = this._createRowsHTML(columns2, 2, data);







            this._rowsLockContentEl.innerHTML = lockHtml;
            this._rowsViewContentEl.innerHTML = html;
        }
        var lockTable = this._rowsLockContentEl.firstChild;
        lockTable.style.width = "0px";


    },
    _doUpdateFilterRow: function() {

        if (this._filterLockEl.firstChild) {
            this._filterLockEl.removeChild(this._filterLockEl.firstChild);
        }
        if (this._filterViewEl.firstChild) {
            this._filterViewEl.removeChild(this._filterViewEl.firstChild);
        }

        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();

        var html1 = this._createFilterRowHTML(columns1, 1);
        var html2 = this._createFilterRowHTML(columns2, 2);

        this._filterLockEl.innerHTML = html1;
        this._filterViewEl.innerHTML = html2;

        this._doRenderFilters();
    },
    _doUpdateSummaryRow: function() {

        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();

        var html1 = this._createSummaryRowHTML(columns1, 1);
        var html2 = this._createSummaryRowHTML(columns2, 2);

        this._summaryLockEl.innerHTML = html1;
        this._summaryViewEl.innerHTML = html2;
    },
    _syncRowsHeightTimer: null,


    syncRowDetail: function(row) {
        var row1 = this._getRowDetailEl(row, 1);
        var row2 = this._getRowDetailEl(row, 2);
        if (row1 && row2) this._doSyncRowHeight(row1, row2);
    },
    _doSyncRowHeight: function(row1, row2) {









        row1.style.height = row2.style.height = "auto";

        var td1 = row1.cells[0],
            td2 = row2.cells[0];


        var h1 = td1.offsetHeight;
        var h2 = td2.offsetHeight;

        if (h1 < h2) h1 = h2;

        row1.style.height = row2.style.height = h1 + "px";



    },
    _syncRowsHeight: function() {
        var A = this;

        function _($, _) {
            $.style.height = _.style.height = "auto"
        }

        function B(_, D) {
            var $ = _.cells[0],
                A = D.cells[0],
                B = $.offsetHeight,
                C = A.offsetHeight;
            if (B < C) B = C;
            return B
        }

        function $($, _, A) {
            $.style.height = _.style.height = A + "px"
        }

        function C() {
            var C = new Date(),
                E = document,
                F = A.getDataView(),
                G = {};
            for (var H = 0, J = F.length; H < J; H++) {
                var I = F[H],
                    D = A._getRowEl(I, 1),
                    K = A._getRowEl(I, 2);
                if (!D || !K) continue;
                _(D, K);
                G[H] = {
                    row1: D,
                    row2: K
                }
            }
            for (H = 0, J = F.length; H < J; H++) {
                var I = F[H],
                    L = G[H];
                if (!L) continue;
                L.height = B(L.row1, L.row2)
            }
            for (H = 0, J = F.length; H < J; H++) {
                I = F[H], L = G[H];
                if (!L) continue;
                $(L.row1, L.row2, L.height)
            }
            A._syncRowsHeightTimer = null
        }
        if (this.isFrozen() && this.isFixedRowHeight() == false) {
            if (this._syncRowsHeightTimer) clearTimeout(this._syncRowsHeightTimer);
            this._syncRowsHeightTimer = setTimeout(C, 2)
        }
    },
    // _syncRowsHeight: function() {

    //     var me = this;

    //     function doSync() {

    //         var d = document;
    //         var data = me.getDataView();
    //         for (var i = 0, l = data.length; i < l; i++) {
    //             var row = data[i];
    //             var row1 = me._getRowEl(row, 1);
    //             var row2 = me._getRowEl(row, 2);
    //             if (!row1 || !row2) continue;

    //             me._doSyncRowHeight(row1, row2);

    //         }
    //         me._syncRowsHeightTimer = null;
    //     }

    //     if (this.isFrozen() && this.isFixedRowHeight() == false) {
    //         if (this._syncRowsHeightTimer) clearTimeout(this._syncRowsHeightTimer);
    //         this._syncRowsHeightTimer = setTimeout(doSync, 2);
    //     }
    // },
    _syncColumnHeight: function() {

        var lock = this._columnsLockEl,
            view = this._columnsViewEl;
        lock.style.height = view.style.height = 'auto';
        if (this.isFrozen()) {
            var h = lock.offsetHeight;
            var h2 = view.offsetHeight;
            h = h > h2 ? h : h2;
            lock.style.height = view.style.height = h + 'px';
        }


        var lock = this._summaryLockEl,
            view = this._summaryViewEl;
        lock.style.height = view.style.height = 'auto';
        if (this.isFrozen()) {
            var h = lock.offsetHeight;
            var h2 = view.offsetHeight;
            h = h > h2 ? h : h2;
            lock.style.height = view.style.height = h + 'px';
        }
    },

    _layoutColumns: function() {

        function getHeight(el) {
            return el.offsetHeight;
        }

        function getTds(tr) {
            var tds = [];
            for (var i = 0, l = tr.cells.length; i < l; i++) {
                var td = tr.cells[i];
                if (td.style.width == "0px") continue;
                tds.push(td);
            }
            return tds;
        }

        function clearHeight(tr) {
            var tds = getTds(tr);
            for (var i = 0, l = tds.length; i < l; i++) {
                var td = tds[i];
                td.style.height = "auto";
            }
        }

        function clearHeights() {
            table1.style.height = table1.style.height = "auto";
            for (var i = 0, l = table1.rows.length; i < l; i++) {
                var row1 = table1.rows[i];
                var row2 = table2.rows[i];
                clearHeight(row1);
                clearHeight(row2);
            }
        }

        function getRowHeight(tr, nospan) {
            var h = 0;
            var tds = getTds(tr);
            for (var i = 0, l = tds.length; i < l; i++) {
                var td = tds[i];
                var rowspan = parseInt(td.rowSpan) > 1;
                if (rowspan && nospan) continue;

                var th = td.offsetHeight;
                if (th > h) h = th;

            }
            return h;
        }


        if (!this.isFrozen()) return;
        var table1 = this._columnsLockEl.firstChild,
            table2 = this._columnsViewEl.firstChild;



        function syncNoRowSpan(tr, tr2) {
            var h = getRowHeight(tr2, true);

            var tds = getTds(tr);
            for (var i = 0, l = tds.length; i < l; i++) {
                var td = tds[i];
                var rowspan = parseInt(td.rowSpan) > 1;

                if (rowspan) {

                } else {
                    mini.setHeight(td, h);
                }
            }
        }

        function syncRowSpan(tr, tr2) {
            var h = getRowHeight(tr2);

            var tds = getTds(tr);
            for (var i = 0, l = tds.length; i < l; i++) {
                var td = tds[i];
                var rowspan = parseInt(td.rowSpan) > 1;

                if (rowspan) {
                    mini.setHeight(td, h);
                } else {

                }
            }
        }

        clearHeights();



        for (var i = 0, l = table1.rows.length; i < l; i++) {
            var row1 = table1.rows[i];
            var row2 = table2.rows[i];
            var h1 = getRowHeight(row1),
                h2 = getRowHeight(row2);

            if (h1 == h2) {


            } else if (h1 < h2) {
                syncNoRowSpan(row1, row2);
                syncRowSpan(row1, row2);

            } else if (h1 > h2) {
                syncNoRowSpan(row2, row1);
                syncRowSpan(row2, row1);
            }
        }


        var h1 = getHeight(table1),
            h2 = getHeight(table2);
        if (h1 < h2) {
            mini.setHeight(table1, h2);
        } else if (h1 > h2) {
            mini.setHeight(table2, h1);
        }
    },
    doLayout: function() {
        if (this.canLayout() == false) return;
        this._doLayoutScroll = false;



        var autoHeight = this.isAutoHeight();
        var isFrozen = this.isFrozen();
        var viewportWidth = this.getViewportWidth(true);
        var lockedWidth = this.getLockedWidth();
        var viewWidth = viewportWidth - lockedWidth;

        this._doEmptyText();



        var marginStyle = this.isRightFrozen() ? 'marginRight' : 'marginLeft';
        var leftStyle = this.isRightFrozen() ? 'right' : 'left';





        if (isFrozen) {

            if(this.isRightFrozen()) {
                this._filterViewEl.style['marginRight'] = lockedWidth + "px";
                this._summaryViewEl.style['marginRight'] = lockedWidth + "px";
                this._columnsViewEl.style['marginRight'] = lockedWidth + "px";
                this._rowsViewEl.style['marginRight'] = lockedWidth + "px";
                mini.addClass(this._filterViewEl, 'lock-right');
                mini.addClass(this._summaryViewEl, 'lock-right');
                mini.addClass(this._columnsViewEl, 'lock-right');
                mini.addClass(this._rowsViewEl, 'lock-right');
            } else {
                this._filterViewEl.style['marginLeft'] = lockedWidth + "px";
                this._summaryViewEl.style['marginLeft'] = lockedWidth + "px";
                this._columnsViewEl.style['marginLeft'] = lockedWidth + "px";
                this._rowsViewEl.style['marginLeft'] = lockedWidth + "px";
            }

            if (mini.isSafari || mini.isChrome || mini.isIE6) {

                this._filterViewEl.style["width"] = viewWidth + "px";
                this._summaryViewEl.style["width"] = viewWidth + "px";
                this._columnsViewEl.style["width"] = viewWidth + "px";
            } else {
                this._filterViewEl.style["width"] = "auto";
                this._summaryViewEl.style["width"] = "auto";
                this._columnsViewEl.style["width"] = "auto";
            }

            if (mini.isSafari || mini.isChrome || mini.isIE6) this._rowsViewEl.style["width"] = viewWidth + "px";

            mini.setWidth(this._filterLockEl, lockedWidth);
            mini.setWidth(this._summaryLockEl, lockedWidth);
            mini.setWidth(this._columnsLockEl, lockedWidth);
            mini.setWidth(this._rowsLockEl, lockedWidth);


            if(this.isRightFrozen()) {
                this._filterLockEl.style['right'] = "0px";
                this._summaryLockEl.style['right'] = "0px";
                this._columnsLockEl.style['right'] = "0px";
                this._rowsLockEl.style['right'] = "0px";
                this._filterLockEl.style['left'] = "auto";
                this._summaryLockEl.style['left'] = "auto";
                this._columnsLockEl.style['left'] = "auto";
                this._rowsLockEl.style['left'] = "auto";
                mini.addClass(this._filterLockEl, 'lock-right');
                mini.addClass(this._summaryLockEl, 'lock-right');
                mini.addClass(this._columnsLockEl, 'lock-right');
                mini.addClass(this._rowsLockEl, 'lock-right');
            } else {
                this._filterLockEl.style['left'] = "0px";
                this._summaryLockEl.style['left'] = "0px";
                this._columnsLockEl.style['left'] = "0px";
                this._rowsLockEl.style['left'] = "0px";
                this._filterLockEl.style['right'] = "auto";
                this._summaryLockEl.style['right'] = "auto";
                this._columnsLockEl.style['right'] = "auto";
                this._rowsLockEl.style['right'] = "auto";

            }
        } else {
            this._doClearFrozen();
        }


        this._layoutColumns();

        this._syncColumnHeight();


        mini.FrozenGridView.superclass.doLayout.call(this);

        if (isFrozen) {
            if (mini.isChrome || mini.isIE6) {

                this._layoutColumns();

                this._syncColumnHeight();
                mini.FrozenGridView.superclass.doLayout.call(this);
            }
        }









        if (autoHeight) {
            this._rowsLockEl.style.height = "auto";
        } else {
            this._rowsLockEl.style.height = "100%";
        }

        this._syncRowsHeight();






    },
    _doEmptyText: function() {







    },

    _getRowEl: function(row, index) {
        row = this.getRecord(row);
        var id = this._createRowId(row, index);
        var el = document.getElementById(id);
        return el;
    },


    _doClearFrozen: function() {

        var marginStyle = this.isRightFrozen() ? 'marginRight' : 'marginLeft';
        var leftStyle = this.isRightFrozen() ? 'right' : 'left';

        this._filterLockEl.style.left = "-10px";
        this._summaryLockEl.style.left = "-10px";
        this._columnsLockEl.style.left = "-10px";
        this._rowsLockEl.style.left = "-10px";

        this._filterLockEl.style["width"] = "0px";
        this._summaryLockEl.style["width"] = "0px";
        this._columnsLockEl.style["width"] = "0px";
        this._rowsLockEl.style["width"] = "0px";

        this._filterViewEl.style["marginLeft"] = "0px";
        this._summaryViewEl.style["marginLeft"] = "0px";
        this._columnsViewEl.style["marginLeft"] = "0px";
        this._rowsViewEl.style["marginLeft"] = "0px";

        this._filterViewEl.style["width"] = "auto";
        this._summaryViewEl.style["width"] = "auto";
        this._columnsViewEl.style["width"] = "auto";
        this._rowsViewEl.style["width"] = "auto";

        if (mini.isSafari || mini.isChrome || mini.isIE6) {
            this._filterViewEl.style["width"] = "100%";
            this._summaryViewEl.style["width"] = "100%";
            this._columnsViewEl.style["width"] = "100%";
            this._rowsViewEl.style["width"] = "100%";
        }




    },
    frozenColumns: function(startColumn, finishColumn) {
        this.frozen(startColumn, finishColumn);
    },
    unFrozenColumns: function() {
        this.unFrozen();
    },
    frozen: function(startColumn, finishColumn) {
        this._doClearFrozen();
        this._columnModel.frozen(startColumn, finishColumn);
    },
    unFrozen: function() {
        this._doClearFrozen();
        this._columnModel.unFrozen();
    },
    setFrozenStartColumn: function(value) {
        this._columnModel.setFrozenStartColumn(value);
    },
    setFrozenEndColumn: function(value) {
        return this._columnModel.setFrozenEndColumn(value);
    },
    getFrozenStartColumn: function(value) {
        return this._columnModel._frozenStartColumn;
    },
    getFrozenEndColumn: function(value) {
        return this._columnModel._frozenEndColumn;
    },
    getFrozenColumnsRow: function() {
        return this._columnModel.getFrozenColumnsRow();
    },
    getUnFrozenColumnsRow: function() {
        return this._columnModel.getUnFrozenColumnsRow();
    },

    getLockedWidth: function() {

        if (!this.isFrozen()) return 0;

        var table = this._rowsLockContentEl.firstChild.firstChild;

        var width = table ? table.offsetWidth : 0;
        return width;
    },

    _canDeferSyncScroll: function() {
        return this.isFrozen();
    },
    _syncScroll: function() {
        var scrollLeft = this._rowsViewEl.scrollLeft;
        var filterViewEl = this._filterViewEl.firstChild;
        filterViewEl.style.left = -scrollLeft + "px";
        this._summaryViewEl.scrollLeft = scrollLeft;
        this._columnsViewEl.scrollLeft = scrollLeft;

        var me = this;
        var scrollTop = me._rowsViewEl.scrollTop;
        me._rowsLockEl.scrollTop = scrollTop;
        if (this._canDeferSyncScroll()) {

            setTimeout(function() {


                me._rowsViewEl.scrollTop = me._rowsLockEl.scrollTop;

            }, 50);
        }
    },









    __OnMouseWheel: function(e) {
        var scrollTop = this.getScrollTop() - e.wheelDelta;
        var top = this.getScrollTop();
        this.setScrollTop(scrollTop);
        if (top != this.getScrollTop()) {
            e.preventDefault();
        }
    }


});
mini.regClass(mini.FrozenGridView, "FrozenGridView");




mini.ScrollGridView = function() {
    mini.ScrollGridView.superclass.constructor.apply(this, arguments);
};
mini.extend(mini.ScrollGridView, mini.FrozenGridView, {

    virtualScroll: true,
    virtualRows: 25,

    defaultRowHeight: 25,
    virtualColumns: false,

    _canDeferSyncScroll: function() {
        return this.isFrozen() && !this.isVirtualScroll();
    },
    setVirtualScroll: function(value) {
        this.virtualScroll = value;
        this.doUpdate();
    },
    getVirtualScroll: function(value) {
        return this.virtualScroll;
    },
    isFitColumns: function() {
        return this.fitColumns && !this.virtualColumns
    },
    setVirtualColumns: function($) {
        this.virtualColumns = $;
        this.doUpdate()
    },
    getVirtualColumns: function($) {
        return this.virtualColumns
    },
    isFixedRowHeight: function() {


        return this.fixedRowHeight || this.isVirtualScroll();
    },
    isVirtualScroll: function() {
        if (this.virtualScroll) {
            return this.isAutoHeight() == false && this.isGrouping() == false;
        }
        return false;
    },
    _getScrollView: function() {
        var data = this.getVisibleRows();
        return data;
    },
    _getScrollViewCount: function() {
        return this._getScrollView().length;
    },
    _getScrollRowHeight: function(index, row) {
        if (row && row._height) {
            var h = parseInt(row._height);
            if (!isNaN(h)) return h;
        }
        return this.defaultRowHeight;







    },
    _getRangeHeight: function(start, end) {
	return (end - start) * this.defaultRowHeight
    },
    _getIndexByScrollTop: function(scrollTop) {
	var $ = parseInt(scrollTop / this.defaultRowHeight);
        return $
    },
    __getScrollViewRange: function(start, end) {
        var data = this._getScrollView();
        return data.getRange(start, end);
    },
    _getColumnByScrollLeft: function(E) {
        var B = 0,
            _ = this.getUnFrozenColumns(),
            C = _.length;
        for (var D = 0, F = C; D < F; D++) {
            var $ = _[D],
                A = $.pxWidth;
            if (!isNaN(A)) B += A;
            if (B >= E) return D
        }
        return C
    },
    _getRangeWidth: function(B, E) {
        var C = 0,
            _ = this.getUnFrozenColumns();
        for (var D = B; D < E; D++) {
            var $ = _[D];
            if ($) {
                var A = $.pxWidth;
                if (!isNaN(A)) C += A
            }
        }
        return C
    },
    _getColumnAllWidth: function() {
        var B = 0,
            _ = this.getUnFrozenColumns(),
            C = _.length;
        for (var D = 0, E = C; D < E; D++) {
            var $ = _[D],
                A = $.pxWidth;
            if (!isNaN(A)) B += A
        }
        return B
    },

    _getViewRegion: function() {


        var data = this._getScrollView();

        if (this.isVirtualScroll() == false) {
            var region = {
                top: 0,
                bottom: 0,
                rows: data,
                start: 0,
                end: 0
            };
            return region;
        }

        var rowHeight = this.defaultRowHeight;

        var nowRegion = this._getViewNowRegion();

        var scrollTop = this.getScrollTop();
        var bodyHeight = this._vscrollEl.offsetHeight;

        var count = this._getScrollViewCount();

        var start = nowRegion.start,
            end = nowRegion.end;

        for (var i = 0, l = count; i < l; i += this.virtualRows) {
            var i2 = i + this.virtualRows;
            if (i <= start && start < i2) {
                start = i;
            }
            if (i < end && end <= i2) {
                end = i2;
            }
        }
        if (end > count) end = count;
        if (end == 0) end = this.virtualRows;


        var top = this._getRangeHeight(0, start);
        var bottom = this._getRangeHeight(end, this._getScrollViewCount());
        var data = this.__getScrollViewRange(start, end);

        var region = {
            top: top,
            bottom: bottom,
            rows: data,
            start: start,
            end: end,
            viewStart: start,
            viewEnd: end


        };


        region.viewTop = this._getRangeHeight(0, region.viewStart);
        region.viewBottom = this._getRangeHeight(region.viewEnd, this._getScrollViewCount());
        if (this.virtualColumns) {
            var K = this.getScrollLeft(),
                M = this._rowsViewEl.offsetWidth;
            region.startColumn = this._getColumnByScrollLeft(K);
            region.endColumn = this._getColumnByScrollLeft(K + M);
            region.columns = this.getUnFrozenColumns().slice(region.startColumn, region.endColumn + 1);
            region.right = this._getColumnAllWidth();
            region.viewLeft = this._getRangeWidth(0, region.startColumn)
        } else region.columns = this.getUnFrozenColumns();

        return region;
    },
    _getViewNowRegion: function() {

        var rowHeight = this.defaultRowHeight;
        var scrollTop = this.getScrollTop();

        var bodyHeight = this._rowsViewEl.offsetHeight;


        var startRow = this._getIndexByScrollTop(scrollTop);
        var endRow = this._getIndexByScrollTop(scrollTop + bodyHeight + 30);


        var count = this._getScrollViewCount();
        if (endRow > count) endRow = count;

        var region = {
            start: startRow,
            end: endRow
        };
        return region;
    },
    _canVirtualUpdate: function() {
        if (!this._viewRegion) return true;
        var region = this._getViewNowRegion();

        if (this._viewRegion.start <= region.start && region.end <= this._viewRegion.end) return false;
        return true;
    },







    __OnColumnsChanged: function(e) {
        var that = this;


        this.columns = this._columnModel.columns;
        this._doUpdateFilterRow();
        this._doUpdateSummaryRow();
        if (this.getVisibleRows().length == 0) {

            this.doUpdate();
        } else {
            this.deferUpdate();
        }
        if (this.isVirtualScroll()) {
            this.__OnVScroll();



        }
        this.fire("columnschanged");
    },
    doLayout: function() {
        if (this.canLayout() == false) return;

        mini.ScrollGridView.superclass.doLayout.call(this);
        this._layoutScroll();


        if (mini.isNumber(this._scrollTop) && this._vscrollEl.scrollTop != this._scrollTop) {

            this._vscrollEl.scrollTop = this._scrollTop;
        }

    },
    _createRowsHTML: function(columns, viewIndex, data, top, bottom, rowIndex) {
        var isVirtualScroll = this.isVirtualScroll();
        if (!isVirtualScroll) {
            return mini.ScrollGridView.superclass._createRowsHTML.apply(this, arguments);
        }

        var region = isVirtualScroll ? this._getViewRegion() : null;

        var sb = ['<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0">'];
        sb.push(this._createTopRowHTML(columns));
        if (this.isVirtualScroll()) {
            var style = top == 0 ? "display:none;" : "";
            sb.push('<tr class="mini-grid-virtualscroll-top" style="padding:0;border:0;' + style + '"><td colspan="' + columns.length + '" style="height:' + top + 'px;padding:0;border:0;' + style + '"></td></tr>');
        }
        if (viewIndex == 1 && this.isFrozen() == false) {


        } else {
            for (var j = 0, k = data.length; j < k; j++) {

                var record = data[j];

                this._createRowHTML(record, rowIndex, columns, viewIndex, sb);
                rowIndex++;
            }
        }
        if (this.isVirtualScroll()) {
            sb.push('<tr class="mini-grid-virtualscroll-bottom" style="padding:0;border:0;"><td colspan="' + columns.length + '" style="height:' + bottom + 'px;padding:0;border:0;"></td></tr>');
        }
        sb.push('</table>');
        return sb.join('');
    },

    doUpdateRows: function() {

        if (this.isVirtualScroll() == false) {
            mini.ScrollGridView.superclass.doUpdateRows.call(this);
            return;
        }

        var region = this._getViewRegion();
        this._viewRegion = region;

        var columns1 = this.getFrozenColumns();
        var columns2 = region.columns;

        var rowIndex = region.viewStart;
        var rowIndexTop = region.start;
        var rowIndexBottom = region.viewEnd;
        if (this._scrollPaging) {
            var index = this.getPageIndex() * this.getPageSize();
            rowIndex -= index;
            rowIndexTop -= index;
            rowIndexBottom -= index;
        }
        var sss = new Date();
        var lockHtml = this._createRowsHTML(columns1, 1, region.rows, region.viewTop, region.viewBottom, rowIndex);
        var html = this._createRowsHTML(columns2, 2, region.rows, region.viewTop, region.viewBottom, rowIndex);



        this._rowsLockContentEl.innerHTML = lockHtml;
        this._rowsViewContentEl.innerHTML = html;
	var H = this._rowsViewContentEl.firstChild;
        if (this.virtualColumns) {
            html = "<div style=\"position:absolute;top:0px;left:" + region.right + "px;width:1px;height:1px;overflow:hidden;\"></div>";
            jQuery(html).appendTo(this._rowsViewContentEl);
            H.style.width = "0px";
            H.style.position = "absolute";
            H.style.top = "0px";
            H.style.left = region.viewLeft + "px"
        }
        var scrollTop = this.getScrollTop();
        if (this._rowsViewEl.scrollTop != scrollTop) {
            this._rowsViewEl.scrollTop = scrollTop;
        }
    },


    _create: function() {
        mini.ScrollGridView.superclass._create.call(this);

        this._vscrollEl = mini.append(this._rowsEl, '<div class="mini-grid-vscroll"><div class="mini-grid-vscroll-content"></div></div>');
        this._vscrollContentEl = this._vscrollEl.firstChild;
    },
    _initEvents: function() {
        mini.ScrollGridView.superclass._initEvents.call(this);

        var me = this;
        mini.on(this._vscrollEl, "scroll", this.__OnVScroll, this);
        mini._onScrollDownUp(this._vscrollEl, function(e) {

            me._VScrollMouseDown = true;
        }, function(e) {

            me._VScrollMouseDown = false;
        });
    },

    _layoutScroll: function() {

        var isVirtualScroll = this.isVirtualScroll();

        if (isVirtualScroll) {

            var scrollHeight = this.getScrollHeight();

            var outHeight = scrollHeight > this._rowsViewEl.offsetHeight;

            if (isVirtualScroll && outHeight) {
                this._vscrollEl.style.display = 'block';
                this._vscrollContentEl.style.height = scrollHeight + "px";
            } else {
                this._vscrollEl.style.display = 'none';
            }

            if (this._rowsViewEl.scrollWidth > this._rowsViewEl.clientWidth + 1) {
                var h = this.getBodyHeight(true) - 18;
                if (h < 0) h = 0;
                this._vscrollEl.style.height = h + 'px';
            } else {
                this._vscrollEl.style.height = '100%';
            }



        } else {

            this._vscrollEl.style.display = "none";
        }

    },

    getScrollHeight: function() {
        var data = this.getVisibleRows();
        return this._getRangeHeight(0, data.length);
    },
    setScrollTop: function(value) {
        if (this.isVirtualScroll()) {
            this._vscrollEl.scrollTop = value;
        } else {
            this._rowsViewEl.scrollTop = value;
        }
    },
    getScrollTop: function() {
        if (this.isVirtualScroll()) {
            return this._vscrollEl.scrollTop;
        } else {
            return this._rowsViewEl.scrollTop;
        }
    },
    __OnVScroll: function(e) {




        var isVirtualScroll = this.isVirtualScroll();
        if (isVirtualScroll) {

            this._scrollTop = this._vscrollEl.scrollTop;

            var me = this;
            setTimeout(function() {
                me._rowsViewEl.scrollTop = me._scrollTop;
                me.__scrollTimer = null;
            }, 8);

            if (this._scrollTopTimer) {
                clearTimeout(this._scrollTopTimer);
            }
            this._scrollTopTimer = setTimeout(function() {
                me._scrollTopTimer = null;

                me._tryUpdateScroll();

                me._rowsViewEl.scrollTop = me._scrollTop;

            }, 80);
        }
    },

    wheelIncrement: 0,

    setWheelIncrement: function(val) {
        this.wheelIncrement = val;
    },
    getWheelIncrement: function() {
        return this.wheelIncrement;
    },

    __OnMouseWheel: function(e) {
        var ev = e.wheelDelta ? e : e.originalEvent;
        var detail = ev.wheelDelta || -ev.detail * 40;


        if (detail > 0) {
            detail = detail + this.wheelIncrement;
        } else {
            detail = detail - this.wheelIncrement;
        }


        var scrollTop = this.getScrollTop() - detail;

        var top = this.getScrollTop();
        this.setScrollTop(scrollTop);
        if (top != this.getScrollTop() || this.isVirtualScroll()) {
            e.preventDefault();
        }

    },

    _tryUpdateScroll: function() {

        var doUpdate = this._canVirtualUpdate();
        if (doUpdate) {
            if (this._scrollPaging) {
                var me = this;

                this.reload(null, null, function(e) {

                });
            } else {

                var sss = new Date();

                var scrollLeft = this._rowsViewEl.scrollLeft;

                this._doRemoveRowContent();



                this.doUpdateRows();
		this.deferLayout(50);




                this._rowsViewEl.scrollLeft = scrollLeft;
            }
        } else {

        }
    },
    __OnRowViewScroll: function($) {
        this._syncScroll();
        if (this.virtualColumns) this.doVirtualColumns()
    },
    doVirtualColumns: function() {
        var $ = this;
        if ($._virtualColumnTimer) {
            clearTimeout($._virtualColumnTimer);
            $._virtualColumnTimer = null
        }
        $._virtualColumnTimer = setTimeout(function() {
            $._virtualColumnTimer = null;
            $._doRemoveRowContent();
            $.doUpdateRows();
            $.deferLayout(50)
        }, 500)
    }


});
mini.regClass(mini.ScrollGridView, "ScrollGridView");

mini._onScrollDownUp = function(el, mousedown, mouseup) {
	function onmousedown(e) {
        if (mini.isFirefox) {
            mini.on(document, 'mouseup', onmouseup);
        } else {
            mini.on(document, 'mousemove', onmousemove);
        }
        mousedown(e);
    }

    function onmousemove(e) {

        mini.un(document, 'mousemove', onmousemove);
        mouseup(e);
    }

    function onmouseup(e) {

        mini.un(document, 'mouseup', onmouseup);
        mouseup(e);
    }

    mini.on(el, 'mousedown', onmousedown);
}





mini._Grid_Select = function(grid) {

    this.owner = grid, el = grid.el;

    grid.on("rowmousemove", this.__OnRowMouseMove, this);
    mini.on(grid._viewportEl, "mouseout", this.__OnMouseOut, this);
    mini.on(grid._viewportEl, "mousewheel", this.__OnMouseWheel, this);
    mini_on(document, "mousewheel", this.__OnMouseWheel, this);
    grid.on("cellmousedown", this.__OnCellMouseDown, this);


    grid.on("cellmouseup", this.__OnGridCellClick, this);
    grid.on("celldblclick", this.__OnGridCellClick, this);

    mini.on(grid.el, "keydown", this.__OnGridKeyDown, this);



    jQuery(grid._columnsEl).on("mouseenter", ".mini-grid-headerCell", function(e) {
        jQuery(e.currentTarget).addClass("mini-grid-header-over");
    });
    jQuery(grid._columnsEl).on("mouseleave", ".mini-grid-headerCell", function(e) {
        jQuery(e.currentTarget).removeClass("mini-grid-header-over");
    });





}
mini._Grid_Select.prototype = {
    __OnGridKeyDown: function(e) {

        var grid = this.owner;

        var p = mini.findParent(e.target, 'mini-grid-detailRow');
        var inGrid = p ? mini.isAncestor(grid.el, p) : false;

        if (mini.isAncestor(grid._filterEl, e.target) ||
            mini.isAncestor(grid._summaryEl, e.target) ||
            mini.isAncestor(grid._toolbarEl, e.target) ||
            mini.isAncestor(grid._footerEl, e.target) ||
            (mini.findParent(e.target, 'mini-grid-detailRow') && inGrid) ||
            mini.findParent(e.target, 'mini-grid-rowEdit') ||
            mini.findParent(e.target, 'mini-tree-editinput')
        ) {
            return;
        }

        var currentCell = grid.getCurrentCell();

        if (e.shiftKey || e.ctrlKey || e.altKey) {
            return;
        }

        if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40) {
            e.preventDefault();
        }
        var columns = grid.getVisibleColumns();


        function getAt(index) {
            return grid.getVisibleRows()[index];
        }

        function indexOf(row) {
            return grid.getVisibleRows().indexOf(row);
        }

        function getCount() {
            return grid.getVisibleRows().length;
        }

        var column = currentCell ? currentCell[1] : null,
            record = currentCell ? currentCell[0] : null;
        if (!currentCell) record = grid.getCurrent();
        var columnIndex = columns.indexOf(column);

        var rowIndex = indexOf(record);
        var count = getCount();

        switch (e.keyCode) {
            case 9:
                if (grid.allowCellEdit && grid.editOnTabKey) {
                    e.preventDefault();
                    grid._beginEditNextCell(e.shiftKey == false, true);
                    return;
                }








                break;
            case 27:

                break;
            case 13:
                if (grid.allowCellEdit && grid.editNextOnEnterKey) {
                    if (column) {
                        if (grid.isEditingCell(currentCell) || !column.editor) {
                            grid._beginEditNextCell(e.shiftKey == false);
                            return;
                        }
                    }
                }
                if (grid.allowCellEdit && currentCell && !column.readOnly && !grid.isReadOnly()) {
                    grid.beginEditCell();
                }
                break;
            case 37:
                if (column) {
                    if (columnIndex > 0) {
                        columnIndex -= 1;
                    }
                } else {
                    columnIndex = 0;
                }
                break;
            case 38:
                if (record) {
                    if (rowIndex > 0) rowIndex -= 1;
                } else {
                    rowIndex = 0;
                }
                if (rowIndex != 0 && grid.isVirtualScroll()) {
                    if (grid._viewRegion.start > rowIndex) {
                        return;


                    }
                }
                break;
            case 39:
                if (column) {
                    if (columnIndex < columns.length - 1) {
                        columnIndex += 1;
                    }
                } else {
                    columnIndex = 0;
                }
                break;
            case 40:
                if (record) {
                    if (rowIndex < count - 1) rowIndex += 1;
                } else {
                    rowIndex = 0;
                }
                if (grid.isVirtualScroll()) {
                    if (grid._viewRegion.end < rowIndex) {
                        return;
                        grid.setScrollTop(grid.getScrollTop() + grid.defaultRowHeight);





                    }
                }
                break;
            default:
                return;
                break;
        }

        column = columns[columnIndex];

        record = getAt(rowIndex);

        if (column && record && grid.allowCellSelect) {
            var currentCell = [record, column];
            grid.setCurrentCell(currentCell);
            grid.scrollIntoView(record, column, false);
        }


        if (!grid.onlyCheckSelection) {
            if (e.keyCode != 37 && e.keyCode != 39) {

                if (record && grid.allowRowSelect) {
                    grid.deselectAll();
                    grid.setCurrent(record);
                    if (record) {
                        grid.scrollIntoView(record, null, false);
                    }
                }
            }
        }
    },
    __OnMouseWheel: function(e) {
        var grid = this.owner;
        if (grid.allowCellEdit) {
            grid.commitEdit();
        }
    },
    __OnGridCellClick: function(e) {
        var grid = this.owner,
            type = e.type;
        var sss = new Date();

        if (type == "cellmouseup") type = "cellclick";

        if (grid.allowCellEdit == false) return;
        if (grid.cellEditAction != type) return;

        var record = e.record,
            column = e.column;

        if (!column.readOnly && !grid.isReadOnly()) {
            if (e.htmlEvent.shiftKey || e.htmlEvent.ctrlKey) {} else {


                grid.beginEditCell();


            }
        }


    },
    __OnCellMouseDown: function(e) {

        var me = this;
        if (!me.owner.selectOnRightClick)
            if (e.htmlEvent.which == 3) return;
        setTimeout(function() {
            me.__doSelect(e);
        }, 1);
    },
    __OnRowMouseMove: function(e) {
        var grid = this.owner;
        var record = e.record;

        if (!grid.enabled || grid.enableHotTrack == false) return;

        grid.focusRow(record);
    },
    __OnMouseOut: function(e) {
        if (this.owner.allowHotTrackOut) {
            this.owner.focusRow(null);
        }
    },
    __doSelect: function(e) {
        var record = e.record,
            column = e.column;
        var grid = this.owner;
        if (record.enabled === false) return;



        if (grid.allowCellSelect) {
            var cell = [record, column];
            grid.setCurrentCell(cell);
        }

        if (grid.onlyCheckSelection && !column._multiRowSelect) return;







        if (grid.allowRowSelect) {
            var ex = {
                record: record,
                selected: record,
                cancel: false
            };
            if (record) {
                grid.fire("beforerowselect", ex);
                grid.fire("beforeselect", ex);
            }
            if (ex.cancel) return;

            if (grid.getMultiSelect()) {

                grid.el.onselectstart = function() {};

                if (e.htmlEvent.shiftKey) {
                    grid.el.onselectstart = function() {
                        return false
                    };
                    try {
                        e.htmlEvent.preventDefault();
                    } catch (ex) {}

                    var current = grid.getCurrent();
                    if (current) {

                        grid.deselectAll();
                        grid.selectRange(current, record);
                        grid.setCurrent(current);
                    } else {
                        grid.select(record);
                        grid.setCurrent(record);
                    }

                } else {

                    grid.el.onselectstart = function() {};
                    if (e.htmlEvent.ctrlKey) {
                        grid.el.onselectstart = function() {
                            return false
                        };
                        try {
                            e.htmlEvent.preventDefault();
                        } catch (ex) {}
                    }

                    if (e.column._multiRowSelect === true || e.htmlEvent.ctrlKey || grid.allowUnselect) {
                        if (grid.isSelected(record)) {
                            grid.deselect(record);
                        } else {
                            grid.select(record);
                            grid.setCurrent(record);
                        }
                    } else {
                        if (grid.isSelected(record)) {


                        } else {
                            grid.deselectAll();
                            grid.select(record);
                            grid.setCurrent(record);
                        }
                    }
                }
            } else {


                if (!grid.isSelected(record)) {
                    grid.deselectAll();
                    grid.select(record);
                } else {
                    if (e.htmlEvent.ctrlKey || grid.allowUnselect) {
                        grid.deselectAll();
                    }
                }
            }
        }
    }
};




mini._Grid_RowGroup = function(grid) {
    this.owner = grid, el = grid.el;
    mini.on(grid._bodyEl, "click", this.__OnClick, this);
}
mini._Grid_RowGroup.prototype = {
    __OnClick: function(e) {
        var grid = this.owner;
        var group = grid._getRowGroupByEvent(e);
        if (group) {

            if (!grid.groupTitleCollapsible && !mini.hasClass(e.target, "mini-grid-group-ecicon")) {
                return;
            }


            var ev = {
                htmlEvent: e,
                cancel: false,
                group: group
            };
            grid.fire("beforegroupclick", ev);
            if (ev.cancel === true) return;

            grid.toggleRowGroup(group);
        }
    }
};



mini._Grid_ColumnsMenu = function(grid) {
    this.owner = grid;
    this.menu = this.createMenu();
    mini.on(grid.el, "contextmenu", this.__OnContextMenu, this);
    grid.on("destroy", this.__OnGridDestroy, this);
}
mini._Grid_ColumnsMenu.prototype = {
    __OnGridDestroy: function(e) {
        if (this.menu) this.menu.destroy();
        this.menu = null;
    },
    createMenu: function() {
        var menu = mini.create({
            type: "menu",
            hideOnClick: false
        });
        menu.on("itemclick", this.__OnItemClick, this);
        return menu;
    },
    updateMenu: function() {
        var grid = this.owner,
            menu = this.menu;
        var columns = grid.getBottomColumns();
        var items = [];
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.hideable) continue;
            var item = {};
            item.checked = column.visible;
            item.checkOnClick = true;
            item.text = grid._createHeaderText(column);
            if (item.text == "&nbsp;") {
                if (column.type == "indexcolumn") item.text = "����";
                if (column.type == "checkcolumn") item.text = "ѡ��";
            }
            items.push(item);

            item.enabled = column.enabled;

            item._column = column;
        }
        menu.setItems(items);
    },
    __OnContextMenu: function(e) {
        var grid = this.owner;
        if (grid.showColumnsMenu == false) return;
        if (mini.isAncestor(grid._columnsEl, e.target) == false) return;
        this.updateMenu();
        this.menu.showAtPos(e.pageX, e.pageY);
        return false;
    },
    __OnItemClick: function(e) {
        var grid = this.owner,
            menu = this.menu;
        var columns = grid.getBottomColumns();
        var items = menu.getItems();
        var item = e.item,
            column = item._column;

        var checkedCount = 0;
        for (var i = 0, l = items.length; i < l; i++) {
            var it = items[i];
            if (it.getChecked()) checkedCount++;
        }
        if (checkedCount < 1) {
            item.setChecked(true);
        }

        var checked = item.getChecked();
        if (checked) grid.showColumn(column);
        else grid.hideColumn(column);
    }
}




mini._Grid_CellToolTip = function(grid) {
    this.owner = grid;
    mini.on(this.owner.el, "mousemove", this.__OnGridMouseMove, this);
};
mini._Grid_CellToolTip.prototype = {
    __OnGridMouseMove: function(e) {
        var grid = this.owner;

        if (mini.hasClass(e.target, "mini-grid-headerCell-inner")) {
            var cellEl = e.target;

            if (cellEl.scrollWidth > cellEl.clientWidth) {
                var s = cellEl.innerText || cellEl.textContent || "";
                cellEl.title = s.trim();
            } else {
                cellEl.title = "";
            }

            return;
        }

        var cell = grid._getCellByEvent(e); // setImg ??

        var cellEl = grid._getCellEl(cell[0], cell[1]);


        var error = grid.getCellError(cell[0], cell[1]);
        if (cellEl) {

            if (error) {
                setTimeout(function() {
                    cellEl.title = error.errorText;
                }, 10);
                return;
            }
            setTimeout(function() {
                var innerEl = cellEl;
                if (cellEl.firstChild) {
                    if (mini.hasClass(cellEl.firstChild, "mini-grid-cell-inner")) {
                        innerEl = cellEl.firstChild;
                    }
                    if (mini.hasClass(cellEl.firstChild, "mini-tree-nodetitle")) {
                        innerEl = cellEl.firstChild;
                    }
                }
                if (innerEl.scrollWidth > innerEl.clientWidth && grid.getShowCellTip() && cell[1].showCellTip) {
                    var s = innerEl.innerText || innerEl.textContent || "";
                    cellEl.title = s.trim();
                } else {
                    cellEl.title = "";
                }
            }, 10);
        }
    }
};




mini._Grid_Sorter = function(grid) {

    this.owner = grid;
    this.owner.on("headercellclick", this.__OnGridHeaderCellClick, this);


    mini.on(grid._headerEl, "mousemove", this.__OnGridHeaderMouseMove, this);
    mini.on(grid._headerEl, "mouseout", this.__OnGridHeaderMouseOut, this);
};
mini._Grid_Sorter.prototype = {
    __OnGridHeaderMouseOut: function(e) {
        if (this._focusedColumnEl) {
            mini.removeClass(this._focusedColumnEl, "mini-grid-headerCell-hover");
        }
    },
    __OnGridHeaderMouseMove: function(e) {
        var t = mini.findParent(e.target, "mini-grid-headerCell");
        if (t) {
            mini.addClass(t, "mini-grid-headerCell-hover");
            this._focusedColumnEl = t;
        }
    },
    __OnGridHeaderCellClick: function(e) {
        var grid = this.owner;
        var type = e.htmlEvent.type;
        if (type == "dblclick" && !grid.sortDblClick) return;
        if (type == "click" && grid.sortDblClick) return;
        if (!mini.hasClass(e.htmlEvent.target, "mini-grid-column-splitter")) {
            if (grid.allowSortColumn && grid.isEditing() == false) {

                var column = e.column;
                if (!column.columns || column.columns.length == 0) {
                    var sortField = column.sortField || column.field;

                    if (sortField && column.allowSort !== false) {
                        var sortOrder = "asc";
                        if (grid.getSortField() == sortField) {
                            sortOrder = grid.getSortOrder() == "asc" ? "desc" : "asc";
                        }

                        grid.sortBy(sortField, sortOrder);
                    }
                }
            }
        }
    }
};




mini._Grid_ColumnMove = function(grid) {
    this.owner = grid;
    mini.on(this.owner.el, "mousedown", this.__onGridMouseDown, this);
};
mini._Grid_ColumnMove.prototype = {
    __onGridMouseDown: function(e) {

        var grid = this.owner;

        if (grid.isEditing()) return;
        if (mini.hasClass(e.target, "mini-grid-column-splitter")) return;

        if (e.button == mini.MouseButton.Right) return;
        var t = mini.findParent(e.target, grid._headerCellCls);
        if (t) {
            this._remove();
            var column = grid._getColumnByEvent(e);
            if (grid.allowMoveColumn && column && column.allowMove) {
                this.dragColumn = column;
                this._columnEl = t;
                this.getDrag().start(e);
            }
        }
    },
    getDrag: function() {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: false,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function(drag) {
        function createHeaderCell(column) {
            var header = column.header;
            if (typeof header == "function") header = header.call(grid, column);
            if (mini.isNull(header) || header === "") header = "&nbsp;";
            return header;
        }

        var grid = this.owner;
        this._dragProxy = mini.append(document.body, '<div class="mini-grid-columnproxy"></div>');
        this._dragProxy.innerHTML = '<div class="mini-grid-columnproxy-inner" style="height:26px;">' + createHeaderCell(this.dragColumn) + '</div>';
        mini.setXY(this._dragProxy, drag.now[0] + 15, drag.now[1] + 18);
        mini.addClass(this._dragProxy, "mini-grid-no");

        this.moveTop = mini.append(document.body, '<div class="mini-grid-movetop"></div>');
        this.moveBottom = mini.append(document.body, '<div class="mini-grid-movebottom"></div>');
    },
    _OnDragMove: function(drag) {
        var grid = this.owner;
        var x = drag.now[0];

        mini.setXY(this._dragProxy, x + 15, drag.now[1] + 18);

        this.targetColumn = this.insertAction = null;
        var t = mini.findParent(drag.event.target, grid._headerCellCls);
        if (t) {
            var column = grid._getColumnByEvent(drag.event);
            if (column && column != this.dragColumn) {
                var p1 = grid.getParentColumn(this.dragColumn);
                var p2 = grid.getParentColumn(column);
                if (p1 == p2) {

                    this.targetColumn = column;
                    this.insertAction = "before";
                    var columnBox = grid.getColumnBox(this.targetColumn);

                    if (x > columnBox.x + columnBox.width / 2) {

                        this.insertAction = "after";
                    }
                }
            }
        }

        if (this.targetColumn) {

            mini.addClass(this._dragProxy, "mini-grid-ok");
            mini.removeClass(this._dragProxy, "mini-grid-no");

            var box = grid.getColumnBox(this.targetColumn);

            this.moveTop.style.display = 'block';
            this.moveBottom.style.display = 'block';
            if (this.insertAction == "before") {

                mini.setXY(this.moveTop, box.x - 4, box.y - 9);
                mini.setXY(this.moveBottom, box.x - 4, box.bottom);
            } else {

                mini.setXY(this.moveTop, box.right - 4, box.y - 9);
                mini.setXY(this.moveBottom, box.right - 4, box.bottom);
            }
        } else {
            mini.removeClass(this._dragProxy, "mini-grid-ok");
            mini.addClass(this._dragProxy, "mini-grid-no");

            this.moveTop.style.display = 'none';
            this.moveBottom.style.display = 'none';
        }
    },
    _remove: function() {
        var grid = this.owner;
        mini.removeNode(this._dragProxy);
        mini.removeNode(this.moveTop);
        mini.removeNode(this.moveBottom);
        this._dragProxy = this.moveTop = this.moveBottom = this.dragColumn = this.targetColumn = null;
    },
    _OnDragStop: function(drag) {
        var grid = this.owner;

        grid.moveColumn(this.dragColumn, this.targetColumn, this.insertAction);
        this._remove();
    }
};





mini._Grid_ColumnSplitter = function(grid) {
    this.owner = grid;
    mini.on(grid.el, "mousedown", this.__OnMouseDown, this);
};
mini._Grid_ColumnSplitter.prototype = {
    __OnMouseDown: function(e) {
        var grid = this.owner;
        var t = e.target;

        if (mini.hasClass(t, "mini-grid-column-splitter")) {
            var column = grid._getColumnById(t.id);
            if (grid.isEditing()) return;
            if (grid.allowResizeColumn && column && column.allowResize) {
                this.splitterColumn = column;
                this.getDrag().start(e);
            }
        }
    },
    getDrag: function() {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function(drag) {
        var grid = this.owner;
        var columnBox = grid.getColumnBox(this.splitterColumn);

        this.columnBox = columnBox;
        this._dragProxy = mini.append(document.body, '<div class="mini-grid-proxy"></div>');
        var box = grid.getGridViewBox();
        box.x = columnBox.x;
        box.width = columnBox.width;
        box.right = columnBox.right;
        mini.setBox(this._dragProxy, box);
    },
    _OnDragMove: function(drag) {
        var grid = this.owner;
        var box = mini.copyTo({}, this.columnBox);
        var width = box.width + (drag.now[0] - drag.init[0]);
        if (width < grid.columnMinWidth) width = grid.columnMinWidth;
        if (width > grid.columnMaxWidth) width = grid.columnMaxWidth;

        mini.setWidth(this._dragProxy, width);
    },
    _OnDragStop: function(drag) {
        var grid = this.owner;
        var box = mini.getBox(this._dragProxy);
        var sf = this;
        var allowSort = grid.allowSortColumn;
        grid.allowSortColumn = false;
        setTimeout(function() {
            jQuery(sf._dragProxy).remove();
            sf._dragProxy = null;
            grid.allowSortColumn = allowSort;
        }, 10);

        var column = this.splitterColumn;

        var columnWidth = parseInt(column.width);
        if (columnWidth + "%" != column.width) {
            var width = grid.getColumnWidth(column);
            var w = parseInt(columnWidth / width * box.width);
            if (w < grid.columnMinWidth) w = grid.columnMinWidth;
            grid.setColumnWidth(column, w);
        }
    }
};





mini._Grid_DragDrop = function(grid) {
    this.owner = grid;
    this.owner.on('CellMouseDown', this.__OnGridCellMouseDown, this);
}
mini._Grid_DragDrop.prototype = {
    __OnGridCellMouseDown: function(e) {

        if (e.htmlEvent.button == mini.MouseButton.Right) return;
        var grid = this.owner;
        if (grid._dragging) return;

        this.dropObj = grid;

        if (mini.findParent(e.htmlEvent.target, 'mini-tree-editinput')) return;

        if (grid.isReadOnly() || grid.isAllowDrag(e.record, e.column) == false) return;


        var ex = grid._OnDragStart(e.record, e.column);
        if (ex.cancel) return;
        this.dragText = ex.dragText;

        var record = e.record;

        this.isTree = !!grid.isTree;

        this.beginRecord = record;

        var drag = this._getDrag();
        drag.start(e.htmlEvent);
    },
    _OnDragStart: function(drag) {
        var grid = this.owner;
        grid._dragging = true;

        var record = this.beginRecord;
        this.dragData = grid._getDragData();

        if (this.dragData.indexOf(record) == -1) {
            this.dragData.push(record);
        }


        this.feedbackEl = mini.append(document.body, '<div class="mini-feedback"></div>');
        this.feedbackEl.innerHTML = this.dragText;
        this.lastFeedbackClass = "";

        this.enableHotTrack = grid.getEnableHotTrack();
        grid.setEnableHotTrack(false);
    },
    _getDropTargetObj: function(event) {
        var dom = mini.findParent(event.target, "mini-grid", 500);
        if (dom) {
            return mini.get(dom);
        }
    },
    _OnDragMove: function(drag) {
        var grid = this.owner;
        var dropObj = this._getDropTargetObj(drag.event);
        this.dropObj = dropObj;

        var x = drag.now[0],
            y = drag.now[1];
        mini.setXY(this.feedbackEl, x + 15, y + 18);

        if (dropObj && dropObj.allowDrop) {
            this.isTree = dropObj.isTree;

            var targetRecord = dropObj._getRecordByEvent(drag.event);
            this.dropRecord = targetRecord;

            if (targetRecord) {
                if (this.isTree) {
                    this.dragAction = this.getFeedback(targetRecord, y, 3);
                } else {
                    this.dragAction = this.getFeedback(targetRecord, y, 2);
                }
            } else {
                this.dragAction = "no";
            }

        } else {
            this.dragAction = "no";
        }


        if (dropObj && dropObj.allowDrop && !targetRecord && dropObj.getData().length == 0) {
            this.dragAction = "add";
        }

        this.lastFeedbackClass = "mini-feedback-" + this.dragAction;
        this.feedbackEl.className = "mini-feedback " + this.lastFeedbackClass;
        if (this.dragAction == "no") targetRecord = null;
        this.setRowFeedback(targetRecord, this.dragAction);
    },
    _OnDragStop: function(drag) {

        var grid = this.owner;
        var dropObj = this.dropObj;

        grid._dragging = false;
        mini.removeNode(this.feedbackEl);


        grid.setEnableHotTrack(this.enableHotTrack);

        this.feedbackEl = null;
        this.setRowFeedback(null);


        if (this.isTree) {
            var dragRecords = [];
            for (var i = 0, l = this.dragData.length; i < l; i++) {
                var dragRecord = this.dragData[i];
                var hasParent = false;
                for (var j = 0, k = this.dragData.length; j < k; j++) {
                    var dr = this.dragData[j];
                    if (dr != dragRecord) {
                        hasParent = grid.isAncestor(dr, dragRecord);
                        if (hasParent) break;
                    }
                }

                if (!hasParent) {
                    dragRecords.push(dragRecord);
                }
            }
            this.dragData = dragRecords;
        }

        if (this.dragAction == 'add' && !this.dropRecord) {
            this.dropRecord = dropObj.getRootNode ? dropObj.getRootNode() : {
                __root: true
            };
        }


        if (this.dropRecord && dropObj && this.dragAction != "no") {
            var e = grid._OnDragDrop(this.dragData, this.dropRecord, this.dragAction);
            if (!e.cancel) {
                var dragRecords = e.dragNodes,
                    targetRecord = e.targetNode,
                    action = e.action;


                if (dropObj.isTree) {
                    if (grid == dropObj) {
                        dropObj.moveNodes(dragRecords, targetRecord, action);
                    } else {
                        if (dropObj.dropAction == "move") {
                            grid.removeNodes(dragRecords);
                        } else if (dropObj.dropAction == "copy") {
                            dragRecords = mini.clone(dragRecords);
                        }
                        dropObj.addNodes(dragRecords, targetRecord, action);
                    }

                } else {
                    var index = dropObj.indexOf(targetRecord);
                    if (action == "after") index += 1;

                    if (grid == dropObj) {
                        dropObj.moveRow(dragRecords, index);
                    } else {

                        if (dropObj.dropAction == "move") {
                            grid.removeRows(dragRecords);
                        } else if (dropObj.dropAction == "copy") {
                            dragRecords = mini.clone(dragRecords);
                        }

                        if (this.dragAction == "add") {
                            dropObj.addRows(dragRecords);
                        } else {
                            dropObj.addRows(dragRecords, index);
                        }
                    }
                }

                var e = {
                    dragNode: e.dragNodes[0],
                    dropNode: e.targetNode,
                    dragAction: e.action,

                    dragNodes: e.dragNodes,
                    targetNode: e.targetNode
                };
                dropObj.fire("drop", e);
            }

        }

        this.dropRecord = null;
        this.dragData = null;
    },
    setRowFeedback: function(record, feedback) {



        var grid = this.owner;
        var dropObj = this.dropObj;

        if (this.lastAddDomRow && dropObj) {
            dropObj.removeRowCls(this.lastAddDomRow, "mini-tree-feedback-add");
        }
        if (record == null || this.dragAction == "add") {
            mini.removeNode(this.feedbackLine);
            this.feedbackLine = null;
        }

        this.lastRowFeedback = record;

        if (record != null) {
            if (feedback == "before" || feedback == "after") {
                if (!this.feedbackLine) {
                    this.feedbackLine = mini.append(document.body, "<div class='mini-feedback-line'></div>");
                }
                this.feedbackLine.style.display = "block";
                var rowBox = dropObj.getRowBox(record);
                var x = rowBox.x,
                    y = rowBox.y - 1;
                if (feedback == "after") {
                    y += rowBox.height;
                }
                mini.setXY(this.feedbackLine, x, y);

                var box = dropObj.getBox(true);
                mini.setWidth(this.feedbackLine, box.width);
            } else {
                dropObj.addRowCls(record, "mini-tree-feedback-add");
                this.lastAddDomRow = record;


            }
        }
    },
    getFeedback: function(dropRecord, y, way) {

        var grid = this.owner;

        var dropObj = this.dropObj;

        var rowBox = dropObj.getRowBox(dropRecord);


        var h = rowBox.height;
        var t = y - rowBox.y;

        var effect = null;


        if (this.dragData.indexOf(dropRecord) != -1) return "no";
        var IsLeaf = false;
        if (way == 3) {
            IsLeaf = dropObj.isLeaf(dropRecord);


            for (var i = 0, l = this.dragData.length; i < l; i++) {
                var dragRecord = this.dragData[i];

                var isAncestor = dropObj.isAncestor(dragRecord, dropRecord);
                if (isAncestor) {
                    effect = "no";
                    break;
                }
            }
        }
        if (effect == null) {
            if (way == 2) {
                if (t > h / 2) effect = "after";
                else effect = "before";
            } else {
                if (IsLeaf && dropObj.allowLeafDropIn === false) {
                    if (t > h / 2) effect = "after";
                    else effect = "before";
                } else {
                    if (t > (h / 3) * 2) effect = "after";
                    else if (h / 3 <= t && t <= (h / 3 * 2)) effect = "add";
                    else effect = "before";
                }
            }
        }
        var e = dropObj._OnGiveFeedback(effect, this.dragData, dropRecord, grid);
        return e.effect;
    },
    _getDrag: function() {
        if (!this.drag) {
            this.drag = new mini.Drag({

                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    }
};



mini._Grid_Events = function(grid) {
    this.owner = grid, el = grid.el;

    mini.on(el, 'click', this.__OnClick, this);
    mini.on(el, 'dblclick', this.__OnDblClick, this);

    mini.on(el, 'mousedown', this.__OnMouseDown, this);
    mini.on(el, 'mouseup', this.__OnMouseUp, this);
    mini.on(el, 'mousemove', this.__OnMouseMove, this);
    mini.on(el, 'mouseover', this.__OnMouseOver, this);
    mini.on(el, 'mouseout', this.__OnMouseOut, this);

    mini.on(el, 'keydown', this.__OnKeyDown, this);
    mini.on(el, 'keyup', this.__OnKeyUp, this);

    mini.on(el, 'contextmenu', this.__OnContextMenu, this);


    grid.on("rowmousemove", this.__OnRowMouseMove, this);


    mini.on(window, "resize", this.__windowResize, this);
}
mini._Grid_Events.prototype = {

    __windowResize: function() {
        var grid = this.owner;

        function layoutEditor() {
            var editor = grid._getEditingControl();
            if (editor) {
                var currentCell = grid.getCurrentCell();
                var cellBox = grid.getCellBox(currentCell[0], currentCell[1]);
                grid._getEditWrap(cellBox, editor);
                grid._setEdiorBox(editor, cellBox);
            }
        }


        setTimeout(function() {
            layoutEditor();
        }, 100);

    },


    _row: null,
    __OnRowMouseMove: function(e) {
        var grid = this.owner;
        var row = e.record;

        if (this._row != row) {





            e.record = row;
            e.row = row;
            grid.fire("rowmouseenter", e);
        }
        this._row = row;
    },


    __OnClick: function(e) {
        this._fireEvent(e, 'Click');
    },
    __OnDblClick: function(e) {
        this._fireEvent(e, 'Dblclick');
    },
    __OnMouseDown: function(e) {
        var grid = this.owner;
        if (mini.findParent(e.target, 'mini-tree-editinput')) return;
        if (mini.findParent(e.target, "mini-tree-node-ecicon")) return;

        this._fireEvent(e, 'MouseDown');


        var timer = 300;
        if (e.target.tagName.toLowerCase() == "a" && e.target.href) {
            timer = 10;
        }

        setTimeout(function() {
            var p = mini.findParent(e.target, 'mini-grid-detailRow');
            if (mini.isAncestor(grid.el, p)) return;
            if (!!grid._editingCell) return;

            grid._tryFocus(e);
        }, timer);
    },
    __OnMouseUp: function(e) {
        if (mini.findParent(e.target, 'mini-tree-editinput')) return;
        if (mini.findParent(e.target, "mini-tree-node-ecicon")) return;
        if (mini.findParent(e.target, "mini-tree-checkbox")) return;

        var grid = this.owner;
        if (mini.isAncestor(grid.el, e.target)) {




            this._fireEvent(e, 'MouseUp');
        }
    },
    __OnMouseMove: function(e) {
        this._fireEvent(e, 'MouseMove');
    },
    __OnMouseOver: function(e) {
        this._fireEvent(e, 'MouseOver');
    },
    __OnMouseOut: function(e) {
        this._fireEvent(e, 'MouseOut');
    },
    __OnKeyDown: function(e) {
        this._fireEvent(e, 'KeyDown');
    },
    __OnKeyUp: function(e) {
        this._fireEvent(e, 'KeyUp');
    },
    __OnContextMenu: function(e) {
        this._fireEvent(e, 'ContextMenu');
    },
    _fireEvent: function(e, name) {





        var grid = this.owner;

        var cell = grid._getCellByEvent(e);
        var record = cell[0],
            column = cell[1];
        if (record) {
            var eve = {
                record: record,
                row: record,
                htmlEvent: e
            };

            var fn = grid['_OnRow' + name];
            if (fn) {
                fn.call(grid, eve);
            } else {
                grid.fire("row" + name, eve);
            }
        }
        if (column) {
            var eve = {
                column: column,
                field: column.field,
                htmlEvent: e
            };

            var fn = grid['_OnColumn' + name];
            if (fn) {
                fn.call(grid, eve);
            } else {
                grid.fire("column" + name, eve);
            }
        }

        if (record && column) {
            var eve = {
                sender: grid,
                record: record,
                row: record,
                column: column,
                field: column.field,
                htmlEvent: e
            };

            var fn = grid['_OnCell' + name];
            if (fn) {
                fn.call(grid, eve);
            } else {

                grid.fire("cell" + name, eve);
            }

            if (column["onCell" + name]) {
                column["onCell" + name].call(column, eve);
            }

        }
        if (!record && column && mini.findParent(e.target, 'mini-grid-headerCell')) {
            var eve = {
                column: column,
                htmlEvent: e
            };
            var fn = grid['_OnHeaderCell' + name];
            if (fn) {
                fn.call(grid, eve);
            } else {

                var evName = "onheadercell" + name.toLowerCase();
                if (column[evName]) {
                    eve.sender = grid;
                    column[evName](eve);
                }

                grid.fire("headercell" + name, eve);
            }
        }
    }
}


mini.DataGrid = function(el) {
    mini.DataGrid.superclass.constructor.call(this, null);

    this._Events = new mini._Grid_Events(this);
    this._Select = new mini._Grid_Select(this);
    this._DragDrop = new mini._Grid_DragDrop(this);

    this._RowGroup = new mini._Grid_RowGroup(this);

    this._Splitter = new mini._Grid_ColumnSplitter(this);
    this._ColumnMove = new mini._Grid_ColumnMove(this);
    this._Sorter = new mini._Grid_Sorter(this);
    this._CellToolTip = new mini._Grid_CellToolTip(this);
    this._ColumnsMenu = new mini._Grid_ColumnsMenu(this);

    this._createPagers();

    if (el) mini.applyTo.call(this, el);








};
mini.extend(mini.DataGrid, mini.ScrollGridView, {

    uiCls: "mini-datagrid",

    selectOnLoad: false,

    showHeader: false,
    showPager: true,

    dropAction: "move",

    onlyCheckSelection: false,
    _$onlyCheckSelection: true,
    allowUnselect: false,
    allowRowSelect: true,
    allowCellSelect: false,
    allowCellEdit: false,
    cellEditAction: "cellclick",
    allowCellValid: false,

    allowResizeColumn: true,
    allowSortColumn: true,
    allowMoveColumn: true,

    showColumnsMenu: false,

    virtualScroll: false,
    enableHotTrack: true,
    allowHotTrackOut: true,
    showLoading: true,

    columnMinWidth: 8,
    _canUpdateRowEl: true,
    _currentCell: null,
    _editingCell: null,
    navEditMode: false,
    editNextRowCell: false,
    editNextOnEnterKey: false,
    editOnTabKey: true,
    createOnEnter: false,
    skipReadOnlyCell: false,
    autoHideRowDetail: true,
    allowDrag: false,
    allowDrop: false,
    allowLeafDropIn: false,
    pageSize: 20,
    pageIndex: 0,
    totalCount: 0,
    totalPage: 0,
    sortField: "",
    sortOrder: "",
    url: "",
    sortDblClick: false,
    showCellTip: true,
    sizeText: "",
    showPagerButtonText: false,
    showPagerButtonIcon: false,
    groupTitleCollapsible: true,
    allowEmptyContextMenu: false,
    headerContextMenu: null,
    selectOnRightClick: true,
    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var url = kv.url;
        delete kv.url;
        var data = kv.data;
        delete kv.data;
        var columns = kv.columns;
        delete kv.columns;


        var defaultColumnWidth = kv.defaultColumnWidth;
        delete kv.defaultColumnWidth;
        if (defaultColumnWidth) {
            this.setDefaultColumnWidth(defaultColumnWidth);
        }

        if (!mini.isNull(columns)) {
            this.setColumns(columns);
        }

        mini.DataGrid.superclass.set.call(this, kv);

        if (!mini.isNull(data)) {
            this.setData(data);
        }
        if (!mini.isNull(url)) {

            this.setUrl(url);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }

        return this;
    },
    doUpdate: function() {

        this._destroyEditors();
        mini.DataGrid.superclass.doUpdate.apply(this, arguments);
    },
    _destroyEditors: function() {
        var controls = mini.getChildControls(this);
        var editors = [];
        for (var i = 0, l = controls.length; i < l; i++) {
            var ui = controls[i];
            if (ui.el && mini.findParent(ui.el, this._rowCls)) {
                editors.push(ui);
                ui.destroy();
            }
        }

    },

    _OnDrawCell: function() {
        var e = mini.DataGrid.superclass._OnDrawCell.apply(this, arguments);






        return e;
    },

    _bindSource: function() {
        var source = this._dataSource;

        source.on("beforeload", this.__OnSourceBeforeLoad, this);
        source.on("preload", this.__OnSourcePreLoad, this);
        source.on("load", this.__OnSourceLoadSuccess, this);
        source.on("loaderror", this.__OnSourceLoadError, this);


        source.on("loaddata", this.__OnSourceLoadData, this);
        source.on("cleardata", this.__OnSourceClearData, this);
        source.on("sort", this.__OnSourceSort, this);
        source.on("filter", this.__OnSourceFilter, this);

        source.on("pageinfochanged", this.__OnPageInfoChanged, this);
        source.on("selectionchanged", this.__OnSelectionChanged, this);
        source.on("currentchanged", function(e) {
            this.fire("currentchanged", e);
        }, this);


        source.on("add", this.__OnSourceAdd, this);
        source.on("update", this.__OnSourceUpdate, this);
        source.on("remove", this.__OnSourceRemove, this);
        source.on("move", this.__OnSourceMove, this);

        source.on("beforeadd", function(e) {
            this.fire("beforeaddrow", e);
        }, this);
        source.on("beforeupdate", function(e) {
            this.fire("beforeupdaterow", e);
        }, this);
        source.on("beforeremove", function(e) {
            this.fire("beforeremoverow", e);
        }, this);
        source.on("beforemove", function(e) {
            this.fire("beforemoverow", e);
        }, this);


        source.on("beforeselect", function(e) {
            this.fire("beforeselect", e);
        }, this);


        source.on("beforedeselect", function(e) {

            this.fire("beforedeselect", e);
        }, this);
        source.on("select", function(e) {
            this.fire("select", e);
        }, this);
        source.on("deselect", function(e) {
            this.fire("deselect", e);
        }, this);
    },
    _getMaskWrapEl: function() {
        return this.el;
    },
    _initData: function() {

        this.data = this._dataSource.getSource();
        this.pageIndex = this.getPageIndex();
        this.pageSize = this.getPageSize();
        this.totalCount = this.getTotalCount();
        this.totalPage = this.getTotalPage();
        this.sortField = this.getSortField();
        this.sortOrder = this.getSortOrder();
        this.url = this.getUrl();

        this._mergedCellMaps = {};
        this._mergedCells = {};

        this._cellErrors = [];
        this._cellMapErrors = {};

        if (this.isGrouping()) {
            this.groupBy(this._groupField, this._groupDir);

            if (this.collapseGroupOnLoad) {

                this.collapseGroups();
            }
        }
    },
    __OnSourceBeforeLoad: function(e) {
        this.fire("beforeload", e);
        if (e.cancel == true) {

            return;
        }
        if (this.showLoading) {
            this.loading();
        }
    },
    __OnSourcePreLoad: function(e) {
        this.fire("preload", e);
    },

    __OnSourceLoadSuccess: function(e) {
        var me = this;
        setTimeout(function() {
            mini.layout(me);
        }, 400);

        this.fire("load", e);
        this.unmask();
    },
    __OnSourceLoadError: function(e) {
        this.fire("loaderror", e);
        this.unmask();
    },

    __OnSourceSort: function(e) {
        this.deferUpdate();
        this.fire("sort", e);
    },
    __OnSourceFilter: function(e) {
        this.deferUpdate();
        this.fire("filter", e);
    },

    __OnSourceAdd: function(e) {

        this._doAddRowEl(e.record);
        this._doUpdateSummaryRow();

        this._viewRegion = this._getViewRegion();

        this.fire("addrow", e);
    },
    __OnSourceUpdate: function(e) {

        this._doUpdateRowEl(e.record);
        this._doUpdateSummaryRow();

        this.fire("updaterow", e);
    },
    __OnSourceRemove: function(e) {

        this._doRemoveRowEl(e.record);
        this._doUpdateSummaryRow();

        this.fire("removerow", e);

        if (this.isVirtualScroll()) {
            this.deferUpdate();
        }
    },
    __OnSourceMove: function(e) {
        this._doMoveRowEl(e.record, e.index);
        this._doUpdateSummaryRow();
        this.fire("moverow", e);
    },
    __OnSelectionChanged: function(e) {


        if (e.fireEvent !== false) {
            if (e.select) {
                this.fire("rowselect", e);
            } else {
                this.fire("rowdeselect", e);
            }
        }

        var me = this;
        if (this._selectionTimer) {
            clearTimeout(this._selectionTimer);
            this._selectionTimer = null;
        }
        this._selectionTimer = setTimeout(function() {
            me._selectionTimer = null;

            if (e.fireEvent !== false) {
                me.fire("SelectionChanged", e);
            }

            me.fire("_selectchange", e);




        }, 1);

        var sss = new Date();

        this._doRowSelect(e._records, e.select);







    },
    __OnPageInfoChanged: function(e) {
        this._updatePagesInfo();
    },
    _updatePagesInfo: function() {
        var pageIndex = this.getPageIndex();
        var pageSize = this.getPageSize();
        var totalCount = this.getTotalCount();
        var totalPages = this.getTotalPage();
        var pageInfoText = this.getPageInfoText();

        var pagers = this._pagers;
        for (var i = 0, l = pagers.length; i < l; i++) {
            var pager = pagers[i];
            pager.setPageInfoText(pageInfoText);
            pager.update(pageIndex, pageSize, totalCount);
            this._dataSource.totalPage = pager.totalPage;
        }
    },
    setPagerButtons: function(value) {
        this._bottomPager.setButtons(value);
    },
    setPager: function(value) {
        if (typeof value == "string") {
            var el = mini.byId(value);
            if (!el) return;
            mini.parse(value);
            value = mini.get(value);
        }
        if (value) {
            this.bindPager(value);
        }
    },
    bindPager: function(pager) {
        if (!pager) return;
        this.unbindPager(pager);
        this._pagers.add(pager);
        pager.on("beforepagechanged", this.__OnPageChanged, this);
    },
    unbindPager: function(pager) {
        if (!pager) return;
        this._pagers.remove(pager);
        pager.un("pagechanged", this.__OnPageChanged, this);
    },
    __OnPageChanged: function(e) {
        e.cancel = true;
        this.gotoPage(e.pageIndex, e.pageSize);

    },

    _canUpdateRowEl: true,
    _doUpdateRowEl: function(row) {

        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();

        var rowEl1, rowEl2;

        var rowIndex = this.indexOf(row);

        var s = this._createRowHTML(row, rowIndex, columns2, 2);
        var rowEl = this._getRowEl(row, 2);
        if (!rowEl) return;


        jQuery(rowEl).before(s);
        rowEl1 = rowEl.previousSibling;

        if (rowEl) rowEl.parentNode.removeChild(rowEl);

        if (this.isFrozen()) {
            var s = this._createRowHTML(row, rowIndex, columns1, 1);
            var rowEl = this._getRowEl(row, 1);
            jQuery(rowEl).before(s);
            rowEl2 = rowEl.previousSibling;

            jQuery(rowEl).remove();
        }

        this.deferLayout();

        if (rowEl1 && rowEl2) {
            this._doSyncRowHeight(rowEl1, rowEl2);

        }
    },
    _doAddRowEl: function(row) {

        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();

        var bdTable1 = this._rowsLockContentEl.firstChild;
        var bdTable2 = this._rowsViewContentEl.firstChild;

        var rowIndex = this.indexOf(row);
        var insertRow = this.getAt(rowIndex + 1);

        function doAdd(row, viewIndex, columns, bdTable) {
            var s = this._createRowHTML(row, rowIndex, columns, viewIndex);
            if (insertRow) {
                var inertRowEl = this._getRowEl(insertRow, viewIndex);
                jQuery(inertRowEl).before(s);
            } else {
                mini.append(bdTable, s);
            }
        }

        doAdd.call(this, row, 2, columns2, bdTable2);
        if (this.isFrozen()) {
            doAdd.call(this, row, 1, columns1, bdTable1);
        }

        this.deferLayout();

        if (this.showEmptyText) {
            var el = jQuery(".mini-grid-emptyText", this._bodyEl)[0];
            if (el) {

                el.style.display = "none";
                el.parentNode.style.display = "none";
            }
        }
    },
    _doRemoveRowEl: function(row) {
        var rowEl = this._getRowEl(row, 1);
        var rowEl2 = this._getRowEl(row, 2);
        if (rowEl) rowEl.parentNode.removeChild(rowEl);
        if (rowEl2) rowEl2.parentNode.removeChild(rowEl2);
        if (!rowEl2) return;


        var tr = this._getRowDetailEl(row, 1);
        var tr2 = this._getRowDetailEl(row, 2);
        if (tr) tr.parentNode.removeChild(tr);
        if (tr2) tr2.parentNode.removeChild(tr2);

        this.deferLayout();

        if (this.showEmptyText && this.getVisibleRows().length == 0) {
            var el = jQuery(".mini-grid-emptyText", this._bodyEl)[0];
            if (el) {

                el.style.display = "";
                el.parentNode.style.display = "";
            }
        }
    },
    _doMoveRowEl: function(row, index) {
        this._doRemoveRowEl(row);
        this._doAddRowEl(row);
    },

    _getRowGroupEl: function(group, index) {
        if (index == 1 && !this.isFrozen()) return null;
        var id = this._createRowGroupId(group, index);
        var el = mini.byId(id, this.el);
        return el;
    },
    _getRowGroupRowsEl: function(group, index) {
        if (index == 1 && !this.isFrozen()) return null;
        var id = this._createRowGroupRowsId(group, index);
        var el = mini.byId(id, this.el);
        return el;
    },
    _getRowEl: function(row, index) {
        if (index == 1 && !this.isFrozen()) return null;
        row = this.getRecord(row);
        var id = this._createRowId(row, index);
        var el = mini.byId(id, this.el);
        return el;
    },
    _getHeaderCellEl: function(column, index) {
        if (index == 1 && !this.isFrozen()) return null;
        column = this.getColumn(column);
        var id = this._createHeaderCellId(column, index);
        var el = mini.byId(id, this.el);
        return el;
    },
    getRowEl: function(_, $) {
        return this._getRowEl(_, $)
    },
    getHeaderCellEl: function($, _) {
        return this._getHeaderCellEl($, _)
    },

    _getCellEl: function(row, column) {
        row = this.getRecord(row);
        column = this.getColumn(column);
        if (!row || !column) return null;
        var id = this._createCellId(row, column);
        var el = mini.byId(id, this.el);
        return el;
    },
    getCellEl: function(row, column) {
        return this._getCellEl(row, column);
    },
    updateCellEl: function(row, column, value){
    	var el = this.getCellEl(row, column);
    	el.firstChild.innerHTML = value;
    },
    getRecordByEvent: function(e) {
        return this._getRecordByEvent(e);
    },
    _getRecordByEvent: function(e) {
        var t = mini.findParent(e.target, this._rowCls);
        if (!t) return null;
        var ids = t.id.split("$");
        var uid = ids[ids.length - 1];
        return this._getRowByID(uid);
    },
    getColumnByEvent: function(e) {
        if (!e) return null;
        return this._getColumnByEvent(e);
    },
    _getColumnByEvent: function(e) {
        var t = mini.findParent(e.target, this._cellCls);
        if (!t) t = mini.findParent(e.target, this._headerCellCls);
        if (t) {
            var ids = t.id.split("$");
            var id = ids[ids.length - 1];
            return this._getColumnById(id);
        }
        return null;
    },
    _getCellByEvent: function(e) {
        var record = this._getRecordByEvent(e);
        var column = this._getColumnByEvent(e);
        return [record, column];
    },
    getColumnFromEvent: function($) {
        if (!$) return null;
        return this._getColumnByEvent($)
    },
    getCellFromEvent: function(e) {
        return this._getCellByEvent(e);
    },
    getRowFromEvent: function($) {
        var _ = this._getCellByEvent($);
        return _ ? _[0] : null
    },
    getRowByEvent: function($) {
        return this.getRowFromEvent($)
    },
    getColumnByEvent: function($) {
        if (!$) return null;
        return this._getColumnByEvent($)
    },
    getCellByEvent: function($) {
        return this.getCellFromEvent($)
    },

    _getRowByID: function(id) {
        return this._dataSource.getby_id(id);
    },
    _getColumnById: function(id) {
        return this._columnModel._getColumnById(id);
    },





    hasRowCls: function(row, cls) {

        var sb = this._rowClsHash[row._id];
        if (sb) return sb.indexOf(cls) != -1;
        return false;
    },

    addRowCls: function(row, cls) {
        var d1 = this._getRowEl(row, 1);
        var d2 = this._getRowEl(row, 2);
        if (d1) mini.addClass(d1, cls);
        if (d2) mini.addClass(d2, cls);

        if (row) {
            var sb = this._rowClsHash[row._id];
            if (!sb) sb = this._rowClsHash[row._id] = [];
            else sb.remove(cls);
            sb.push(cls);
        }

    },
    removeRowCls: function(row, cls) {
        var d1 = this._getRowEl(row, 1);
        var d2 = this._getRowEl(row, 2);
        if (d1) mini.removeClass(d1, cls);
        if (d2) mini.removeClass(d2, cls);

        if (row) {
            var sb = this._rowClsHash[row._id];
            if (sb) {
                sb.remove(cls);
                if (sb.length == 0) delete this._rowClsHash[row._id];
            }
        }
    },
    getCellBox: function(row, column) {
        row = this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return null;
        var cellEl = this._getCellEl(row, column);
        if (!cellEl) return null;
        return mini.getBox(cellEl);
    },
    getColumnBox: function(column) {
        var id = this._createHeaderCellId(column, 2);
        var el = document.getElementById(id);
        if (!el) {
            id = this._createHeaderCellId(column, 1);
            el = document.getElementById(id);
        }
        if (el) {

            var box = mini.getBox(el);
            box.x -= 1;
            box.left = box.x;
            box.right = box.x + box.width;
            return box;
        }
    },
    getRowBox: function(row) {
        var rowEl = this._getRowEl(row, 1);
        var rowEl2 = this._getRowEl(row, 2);
        if (!rowEl2) return null;
        var box = mini.getBox(rowEl2);
        if (rowEl) {
            var box1 = mini.getBox(rowEl);
            box.x = box.left = box1.left;
            box.width = box.right - box.x;
        }
        return box;
    },






    _doRowSelect: function(rows, select) {

        var virtual = this.isVirtualScroll(),
            region = this._viewRegion,
            start = virtual ? region.start : -1,
            end = virtual ? region.end : -1,
            map = {};
        if (start != -1) {
            var data = this.getVisibleRows();
            for (var i = start, l = end; i < l; i++) {
                var row = data[i];
                if (row) map[row._id] = true;
            }
        }

        var sss = new Date();
        for (var i = 0, l = rows.length; i < l; i++) {
            var record = rows[i];


            if (start != -1) {
                if (!map[record._id]) {

                    continue;
                }
            }

            if (select) {
                this.addRowCls(record, this._rowSelectedCls);
            } else {
                this.removeRowCls(record, this._rowSelectedCls);
            }
        }
    },
    _tryFocus: function(e) {

        try {
            var tagName = e.target.tagName.toLowerCase();
            if (tagName == "input" || tagName == "textarea" || tagName == "select") return;
            if (mini.hasClass(e.target, 'mini-placeholder-label')) return;

            if (mini.findParent(e.target, 'mini-textboxlist')) return;

            if (mini.findParent(e.target, 'mini-grid-rows-content')) {

                mini.setXY(this._focusEl, e.pageX, e.pageY);

                this.focus(false);
            }









        } catch (ex) {}
    },









    focus: function(_fixFocus) {

        try {
            var that = this;
            var cell = this.getCurrentCell();
            if (cell && _fixFocus !== false) {
                var box = this.getCellBox(cell[0], cell[1]);
                mini.setX(this._focusEl, box.x);
            }

            var row = this.getCurrent();
            if (row) {
                var rowEl = this._getRowEl(row, 2);
                if (rowEl) {
                    if (_fixFocus !== false) {
                        var rowBox = mini.getBox(rowEl);
                        mini.setY(that._focusEl, rowBox.top);
                    }
                    if (mini.isIE || mini.isIE11 || mini.isChrome) {
                        that._focusEl.focus();

                    } else {
                        that.el.focus();
                    }
                }
            } else {
                if (mini.isIE || mini.isIE11 || mini.isChrome) {

                    that._focusEl.focus();

                } else {
                    that.el.focus();


                }
            }

        } catch (e) {}
    },
    focusRow: function(row) {
        if (this._focusRow == row) return;
        if (this._focusRow) {
            this.removeRowCls(this._focusRow, this._rowHoverCls);
        }
        this._focusRow = row;
        if (row) this.addRowCls(row, this._rowHoverCls);

        if (mini.isIE6) mini.repaint();
    },
    scrollIntoView: function(row, column, virtualScroll) {
        row = this.getRow(row);
        if (!row) return;
        try {

            if (column) {

                if (this._columnModel.isFrozenColumn(column)) {
                    column = null;
                }
            }

            if (column) {
                var cellEl = this._getCellEl(row, column);
                mini.scrollIntoView(cellEl, this._rowsViewEl, true);
            } else {
                if (this.isVirtualScroll()) {
                    if (virtualScroll != false) {
                        var region = this._getViewRegion();
                        var index = this.indexOf(row);




                        var offset = this._getRangeHeight(0, index);


                        this.setScrollTop(offset);

                    }
                } else {
                    var rowEl = this._getRowEl(row, 2);
                    mini.scrollIntoView(rowEl, this._rowsViewEl, false);

                    this._syncScroll();
                }
            }
        } catch (e) {}
    },


    setShowLoading: function(value) {
        this.showLoading = value;
    },
    getShowLoading: function() {
        return this.showLoading;
    },
    setEnableHotTrack: function(value) {
        this.enableHotTrack = value;
    },
    getEnableHotTrack: function() {
        return this.enableHotTrack;
    },
    setAllowHotTrackOut: function(value) {
        this.allowHotTrackOut = value;
    },
    getAllowHotTrackOut: function() {
        return this.allowHotTrackOut;
    },

    setOnlyCheckSelection: function(value) {
        this.onlyCheckSelection = value;
    },
    getOnlyCheckSelection: function() {
        return this.onlyCheckSelection;
    },
    setAllowUnselect: function(value) {
        this.allowUnselect = value;
    },
    getAllowUnselect: function() {
        return this.allowUnselect;
    },
    setAllowRowSelect: function(value) {
        this.allowRowSelect = value;
    },
    getAllowRowSelect: function() {
        return this.allowRowSelect;
    },
    setAllowCellSelect: function(value) {
        this.allowCellSelect = value;
    },
    getAllowCellSelect: function() {
        return this.allowCellSelect;
    },
    setAllowCellEdit: function(value) {
        this.allowCellEdit = value;
    },
    getAllowCellEdit: function() {
        return this.allowCellEdit;
    },
    setCellEditAction: function(value) {
        this.cellEditAction = value;
    },
    getCellEditAction: function() {
        return this.cellEditAction;
    },
    setAllowCellValid: function(value) {
        this.allowCellValid = value;
    },
    getAllowCellValid: function() {
        return this.allowCellValid;
    },
    setAllowResizeColumn: function(value) {
        this.allowResizeColumn = value;
        mini.removeClass(this.el, "mini-grid-resizeColumns-no");
        if (!value) {
            mini.addClass(this.el, "mini-grid-resizeColumns-no");
        }
    },
    getAllowResizeColumn: function() {
        return this.allowResizeColumn;
    },
    setAllowSortColumn: function(value) {
        this.allowSortColumn = value;
    },
    getAllowSortColumn: function() {
        return this.allowSortColumn;
    },
    setAllowMoveColumn: function(value) {
        this.allowMoveColumn = value;
    },
    getAllowMoveColumn: function() {
        return this.allowMoveColumn;
    },
    setShowColumnsMenu: function(value) {
        this.showColumnsMenu = value;
    },
    getShowColumnsMenu: function() {
        return this.showColumnsMenu;
    },

    setEditNextRowCell: function(value) {
        this.editNextRowCell = value;
    },
    getEditNextRowCell: function() {
        return this.editNextRowCell;
    },
    setEditNextOnEnterKey: function(value) {
        this.editNextOnEnterKey = value;
    },
    getEditNextOnEnterKey: function() {
        return this.editNextOnEnterKey;
    },
    setEditOnTabKey: function(value) {
        this.editOnTabKey = value;
    },
    getEditOnTabKey: function() {
        return this.editOnTabKey;
    },
    setCreateOnEnter: function(value) {
        this.createOnEnter = value;
    },
    getCreateOnEnter: function() {
        return this.createOnEnter;
    },



    _currentCell: null,
    _doCurrentCell: function(select) {
        if (this._currentCell) {
            var record = this._currentCell[0],
                column = this._currentCell[1];
            var cellEl = this._getCellEl(record, column);
            if (cellEl) {
                if (select) {
                    mini.addClass(cellEl, this._cellSelectedCls);
                } else {
                    mini.removeClass(cellEl, this._cellSelectedCls);
                }
            }
        }
    },
    setCurrentCell: function(cell) {
        if (this._currentCell != cell) {
            this._doCurrentCell(false);
            this._currentCell = cell;

            if (cell) {
                var row = this.getRow(cell[0]);
                var column = this.getColumn(cell[1]);
                if (row && column) {
                    this._currentCell = [row, column];
                } else {
                    this._currentCell = null;
                }
            }

            this._doCurrentCell(true);
            if (cell) {

                var ac = this._getAnchorCell(cell[0], cell[1]);
                if (!ac) {


                    if (this.isFrozen()) {

                        this.scrollIntoView(cell[0], null, false);

                    } else {

                        this.scrollIntoView(cell[0], cell[1], false);
                    }

                }
            }
            this.fire("currentcellchanged");

        }
    },
    getCurrentCell: function() {
        var cc = this._currentCell;
        if (cc) {
            if (this.indexOf(cc[0]) == -1) {
                this._currentCell = null;
                cc = null;
            }
        }
        return cc;
    },



    _editingCell: null,
    isEditingCell: function(cell) {
        return this._editingCell && this._editingCell[0] == cell[0] && this._editingCell[1] == cell[1];
    },


    beginEditCell: function(row, column) {
        function beginEdit(row, column) {

            var sss = new Date();

            row = this.getRow(row);
            column = this.getColumn(column);
            var cell = [row, column];
            if (row && column) {
                this.setCurrentCell(cell);
            }

            var cell = this.getCurrentCell();
            if (this._editingCell && cell) {
                if (this._editingCell[0] == cell[0] && this._editingCell[1] == cell[1]) return;
            }

            if (this._editingCell) this.commitEdit();

            if (cell) {
                var row = cell[0],
                    column = cell[1];
                if (column.editMode != "inline") {
                    var canEdit = this._OnCellBeginEdit(row, column, this.getCellEditor(column));



                    if (canEdit !== false) {
                        this.scrollIntoView(row, column, false);
                        this._editingCell = cell;
                        this._OnCellShowingEdit(row, column);
                    }
                }
            }


        }
        this._pushUpdateCallback(beginEdit, this, [row, column]);
    },
    cancelEdit: function() {

        if (this.allowCellEdit) {
            if (this._editingCell) {
                this._OnCellEndEdit();
            }
        } else {
            if (this.isEditing()) {
                this._allowLayout = false;
                var data = this.getDataView();
                for (var i = 0, l = data.length; i < l; i++) {
                    var row = data[i];
                    if (row._editing == true) this.cancelEditRow(i);
                }
                this._allowLayout = true;
                this.doLayout();
            }
        }
    },
    commitEdit: function() {

        if (this.allowCellEdit) {

            if (this._editingCell) {
                this._OnCellCommitEdit(this._editingCell[0], this._editingCell[1]);

                this._OnCellEndEdit();
            }
        } else {

            if (this.isEditing()) {
                this._allowLayout = false;
                var data = this.getDataView();
                for (var i = 0, l = data.length; i < l; i++) {
                    var row = data[i];
                    if (row._editing == true) this.commitEditRow(row);
                }
                this._allowLayout = true;

                this.doLayout();
            }
        }
    },

    getCellEditor: function(column, row) {

        column = this.getColumn(column);
        if (!column) return;
        if (this.allowCellEdit) {

            var editor = column.__editor;

            if (!editor) editor = mini.getAndCreate(column.editor);
            if (editor && editor != column.editor) {
                column.editor = editor;
            }
            return editor;
        } else {
            row = this.getRow(row);
            column = this.getColumn(column);
            if (!row) row = this.getEditingRow();
            if (!row || !column) return null;
            var id = this.uid + "$" + row._uid + "$" + column._id + "$editor";
            return mini.get(id);
        }
    },

    _OnCellBeginEdit: function(record, column, editor, initEditor) {

        var value = mini._getMap(column.field, record);
        var e = {
            sender: this,
            rowIndex: this.indexOf(record),
            row: record,
            record: record,
            column: column,
            field: column.field,
            editor: editor,
            value: value,
            cancel: false
        };

        this.fire("cellbeginedit", e);

        if (!mini.isNull(column.defaultValue) && (mini.isNull(e.value) || e.value === "")) {
            var defaultValue = column.defaultValue;




            var obj = mini.clone({
                d: defaultValue
            });
            e.value = obj.d;
        }

        var editor = e.editor;
        value = e.value;

        if (e.cancel) {
            return false;
        }



        if (!editor && column.editMode != "inline") return false;
        if (column.readOnly === true) return false;

        if (initEditor === false) return true;




        if (column.editMode != "inline") {

            if (mini.isNull(value)) value = "";
            if (editor.setValue) {
                editor.setValue(value);
            }
            editor.ownerRowID = record._uid;

            if (column.displayField && editor.setText) {

                var text = mini._getMap(column.displayField, record);

                if (!mini.isNull(column.defaultText) && (mini.isNull(text) || text === "")) {
                    var obj = mini.clone({
                        d: column.defaultText
                    });
                    text = obj.d;
                }

                editor.setText(text);
            }

            if (this.allowCellEdit) {
                this._editingControl = e.editor;
            }

        }

        return true;
    },
    _OnCellCommitEdit: function(record, column, value, editor) {

        var e = {
            sender: this,
            rowIndex: this.indexOf(record),
            record: record,
            row: record,
            column: column,
            field: column.field,
            editor: editor ? editor : this.getCellEditor(column),
            value: mini.isNull(value) ? "" : value,
            text: "",
            cancel: false
        };

        if (e.editor && e.editor.getValue) {
            try {
                e.editor.blur();
            } catch (ex) {

            }
            e.value = e.editor.getValue();


        }
        if (e.editor && e.editor.getText) {
            e.text = e.editor.getText();
        }






        var oldValue = mini._getMap(column.field, record),
            newValue = e.value;
        e.oldValue = oldValue;
        if (mini.isEquals(oldValue, newValue)) return e;

        this.fire("cellcommitedit", e);

        if (e.cancel == false) {

            if (this.allowCellEdit) {
                var o = {};
                o[column.field] = e.value;

                if (column.displayField) {
                    o[column.displayField] = e.text;

                }
                this.updateRow(record, o);
            }
        }
        return e;
    },
    _OnCellEndEdit: function(record, column) {
        if (!this._editingCell && !record) return;
        if (!record) record = this._editingCell[0];
        if (!column) column = this._editingCell[1];
        var value = mini._getMap(column.field, record);
        var e = {
            sender: this,
            rowIndex: this.indexOf(record),
            record: record,
            row: record,
            column: column,
            field: column.field,
            editor: this._editingControl,

            value: value
        };

        this.fire("cellendedit", e);

        if (this.allowCellEdit && e.editor) {
            var editor = e.editor;
            if (editor && editor.setIsValid) {

                editor.setIsValid(true);
            }

            if (this._editWrap) this._editWrap.style.display = 'none';
            var childNodes = this._editWrap.childNodes;
            for (var i = childNodes.length - 1; i >= 0; i--) {
                var el = childNodes[i];
                this._editWrap.removeChild(el);
            }


            if (editor && editor.hidePopup) {
                editor.hidePopup();
            }
            if (editor && editor.setValue) {
                editor.setValue("");
            }

            this._editingControl = null;
            this._editingCell = null;

            if (this.allowCellValid) {
                this.validateCell(record, column);

            }
        }
    },
    _OnCellShowingEdit: function(record, column) {

        if (!this._editingControl) return false;

        var cellBox = this.getCellBox(record, column);

        if (cellBox) {
            var viewWidth = document.body.scrollWidth;
            if (cellBox.right > viewWidth) {

                cellBox.width = viewWidth - cellBox.left;
                if (cellBox.width < 10) cellBox.width = 10;
                cellBox.right = cellBox.left + cellBox.width;
            }
        }

        var e = {
            sender: this,
            rowIndex: this.indexOf(record),
            record: record,
            row: record,
            column: column,
            field: column.field,
            cellBox: cellBox,
            editor: this._editingControl
        };

        this.fire("cellshowingedit", e);

        var editor = e.editor;
        if (editor && editor.setIsValid) {

            editor.setIsValid(true);
        }

        if (cellBox) {
            var editWrap = this._getEditWrap(cellBox, editor);
            this._editWrap.style.zIndex = mini.getMaxZIndex();


            this._setEdiorBox(editor, cellBox);

            mini.on(document, 'mousedown', this.__OnBodyMouseDown, this);

            if (column.autoShowPopup && editor.showPopup) {

                editor.showPopup();
            }

        }
        if (editor)
            if (this.navEditMode) editor.keyNavEnabled = !(column.navUpdown !== false)
    },
    _getEditingControl: function() {
        return this._editingControl;
    },
    _setEdiorBox: function(editor, cellBox) {
        if (editor.setWidth) {
            var width = cellBox.width;
            if (width < 20) width = 20;
            editor.setWidth(width);
        }

        if (editor.setHeight && editor.type == "textarea") {
            var height = cellBox.height - 1;
            if (editor.minHeight && height < editor.minHeight) height = editor.minHeight;
            editor.setHeight(height);
        }
        if (editor.setWidth) {
            var width = cellBox.width - 1;
            if (editor.minWidth && width < editor.minWidth) width = editor.minWidth;
            editor.setWidth(width);
        }
        var box = cellBox;

        var editorHeight = editor.getHeight();
        var y = box.y;
        if (editorHeight < box.height) {
            y = Math.round(box.y + box.height / 2 - editorHeight / 2);
        }
        mini.setXY(this._editWrap, box.x, y);
        mini.setWidth(this._editWrap, box.width);

        var viewWidth = document.body.scrollWidth;
        if (box.x > viewWidth) mini.setX(this._editWrap, -1000);

    },
    __OnBodyMouseDown: function(e) {
        if (this._editingControl) {

            var cell = this._getCellByEvent(e);

            if (this._editingCell && cell) {
                if (this._editingCell[0] == cell.record && this._editingCell[1] == cell.column) {
                    return false;
                }
            }

            var within = false;
            if (this._editingControl.within) within = this._editingControl.within(e);
            else within = mini.isAncestor(this._editWrap, e.target);

            if (within == false) {
                var me = this;
                if (mini.isAncestor(this._bodyEl, e.target) == false) {

                    setTimeout(function() {

                        me.commitEdit();

                    }, 0);
                } else {
                    // case bug
                    var cell1 = me._editingCell;
                    setTimeout(function() {
                        var cell2 = me._editingCell;
                        if (cell1 == cell2) {
                            me.commitEdit();
                        }
                    }, 0);
                }
                mini.un(document, 'mousedown', this.__OnBodyMouseDown, this);
            }
        }
    },
    getEditWrap: function() {
        return this._editWrap;
    },
    _getEditWrap: function(box, editor) {
        if (!this._editWrap) {
            this._editWrap = mini.append(document.body, '<div class="mini-grid-editwrap" style="position:absolute;"></div>');
            mini.on(this._editWrap, "keydown", this.___OnEditControlKeyDown, this);
        }
        this._editWrap.style.zIndex = 1000000000;
        this._editWrap.style.display = 'block';

        if (editor.render) {
            editor.render(this._editWrap);
            setTimeout(function() {
                editor.focus();
                if (editor.selectText) {
                    setTimeout(function() {
                        editor.selectText();
                    }, 11);
                }
            }, 50);
            if (editor.setVisible) editor.setVisible(true);
        } else if (editor.el) {
            this._editWrap.appendChild(editor.el);
            setTimeout(function() {
                try {
                    editor.el.focus();
                } catch (e) {}
            }, 50);
        }



        return this._editWrap;
    },
    ___OnEditControlKeyDown: function(e) {

        var editor = this._editingControl;

        if (e.keyCode == 13 && editor && editor.type == "textarea") {

            return;
        }






        if (e.keyCode == 13) {
            var F = new Date();
            if (this._enterTimestamp && (F - this._enterTimestamp < 80)) return;
            this._enterTimestamp = F;
            var cell = this._editingCell;
            if (cell && cell[1] && cell[1].enterCommit === false) return;


            this.commitEdit();
            this.focus();

            if (this.editNextOnEnterKey) {
                this.fire("celleditenter", {
                    record: cell[0],
                    column: cell[1]
                })

                this._beginEditNextCell(e.shiftKey == false);
            } else {


            }
        } else if (e.keyCode == 27) {

            this.cancelEdit();

            this.focus();
        } else if (e.keyCode == 9) {
            this.commitEdit();
            if (this.editOnTabKey) {
                e.preventDefault();
                this.commitEdit();
                this._beginEditNextCell(e.shiftKey == false, true);
            }
        }
	if (this.navEditMode) {
            var G = this._editingCell;
            if (G) {
                var C = G[1];
                if (C && C.navUpdown === false)
                    if (editor && (e.keyCode == 38 || e.keyCode == 40)) return
            }
            switch (e.keyCode) {
                case 37:
                    this.focus();
                    e.preventDefault();
                    this.commitEdit();
                    this._beginEditNextCell(e.shiftKey !== false);
                    break;
                case 39:
                    this.focus();
                    this.commitEdit();
                    if (this.editOnTabKey) {
                        e.preventDefault();
                        this.commitEdit();
                        this._beginEditNextCell(e.shiftKey == false, true)
                    }
                    break;
                case 38:
                    this.focus();
                    e.preventDefault();
                    G = this._editingCell;
                    this.commitEdit();
                    var B = G[0],
                        C = G[1];
                    if (B) {
                        var E = this.indexOf(B);
                        if (E > 0) E -= 1
                    } else return;
                    var H = this.getRow(E),
                        _ = [H, C];
                    this.setCurrentCell(_);
                    this.beginEditCell();
                    break;
                case 40:
                    this.focus();
                    e.preventDefault();
                    G = this._editingCell;
                    this.commitEdit();
                    B = G[0], C = G[1];
                    if (B) {
                        var E = this.indexOf(B),
                            D = this.getData().length;
                        if (E < D - 1) E += 1
                    } else return;
                    H = this.getRow(E), _ = [H, C];
                    this.setCurrentCell(_);
                    this.beginEditCell();
                    break
            }
        }

    },

    editNextRowCell: false,
    editNextOnEnterKey: false,
    editOnTabKey: true,
    createOnEnter: false,


    skipReadOnlyCell: false,
    setNavEditMode: function($) {
        this.navEditMode = $
    },
    getNavEditMode: function() {
        return this.navEditMode
    },
    setSkipReadOnlyCell: function(value) {
        this.skipReadOnlyCell = value;
    },
    getSkipReadOnlyCell: function() {
        return this.skipReadOnlyCell;
    },

    isCellCanEdit: function(row, column) {
        var canEdit = this._OnCellBeginEdit(row, column, this.getCellEditor(column), false);
        return canEdit;
    },

    _beginEditNextCell: function(next, tab) {
        var grid = this;
        var currentCell = this.getCurrentCell();
        if (!currentCell) return;
        this.focus();
        var columns = grid.getVisibleColumns();

        var column = currentCell ? currentCell[1] : null,
            record = currentCell ? currentCell[0] : null;



        function getAt(index) {
            return grid.getVisibleRows()[index];
        }

        function indexOf(row) {
            return grid.getVisibleRows().indexOf(row);
        }

        function getCount() {
            return grid.getVisibleRows().length;
        }

        var columnIndex = columns.indexOf(column);
        var rowIndex = indexOf(record);
        var count = getCount();



        if (next === false) {
            if (this.skipReadOnlyCell) {
                var me = this;

                var nextColumn = getPrevCanEditCell();

                function getPrevCanEditCell() {
                    var l = 0;
                    var i = (columnIndex - 1 === 0) ? columns.length : columnIndex - 1;

                    for (; i > l; i--) {
                        column = columns[i];

                        var canEdit = me.isCellCanEdit(record, column);
                        if (canEdit) {
                            return column;
                        }
                    }
                }

                if (!nextColumn || columnIndex == 0) {
                    columnIndex = columns.length;
                    var nextRowColumn = getPrevCanEditCell();
                    setLastRow();
                }
            } else {
                columnIndex -= 1;
                column = columns[columnIndex];
                if (!column) {
                    column = columns[columns.length - 1];
                    setLastRow();
                }
            }

            function setLastRow() {
                record = getAt(rowIndex - 1);
                if (!record) {

                    return;
                }
            }

        } else {

            if (this.editNextRowCell && !tab) {
                if (rowIndex + 1 < count) {
                    record = getAt(rowIndex + 1);
                }
            } else {

                function setNextRow() {
                    record = grid.getAt(rowIndex + 1);
                    if (!record) {
                        if (this.createOnEnter) {
                            record = {};

                            this.addRow(record);
                        } else {
                            return;
                        }
                    }
                }

                function getNextCanEditCell() {

                    var i = (columnIndex + 1 == l) ? 0 : (columnIndex + 1);

                    for (; i < l; i++) {
                        column = columns[i];

                        var canEdit = me.isCellCanEdit(record, column);
                        if (canEdit) {
                            return column;
                        }
                    }
                }

                if (this.skipReadOnlyCell) {
                    var me = this;
                    var l = columns.length;

                    var nextColumn = getNextCanEditCell();

                    if (!nextColumn || columnIndex + 1 == l) {
                        columnIndex = 0;
                        var nextRowColumn = getNextCanEditCell();
                        setNextRow();
                    }
                } else {
                    columnIndex += 1;
                    column = columns[columnIndex];
                    if (!column) {
                        column = columns[0];
                        setNextRow();
                    }
                }


            }
        }









        var currentCell = [record, column];

        grid.setCurrentCell(currentCell);

        if (!grid.onlyCheckSelection && grid.allowRowSelect) {
            if (grid.getCurrent() != record) {
                grid.deselectAll();
                grid.setCurrent(record);
            }
        }
        grid.scrollIntoView(record, column, false);

        if (grid.isReadOnly() || column.readOnly) return false;
        grid.beginEditCell();
    },



    getEditorOwnerRow: function(editor) {
        var uid = editor.ownerRowID;
        return this.getRowByUID(uid);
    },

    beginEditRow: function(row) {
        if (this.allowCellEdit) return;

        function beginEdit(row) {
            var sss = new Date();

            row = this.getRow(row);
            if (!row) return;
            var rowEl = this._getRowEl(row, 2);
            if (!rowEl) return;


            row._editing = true;

            this._doUpdateRowEl(row);





            var rowEl = this._getRowEl(row, 2);
            mini.addClass(rowEl, "mini-grid-rowEdit");

            var columns = this.getVisibleColumns();
            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];
                var value = row[column.field];



                var cellEl = this._getCellEl(row, column);
                if (!cellEl) continue;

                if (typeof column.editor == "string") {
                    column.editor = eval('(' + column.editor + ')');
                }

                var editorConfig = mini.copyTo({}, column.editor);

                editorConfig.id = this.uid + "$" + row._uid + "$" + column._id + "$editor";
                var editor = mini.create(editorConfig);

                if (this._OnCellBeginEdit(row, column, editor)) {
                    if (editor) {
                        mini.addClass(cellEl, "mini-grid-cellEdit");
                        cellEl.innerHTML = "";
                        cellEl.appendChild(editor.el);
                        mini.addClass(editor.el, "mini-grid-editor");
                    }
                }
            }

            this.doLayout();
        }
        this._pushUpdateCallback(beginEdit, this, [row]);


    },
    cancelEditRow: function(row) {
        if (this.allowCellEdit) return;

        row = this.getRow(row);
        if (!row || !row._editing) return;
        delete row._editing;

        var rowEl = this._getRowEl(row);

        var columns = this.getVisibleColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];

            var cellId = this._createCellId(row, columns[i]);
            var cellEl = document.getElementById(cellId);
            if (!cellEl) continue;

            var editorEl = cellEl.firstChild;
            var editor = mini.get(editorEl);
            if (!editor) continue;

            editor.destroy();
        }

        this._doUpdateRowEl(row);

        this.doLayout();

    },
    commitEditRow: function(row) {
        if (this.allowCellEdit) return;

        row = this.getRow(row);
        if (!row || !row._editing) return;

        var rowData = this.getEditRowData(row, false, false);

        this._canUpdateRowEl = false;
        this.updateRow(row, rowData);
        this._canUpdateRowEl = true;

        this.cancelEditRow(row);
    },
    commitEditRowWidthData: function(row, data, edit){
    	var me = this;
        if (this.allowCellEdit) return;
        row = this.getRow(row);
        if (!row || !row._editing) return;

        var rowData = this.getEditRowData(row, false, false);
        this._canUpdateRowEl = false;
        this.updateRow(row, $.extend(rowData, data));
        this._canUpdateRowEl = true;
        this.cancelEditRow(row);
        if(!this.allowCellEdit && edit){
        	setTimeout(function(){
        		me.beginEditRow(row);
        	}, 30);
        }
    },
    isEditing: function() {
        var data = this.getDataView();
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            if (row._editing == true) return true;
        }
        return false;
    },
    isEditingRow: function(row) {
        row = this.getRow(row);
        if (!row) return false;
        return !!row._editing;
    },
    isNewRow: function(row) {
        return row._state == "added";
    },
    getEditingRows: function() {
        var rows = [];
        var data = this.getDataView();
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            if (row._editing == true) rows.push(row);
        }
        return rows;
    },
    getEditingRow: function() {
        var rows = this.getEditingRows();
        return rows[0];
    },
    getEditData: function(all) {
        var data = [];
        var dataView = this.getDataView();
        for (var i = 0, l = dataView.length; i < l; i++) {
            var row = dataView[i];
            if (row._editing == true) {
                var rowData = this.getEditRowData(i, all);
                data.push(rowData);
            }
        }
        return data;
    },
    getEditRowData: function(row, all, deep) {
        row = this.getRow(row);

        if (!row || !row._editing) return null;

        var idField = this.getIdField();
        var pidField = this.getParentField ? this.getParentField() : null;

        var rowData = {};

        var columns = this.getVisibleColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var cellId = this._createCellId(row, columns[i]);
            var cellEl = document.getElementById(cellId);

            if (!cellEl) continue;

            var e = null;
            if (column.type == "checkboxcolumn" || column.type == "radiobuttoncolumn") {

                var checked = column.isChecked(row, column);
                var value = checked ? column.trueValue : column.falseValue;
                e = this._OnCellCommitEdit(row, column, value);




            } else {
                var editorEl = cellEl.firstChild;
                var editor = mini.get(editorEl);
                if (!editor) continue;
                e = this._OnCellCommitEdit(row, column, null, editor);
            }
            if (deep !== false) {
                mini._setMap(column.field, e.value, rowData);
                if (column.displayField) {
                    mini._setMap(column.displayField, e.text, rowData);
                }
            } else {
                rowData[column.field] = e.value;
                if (column.displayField) {
                    rowData[column.displayField] = e.text;
                }
            }
        }

        rowData[idField] = row[idField];
        if (pidField) {
            rowData[pidField] = row[pidField];
        }

        if (all) {
            var o = mini.copyTo({}, row);
            rowData = mini.copyTo(o, rowData);
        }

        return rowData;
    },
    collapseGroups: function() {
        if (!this.isGrouping()) return;
        this._allowLayout = false;
        var groups = this.getGroupingView();
        for (var i = 0, l = groups.length; i < l; i++) {
            var g = groups[i];
            this.collapseRowGroup(g);
        }
        this._allowLayout = true;
        this.doLayout();
    },
    expandGroups: function() {
        if (!this.isGrouping()) return;
        this._allowLayout = false;
        var groups = this.getGroupingView();
        for (var i = 0, l = groups.length; i < l; i++) {
            var g = groups[i];
            this.expandRowGroup(g);
        }
        this._allowLayout = true;
        this.doLayout();
    },
    toggleRowGroup: function(group) {
        if (group.expanded) {
            this.collapseRowGroup(group);
        } else {
            this.expandRowGroup(group);
        }
    },
    collapseRowGroup: function(group) {

        group = this.getRowGroup(group);
        if (!group) return;
        group.expanded = false;

        var g = this._getRowGroupEl(group, 1);
        var rows = this._getRowGroupRowsEl(group, 1);
        var g2 = this._getRowGroupEl(group, 2);
        var rows2 = this._getRowGroupRowsEl(group, 2);

        if (rows) rows.style.display = "none";
        if (rows2) rows2.style.display = "none";

        if (g) mini.addClass(g, "mini-grid-group-collapse");
        if (g2) mini.addClass(g2, "mini-grid-group-collapse");
        this.doLayout();
    },
    expandRowGroup: function(group) {
        group = this.getRowGroup(group);
        if (!group) return;
        group.expanded = true;

        var g = this._getRowGroupEl(group, 1);
        var rows = this._getRowGroupRowsEl(group, 1);
        var g2 = this._getRowGroupEl(group, 2);
        var rows2 = this._getRowGroupRowsEl(group, 2);

        if (rows) rows.style.display = "";
        if (rows2) rows2.style.display = "";

        if (g) mini.removeClass(g, "mini-grid-group-collapse");
        if (g2) mini.removeClass(g2, "mini-grid-group-collapse");
        this.doLayout();
    },
    showAllRowDetail: function() {
        this._allowLayout = false;
        var data = this.getDataView();
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            this.showRowDetail(row);
        }
        this._allowLayout = true;
        this.doLayout();
    },
    hideAllRowDetail: function() {
        this._allowLayout = false;
        var data = this.getDataView();
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            this.hideRowDetail(row);
        }
        this._allowLayout = true;
        this.doLayout();
    },
    isShowRowDetail: function(row) {
        row = typeof row == "object" ? row : this.getRow(row);
        if (!row) return false;
        return !!row._showDetail;
    },
    toggleRowDetail: function(row) {
        row = this.getRow(row);
        if (!row) return;
        if (grid.isShowRowDetail(row)) {
            grid.hideRowDetail(row);
        } else {
            grid.showRowDetail(row);
        }
    },
    showRowDetail: function(row) {
        row = this.getRow(row);
        if (!row || row._showDetail == true) return;
        row._showDetail = true;


        var tr = this._getRowDetailEl(row, 1, true);
        var tr2 = this._getRowDetailEl(row, 2, true);
        if (tr) tr.style.display = "";
        if (tr2) tr2.style.display = "";

        var rowEl = this._getRowEl(row, 1);
        var rowEl2 = this._getRowEl(row, 2);
        if (rowEl) mini.addClass(rowEl, "mini-grid-expandRow");
        if (rowEl2) mini.addClass(rowEl2, "mini-grid-expandRow");




        this.fire("showrowdetail", {
            record: row
        });

        var self = this;
        if (this.isFrozen()) {
            setTimeout(function() {
                self.syncRowDetail(row);
            }, 1);



        }

        this.doLayout();
    },
    hideRowDetail: function(row) {
        row = this.getRow(row);
        if (!row || row._showDetail !== true) return;
        row._showDetail = false;

        var tr = this._getRowDetailEl(row, 1);
        var tr2 = this._getRowDetailEl(row, 2);
        if (tr) tr.style.display = "none";
        if (tr2) tr2.style.display = "none";

        var rowEl = this._getRowEl(row, 1);
        var rowEl2 = this._getRowEl(row, 2);
        if (rowEl) mini.removeClass(rowEl, "mini-grid-expandRow");
        if (rowEl2) mini.removeClass(rowEl2, "mini-grid-expandRow");

        this.fire("hiderowdetail", {
            record: row
        });

        this.doLayout();
    },
    _getRowDetailEl: function(row, viewIndex, autoCreate) {
        row = this.getRow(row);
        if (!row) return null;
        var id = this._createRowDetailId(row, viewIndex);
        var el = document.getElementById(id);
        if (!el && autoCreate === true) {
            el = this._createRowDetail(row, viewIndex);
        }
        return el;
    },
    _createRowDetail: function(row, viewIndex) {
        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();
        var colspan = columns1.length;
        if (viewIndex == 2) {
            colspan = columns2.length;
        }
        var el = this._getRowEl(row, viewIndex);
        if (!el) return null;
        var id = this._createRowDetailId(row, viewIndex);

        var s = '<tr id="' + id + '" class="mini-grid-detailRow"><td style="width:0"></td><td class="mini-grid-detailCell" colspan="' + colspan + '"></td></tr>';
        jQuery(el).after(s);
        return document.getElementById(id);
    },
    _createRowDetailId: function(row, viewIndex) {
        return this._id + "$detail" + viewIndex + "$" + row._id;
    },
    getRowDetailCellEl: function(row, viewIndex) {
        if (!viewIndex) viewIndex = 2;
        var el = this._getRowDetailEl(row, viewIndex);
        if (el) return el.cells[1];
    },
    autoHideRowDetail: true,
    setAutoHideRowDetail: function(value) {
        this.autoHideRowDetail = value;
    },
    getAutoHideRowDetail: function() {
        return this.autoHideRowDetail;
    },



    mergeColumns: function(columns) {
        if (columns && mini.isArray(columns) == false) columns = [columns];

        var grid = this;
        var bottomColumns = grid.getVisibleColumns();
        if (!columns) columns = bottomColumns;
        var data = grid.getDataView();
        data.push({});

        var __cells = [];

        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            column = grid.getColumn(column);
            if (!column) continue;
            var cells = margeCells(column);
            __cells.addRange(cells);
        }

        function margeCells(column) {
            if (!column.field) return;
            var cells = [];
            var rowIndex = -1,
                rowSpan = 1,
                columnIndex = bottomColumns.indexOf(column);
            var cellValue = null;
            for (var i = 0, l = data.length; i < l; i++) {
                var row = data[i];

                var value = mini._getMap(column.field, row);

                if (rowIndex == -1 || !mini.isEquals(value, cellValue)) {
                    if (rowSpan > 1) {
                        var cell = {
                            rowIndex: rowIndex,
                            columnIndex: columnIndex,
                            rowSpan: rowSpan,
                            colSpan: 1
                        };
                        cells.push(cell);
                    }
                    rowIndex = i;
                    rowSpan = 1;
                    cellValue = value;
                } else {
                    rowSpan++;
                }
            }
            return cells;
        }

        grid.mergeCells(__cells);
    },
    mergeColumnsByField: function(columns, filed) {
        if (columns && mini.isArray(columns) == false) columns = [columns];
        var grid = this;
        var bottomColumns = grid.getVisibleColumns();
        if (!columns) columns = bottomColumns;
        var data = grid.getDataView();
        data.push({});

        var __cells = [];

        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            column = grid.getColumn(column);
            if (!column) continue;
            var cells = margeCells(column, filed);
            __cells.addRange(cells);
        }

        function margeCells(column, field) {
            if (!column.field) return;
            var cells = [];
            var rowIndex = -1,
                rowSpan = 1,
                columnIndex = bottomColumns.indexOf(column);
            var cellValue = null;
            for (var i = 0, l = data.length; i < l; i++) {
                var row = data[i];

                var value = mini._getMap(field, row);

                if (rowIndex == -1 || !mini.isEquals(value, cellValue)) {
                    if (rowSpan > 1) {
                        var cell = {
                            rowIndex: rowIndex,
                            columnIndex: columnIndex,
                            rowSpan: rowSpan,
                            colSpan: 1
                        };
                        cells.push(cell);
                    }
                    rowIndex = i;
                    rowSpan = 1;
                    cellValue = value;
                } else {
                    rowSpan++;
                }
            }
            return cells;
        }

        grid.mergeCells(__cells);
    },
    mergeCells: function(cells) {
        if (!mini.isArray(cells)) return;
        this._mergedCells = cells;

        var _mergedCellMaps = this._mergedCellMaps = {};

        function doMargedCellMaps(rowIndex, columnIndex, rowSpan, colSpan, cell) {
            for (var i = rowIndex, l = rowIndex + rowSpan; i < l; i++) {
                for (var j = columnIndex, k = columnIndex + colSpan; j < k; j++) {
                    if (i == rowIndex && j == columnIndex) {
                        _mergedCellMaps[i + ":" + j] = cell;
                    } else {
                        _mergedCellMaps[i + ":" + j] = true;
                    }
                }
            }
        }
        var cells = this._mergedCells;
        if (cells) {
            for (var i = 0, l = cells.length; i < l; i++) {
                var cell = cells[i];
                if (!cell.rowSpan) cell.rowSpan = 1;
                if (!cell.colSpan) cell.colSpan = 1;
                doMargedCellMaps(cell.rowIndex, cell.columnIndex, cell.rowSpan, cell.colSpan, cell);
            }
        }

        this.deferUpdate();
    },
    margeCells: function(cells) {
        this.mergeCells(cells);
    },
    _isCellVisible: function(rowIndex, columnIndex) {
        if (!this._mergedCellMaps) return true;
        var ret = this._mergedCellMaps[rowIndex + ":" + columnIndex];
        return !(ret === true);
    },
    _getAnchorCell: function(row, column) {
        if (!this._mergedCellMaps) return null;
        var rowIndex = this.indexOf(row),
            columnIndex = this.getBottomColumns().indexOf(column);
        return this._mergedCellMaps[rowIndex + ":" + columnIndex];
    },









    _getCellEls: function(rowIndex, columnIndex, rowSpan, colSpan) {
        var cells = [];
        if (!mini.isNumber(rowIndex)) return [];
        if (!mini.isNumber(columnIndex)) return [];
        var columns = this.getVisibleColumns();
        var data = this.getDataView();

        for (var i = rowIndex, l = rowIndex + rowSpan; i < l; i++) {
            for (var j = columnIndex, k = columnIndex + colSpan; j < k; j++) {
                var cell = this._getCellEl(i, j);
                if (cell) cells.push(cell);
            }
        }
        return cells;
    },



    _getDragData: function() {
        var data = this.getSelecteds().clone();
        var grid = this;



        mini.sort(data, function(a, b) {
            var index1 = grid.indexOf(a);
            var index2 = grid.indexOf(b);
            if (index1 > index2) return 1;
            if (index1 < index2) return -1;
            return 0;
        }, this);

        return data;
    },
    _getDragText: function(dragNodes) {
        return "Records " + dragNodes.length;
    },
    allowDrag: false,
    allowDrop: false,
    allowLeafDropIn: false,
    setAllowLeafDropIn: function(value) {
        this.allowLeafDropIn = value;
    },
    getAllowLeafDropIn: function() {
        return this.allowLeafDropIn;
    },
    setAllowDrag: function(value) {
        this.allowDrag = value;
    },
    getAllowDrag: function() {
        return this.allowDrag;
    },
    setAllowDrop: function(value) {
        this.allowDrop = value;
    },
    getAllowDrop: function() {
        return this.allowDrop;
    },
    isAllowDrag: function(node, column) {

        if (this.isReadOnly() || this.enabled == false) return false;
        if (!this.allowDrag || !column.allowDrag) return false;
        if (node.allowDrag === false) return false;
        return true;


    },
    _OnDragStart: function(node, column) {
        var e = {
            node: node,
            nodes: this._getDragData(),
            column: column,
            cancel: false
        };
        e.record = e.node;
        e.records = e.nodes;
        e.dragText = this._getDragText(e.nodes);

        this.fire("dragstart", e);
        return e;
    },
    _OnGiveFeedback: function(effect, dragNodes, dropNode, from) {
        var e = {};
        e.from = from;

        e.effect = effect;
        e.nodes = dragNodes;
        e.node = e.nodes[0];
        e.targetNode = dropNode;

        e.dragNodes = dragNodes;
        e.dragNode = e.dragNodes[0];
        e.dropNode = e.targetNode;
        e.dragAction = e.action;

        this.fire("givefeedback", e);
        return e;
    },
    _OnDragDrop: function(dragNodes, dropNode, dragAction) {
        dragNodes = dragNodes.clone();
        var e = {
            dragNodes: dragNodes,
            targetNode: dropNode,
            action: dragAction,
            cancel: false
        };

        e.dragNode = e.dragNodes[0];
        e.dropNode = e.targetNode;
        e.dragAction = e.action;

        this.fire("beforedrop", e);
        this.fire("dragdrop", e);
        return e;
    },

    moveUp: function(items) {
        if (!mini.isArray(items)) return;

        var me = this;
        items = items.sort(function(a, b) {
            var i1 = me.indexOf(a);
            var i2 = me.indexOf(b);
            if (i1 > i2) return 1;
            return -1;
        });
        for (var i = 0, l = items.length; i < l; i++) {
            var item = items[i];
            var index = this.indexOf(item);
            this.moveRow(item, index - 1);
        }
    },
    moveDown: function(items) {
        if (!mini.isArray(items)) return;

        var me = this;
        items = items.sort(function(a, b) {
            var i1 = me.indexOf(a);
            var i2 = me.indexOf(b);
            if (i1 > i2) return 1;
            return -1;
        });
        items.reverse();
        for (var i = 0, l = items.length; i < l; i++) {
            var item = items[i];
            var index = this.indexOf(item);
            this.moveRow(item, index + 2);
        }
    },



    pageSize: 20,
    pageIndex: 0,
    totalCount: 0,
    totalPage: 0,

    sortField: "",
    sortOrder: "",
    url: "",

    setAjaxAsync: function(value) {
        this._dataSource.ajaxAsync = value;
        this.ajaxAsync = value;
    },
    getAjaxAsync: function() {
        return this._dataSource.ajaxAsync;
    },
    setAjaxMethod: function(value) {
        this._dataSource.ajaxMethod = value;
        this.ajaxMethod = value;
    },
    getAjaxMethod: function() {
        return this._dataSource.ajaxMethod;
    },
    setAjaxType: function(value) {
        this._dataSource.ajaxType = value;
        this.ajaxType = value;
    },
    getAjaxType: function() {
        return this._dataSource.ajaxType;
    },
    setAjaxOptions: function(value) {
        this._dataSource.setAjaxOptions(value);
    },
    getAjaxOptions: function() {
        return this._dataSource.getAjaxOptions();
    },
    setAutoLoad: function(value) {
        this._dataSource.setAutoLoad(value);
    },
    getAutoLoad: function() {
        return this._dataSource.getAutoLoad();
    },
    setUrl: function(value) {
        this._dataSource.setUrl(value);
        this.url = value;
    },
    getUrl: function() {
        return this._dataSource.getUrl();
    },
    load: function(params, success, error, complete) {
        this._dataSource.load(params, success, error, complete);
    },
    reload: function(success, error, complete) {
        this.accept();
        this._dataSource.reload(success, error, complete);
    },
    gotoPage: function(index, size) {
        this._dataSource.gotoPage(index, size);
    },
    sortBy: function(sortField, sortOrder) {
        if (!sortField) return null;
        var source = this._dataSource;
        this.sortField = source.sortField = sortField;
        this.sortOrder = source.sortOrder = sortOrder;

        if (this._dataSource.sortMode == "server") {
            this._dataSource.sortBy(sortField, sortOrder);
        } else {
            var dataType = this._columnModel._getDataTypeByField(sortField);
            this._dataSource._doClientSortField(sortField, sortOrder, dataType);
        }
    },


    showCellTip: true,

    setShowCellTip: function(value) {
        this.showCellTip = value
    },
    getShowCellTip: function() {
        return this.showCellTip;
    },

    setCheckSelectOnLoad: function(value) {
        this._dataSource.setCheckSelectOnLoad(value);
        this.checkSelectOnLoad = value;
    },
    getCheckSelectOnLoad: function() {
        return this._dataSource.getCheckSelectOnLoad();
    },
    setSelectOnLoad: function(value) {
        this._dataSource.setSelectOnLoad(value);
        this.selectOnLoad = value;
    },
    getSelectOnLoad: function() {
        return this._dataSource.getSelectOnLoad();
    },
    setSortMode: function(value) {
        this._dataSource.setSortMode(value);
        this.sortMode = value;
    },
    getSortMode: function() {
        return this._dataSource.getSortMode();
    },
    setPageIndex: function(value) {
        this._dataSource.setPageIndex(value);
        this.pageIndex = value;
    },
    getPageIndex: function() {
        return this._dataSource.getPageIndex();
    },
    setPageSize: function(value) {
        this._dataSource.setPageSize(value);
        this._virtualRows = value;
        this.pageSize = value;
    },
    getPageSize: function() {
        return this._dataSource.getPageSize();
    },
    setPageInfoText: function(value) {
        this._dataSource.setPageInfoText(value);
        this.pageInfoText = value;
    },
    getPageInfoText: function() {
        return this._dataSource.getPageInfoText();
    },
    setTotalCount: function(value) {
        this._dataSource.setTotalCount(value);
        this.totalCount = value;
    },
    getTotalCount: function() {
        return this._dataSource.getTotalCount();
    },
    getTotalPage: function() {
        return this._dataSource.getTotalPage();
    },

    setSortField: function(value) {
        this._dataSource.setSortField(value);
        this.sortField = value;
    },
    getSortField: function() {
        return this._dataSource.sortField;
    },
    setSortOrder: function(value) {
        this._dataSource.setSortOrder(value);
        this.sortOrder = value;
    },
    getSortOrder: function() {
        return this._dataSource.sortOrder;
    },

    setPageIndexField: function(value) {
        this._dataSource.pageIndexField = value;
        this.pageIndexField = value;
    },
    getPageIndexField: function() {
        return this._dataSource.pageIndexField;
    },
    setPageSizeField: function(value) {
        this._dataSource.pageSizeField = value;
        this.pageSizeField = value;
    },
    getPageSizeField: function() {
        return this._dataSource.pageSizeField;
    },

    setStartField: function(value) {
        this._dataSource.startField = value;
        this.startField = value;
    },
    getStartField: function() {
        return this._dataSource.startField;
    },
    setLimitField: function(value) {
        this._dataSource.limitField = value;
        this.limitField = value;
    },
    getLimitField: function() {
        return this._dataSource.limitField;
    },

    setSortFieldField: function(value) {
        this._dataSource.sortFieldField = value;
        this.sortFieldField = value;
    },
    getSortFieldField: function() {
        return this._dataSource.sortFieldField;
    },
    setSortOrderField: function(value) {
        this._dataSource.sortOrderField = value;
        this.sortOrderField = value;
    },
    getSortOrderField: function() {
        return this._dataSource.sortOrderField;
    },
    setTotalField: function(value) {
        this._dataSource.totalField = value;
        this.totalField = value;
    },
    getTotalField: function() {
        return this._dataSource.totalField;
    },
    setDataField: function(value) {
        this._dataSource.dataField = value;
        this.dataField = value;
    },
    getDataField: function() {
        return this._dataSource.dataField;
    },

    setErrorField: function(value) {
        this._dataSource.errorField = value;
        this.errorField = value;
    },
    getErrorField: function() {
        return this._dataSource.errorField;
    },
    setErrorMsgField: function(value) {
        this._dataSource.errorMsgField = value;
        this.errorMsgField = value;
    },
    getErrorMsgField: function() {
        return this._dataSource.errorMsgField;
    },
    setStackTraceField: function(value) {
        this._dataSource.stackTraceField = value;
        this.stackTraceField = value;
    },
    getStackTraceField: function() {
        return this._dataSource.stackTraceField;
    },

    setPageSizeWidth: function(value) {
        this._bottomPager.setPageSizeWidth(value);
    },
    getPageSizeWidth: function() {
        return this._bottomPager.getPageSizeWidth();
    },
    getBottomPager: function() {
        return this._bottomPager
    },
    sizeText: "",
    setSizeText: function(value) {
        this._bottomPager.sizeText = value;
    },
    getSizeText: function() {
        return this.sizeText;
    },

    showPagerButtonText: false,
    setShowPagerButtonText: function(value) {
        this._bottomPager.setShowButtonText(value);
    },
    getShowPagerButtonText: function() {
        return this.showPagerButtonText;
    },
    showPagerButtonIcon: false,
    setShowPagerButtonIcon: function(value) {
        this._bottomPager.setShowButtonIcon(value);
    },
    getShowPagerButtonIcon: function() {
        return this.showPagerButtonIcon;
    },
    setShowReloadButton: function(value) {
        this._bottomPager.setShowReloadButton(value);
    },
    getShowReloadButton: function() {
        return this._bottomPager.getShowReloadButton();
    },
    setShowPageInfo: function(value) {
        this._bottomPager.setShowPageInfo(value);
    },
    getShowPageInfo: function() {
        return this._bottomPager.getShowPageInfo();
    },
    setSizeList: function(value) {
        if (!mini.isArray(value)) return;
        this._bottomPager.setSizeList(value);
    },
    getSizeList: function() {
        return this._bottomPager.getSizeList();
    },
    setShowPageSize: function(value) {
        this._bottomPager.setShowPageSize(value);
    },
    getShowPageSize: function() {
        return this._bottomPager.getShowPageSize();
    },
    setShowPageIndex: function(value) {
        this.showPageIndex = value;
        this._bottomPager.setShowPageIndex(value);
    },
    getShowPageIndex: function() {
        return this._bottomPager.getShowPageIndex();
    },
    setShowTotalCount: function(value) {
        this._bottomPager.setShowTotalCount(value);
    },
    getShowTotalCount: function() {
        return this._bottomPager.getShowTotalCount();
    },
    setPagerStyle: function(value) {
        this.pagerStyle = value;
        mini.setStyle(this._bottomPager.el, value);
    },
    setPagerCls: function(value) {
        this.pagerCls = value;
        mini.addClass(this._bottomPager.el, value);
    },
    setDropAction: function(value) {
        this.dropAction = value;
    },
    getDropAction: function() {
        return this.dropAction;
    },

    groupTitleCollapsible: true,
    setGroupTitleCollapsible: function(value) {
        this.groupTitleCollapsible = value;
    },
    getGroupTitleCollapsible: function() {
        return this.groupTitleCollapsible;
    },
    setAllowEmptyContextMenu: function($) {
        this.allowEmptyContextMenu = $
    },
    getAllowEmptyContextMenu: function() {
        return this.allowEmptyContextMenu
    },
    _beforeOpenContentMenu: function(menu, e) {

        var can = mini.isAncestor(this._bodyEl, e.htmlEvent.target);
        if (can) {
            menu.fire("BeforeOpen", e);
        } else {
            e.cancel = true;
        }
    },
    __OnHtmlContextMenu: function(e) {
        var ev = {
            popupEl: this.el,
            htmlEvent: e,
            cancel: false
        };

        if (mini.isAncestor(this._columnsEl, e.target)) {
            if (this.headerContextMenu) {
                this.headerContextMenu.fire("BeforeOpen", ev);
                if (ev.cancel == true) return;
                this.headerContextMenu.fire("opening", ev);
                if (ev.cancel == true) return;
                this.headerContextMenu.showAtPos(e.pageX, e.pageY);
                this.headerContextMenu.fire("Open", ev);
            }
        } else {

            var d = mini.findParent(e.target, "mini-grid-detailRow");
            if (d && mini.isAncestor(this.el, d)) return;

            var f = mini.findParent(e.target, "mini-tree-nodeshow");

            if (!f && this.type == "tree"  && !this.allowEmptyContextMenu) return;
	    if (!this.allowEmptyContextMenu && !mini.findParent(e.target, "mini-grid-table")) return;
            if (mini.findParent(e.target, "mini-grid-filterRow")) return;
            if (mini.findParent(e.target, "mini-grid-summaryRow")) return;
            if (this.contextMenu) {
                this._beforeOpenContentMenu(this.contextMenu, ev);
                if (ev.cancel == true) return;
                this.contextMenu.fire("opening", ev);
                if (ev.cancel == true) return;
                this.contextMenu.showAtPos(e.pageX, e.pageY);
                this.contextMenu.fire("Open", ev);
            }
        }
        return false;

    },
    headerContextMenu: null,
    setHeaderContextMenu: function(value) {
        var ui = this._getContextMenu(value);
        if (!ui) return;
        if (this.headerContextMenu !== ui) {
            this.headerContextMenu = ui;
            this.headerContextMenu.owner = this;
            mini.on(this.el, "contextmenu", this.__OnHtmlContextMenu, this);
        }
    },
    getHeaderContextMenu: function() {
        return this.headerContextMenu;
    },
    setSelectOnRightClick: function($) {
        this.selectOnRightClick = $
    },
    getSelectOnRightClick: function() {
        return this.selectOnRightClick
    },
    _get_originals: function() {
        return this._dataSource._originals;
    },
    _set_originals: function(value) {
        this._dataSource._originals = value;
    },
    _set_clearOriginals: function(value) {
        this._dataSource._clearOriginals = value;
    },
    _set_originalIdField: function(value) {
        this._dataSource._originalIdField = value;
    },
    _set_autoCreateNewID: function(value) {
        this._dataSource._autoCreateNewID = value;
    },
    getAttrs: function(el) {
        var attrs = mini.DataGrid.superclass.getAttrs.call(this, el);
        var cs = mini.getChildNodes(el);
        for (var i = 0, l = cs.length; i < l; i++) {
            var node = cs[i];
            var property = jQuery(node).attr("property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "columns") {
                attrs.columns = mini._ParseColumns(node);
                mini.removeNode(node);
            } else if (property == "data") {
                attrs.data = node.innerHTML;
                mini.removeNode(node);
            }
        }

        mini._ParseString(el, attrs, [
            "oncelleditenter",
            "onselect", "ondeselect", "onbeforeselect", "onbeforedeselect",
            "url", "sizeList", "pageInfoText", "bodyCls", "bodyStyle", "footerCls", "footerStyle", "pagerCls", "pagerStyle",
            "onheadercellclick", "onheadercellmousedown", "onheadercellcontextmenu", "onrowdblclick",
            "onrowclick", "onrowmousedown", "onrowcontextmenu",
            "onrowmouseenter", "onrowmouseleave",
            "oncellclick", "oncellmousedown", "oncellcontextmenu", "oncelldblclick",
            "onbeforeload", "onpreload", "onloaderror", "onload",
            "onupdate", "ondrawcell", "oncellbeginedit", "onselectionchanged", "ondrawgroup",
            "onbeforeshowrowdetail", "onbeforehiderowdetail", "onshowrowdetail", "onhiderowdetail", "idField", "valueField",
            "pager", "oncellcommitedit", "oncellendedit",
            "headerContextMenu", "loadingMsg", "emptyText", "cellEditAction",
            "sortMode", "oncellvalidation", "onsort",
            "ondrawsummarycell", "ondrawgroupsummarycell", "onresize", "oncolumnschanged",
            "ajaxMethod", "ajaxOptions",

            "onaddrow", "onupdaterow", "onremoverow", "onmoverow",
            "onbeforeaddrow", "onbeforeupdaterow", "onbeforeremoverow", "onbeforemoverow",

            "pageIndexField", "pageSizeField", "sortFieldField", "sortOrderField",
            "startField", "limitField",
            "totalField", "dataField", "sortField", "sortOrder",
            "stackTraceField", "errorField", "errorMsgField",
            "pagerButtons", "onbeforegroupclick", "dropAction", "sizeText", "pagerType",

            "viewType", "itemRenderer", "summaryPosition", "frozenPosition"
        ]);

        mini._ParseBool(el, attrs, ["showColumns", "showFilterRow", "showSummaryRow", "showPager", "showFooter", "enableGroupOrder",
            "showHGridLines", "showVGridLines", "showSortIcon",
            "allowSortColumn", "allowMoveColumn", "allowResizeColumn",
            "fitColumns", "showLoading", "multiSelect", "allowAlternating", "resultAsData", "allowRowSelect", "allowUnselect",
            "onlyCheckSelection",
            "allowHotTrackOut", "enableHotTrack", "showPageIndex", "showPageSize", "showTotalCount",
            "checkSelectOnLoad", "allowResize", "autoLoad",
            "autoHideRowDetail", "allowCellSelect", "allowCellEdit", "allowCellWrap", "allowHeaderWrap", "selectOnLoad",
            "virtualScroll", "collapseGroupOnLoad", "showGroupSummary",
            "showEmptyText", "allowCellValid", "showModified", "showColumnsMenu", "showPageInfo", "showReloadButton",
            "showNewRow", "editNextOnEnterKey", "createOnEnter", "skipReadOnlyCell",
            "ajaxAsync",
            "allowDrag", "allowDrop", "allowLeafDropIn", "editNextRowCell",
            "fixedRowHeight", "showCellTip", "showPagerButtonText", "showPagerButtonIcon", "groupTitleCollapsible",
	    "navEditMode", "selectOnRightClick", "sortDblClick", "allowEmptyContextMenu", "showGroupSummary"
        ]);

        mini._ParseInt(el, attrs, ["frozenStartColumn", "frozenEndColumn", "pageSizeWidth",
            "pageIndex", "pageSize", "defaultRowHeight", "defaultColumnWidth", "wheelIncrement"
        ]);

        if (typeof attrs.ajaxOptions == "string") {
            attrs.ajaxOptions = eval('(' + attrs.ajaxOptions + ')');
        }
        if (typeof attrs.sizeList == "string") {
            attrs.sizeList = eval('(' + attrs.sizeList + ')');
        }
        if (!attrs.idField && attrs.valueField) {
            attrs.idField = attrs.valueField;
        }

        if (attrs.pagerButtons) {
            attrs.pagerButtons = mini.byId(attrs.pagerButtons);
        }

        if (attrs.itemRenderer) attrs.itemRenderer = window[attrs.itemRenderer];

        return attrs;
    }
});
mini.regClass(mini.DataGrid, "datagrid");




mini_DataGrid_CellValidator_Prototype = {
    getCellErrors: function() {
        var errors = this._cellErrors.clone();


        var source = this._dataSource;
        for (var i = 0, l = errors.length; i < l; i++) {
            var error = errors[i];
            var row = error.record;
            if (!source.getby_id(row._id)) {
                var column = error.column;
                var id = row[this._rowIdField] + "$" + column._id;
                delete this._cellMapErrors[id];
                this._cellErrors.remove(error);
            }
        }









        return this._cellErrors;
    },
    getCellError: function(row, column) {
        row = this.getNode ? this.getNode(row) : this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return;

        var id = row[this._rowIdField] + "$" + column._id;
        return this._cellMapErrors ? this._cellMapErrors[id] : null;
    },
    isValid: function() {
        return this.getCellErrors().length == 0;
    },
    isCellValid: function(record, column) {

        if (!this._cellMapErrors) return true;
        var id = record[this._rowIdField] + "$" + column._id;
        return !this._cellMapErrors[id];
    },
    validate: function(data) {
        data = data || this.getDataView();
        if (!mini.isArray(data)) data = [];
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            this.validateRow(row);
        }
    },
    validateRow: function(row) {
        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            this.validateCell(row, column);
        }
    },
    validateCell: function(row, column) {
        row = this.getNode ? this.getNode(row) : this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column || column.visible == false) return;
        var value = mini._getMap(column.field, row);
        var e = {
            record: row,
            row: row,
            node: row,
            column: column,
            field: column.field,
            value: value,
            isValid: true,
            errorText: ""
        };

        if (column.vtype) {

            mini._ValidateVType(column.vtype, e.value, e, column);
        }

        if (e.isValid == true && column.unique && column.field) {

            var maps = {};
            var data = this.data,
                field = column.field;
            for (var i = 0, l = data.length; i < l; i++) {
                var o = data[i];
                var v = o[field];
                if (mini.isNull(v) || v === "") {} else {
                    var old = maps[v];
                    if (old && o == row) {
                        e.isValid = false;
                        e.errorText = mini._getErrorText(column, "uniqueErrorText");


                        this.setCellIsValid(old, column, e.isValid, e.errorText);
                        break;
                    }
                    maps[v] = o;
                }
            }
        }

        this.fire("cellvalidation", e);
        this.setCellIsValid(row, column, e.isValid, e.errorText);
    },

    setIsValid: function(value) {
        if (value) {
            var errors = this._cellErrors.clone();
            for (var i = 0, l = errors.length; i < l; i++) {
                var error = errors[i];
                this.setCellIsValid(error.record, error.column, true);
            }
        }
    },
    _removeRowError: function(row) {
        var columns = this.getColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var id = row[this._rowIdField] + "$" + column._id;
            var error = this._cellMapErrors[id];
            if (error) {
                delete this._cellMapErrors[id];
                this._cellErrors.remove(error);
            }
        }
    },
    setCellIsValid: function(row, column, isValid, errorText) {
        row = this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return;
        var id = row[this._rowIdField] + "$" + column._id;
        var cellEl = this._getCellEl(row, column);

        var error = this._cellMapErrors[id];
        delete this._cellMapErrors[id];
        this._cellErrors.remove(error);

        if (isValid === true) {
            if (cellEl && error) {
                mini.removeClass(cellEl, 'mini-grid-cell-error');
            }
        } else {
            error = {
                record: row,
                column: column,
                isValid: isValid,
                errorText: errorText
            };
            this._cellMapErrors[id] = error;
            this._cellErrors.add(error);
            if (cellEl) {
                mini.addClass(cellEl, 'mini-grid-cell-error');
            }
        }
    }
}
mini.copyTo(mini.DataGrid.prototype, mini_DataGrid_CellValidator_Prototype);



mini.TreeGrid = function(el, options) {
    mini.TreeGrid.superclass.constructor.apply(this, arguments);
    mini.addClass(this.el, 'mini-tree');
    if(options && !mini.isEmptyObject(options)) {
        this.set(options);
    } else {
    this.setAjaxAsync(false); // sync
    this.setAutoLoad(true);
    }

    if (this.showTreeLines == true) {
        mini.addClass(this.el, 'mini-tree-treeLine');
    }

    this._AsyncLoader = new mini._Tree_AsyncLoader(this);
    this._Expander = new mini._Tree_Expander(this);

    this.setShowArrow(this.showArrow);
};
mini.copyTo(mini.TreeGrid.prototype, mini._DataTreeApplys);

mini.extend(mini.TreeGrid, mini.DataGrid, {
    isTree: true,

    uiCls: "mini-treegrid",

    showPager: false,
    showNewRow: false,

    showCheckBox: false,
    showRadioButton: false,
    showTreeIcon: true,
    showExpandButtons: true,
    showTreeLines: false,
    showArrow: false,

    expandOnDblClick: true,
    expandOnNodeClick: false,
    loadOnExpand: true,

    _checkBoxType: "checkbox",

    iconField: "iconCls",

    _treeColumn: null,

    leafIconCls: "mini-tree-leaf",
    folderIconCls: "mini-tree-folder",

    fixedRowHeight: false,

    _checkBoxCls: "mini-tree-checkbox",
    _expandNodeCls: "mini-tree-expand",
    _collapseNodeCls: "mini-tree-collapse",
    _eciconCls: "mini-tree-node-ecicon",
    _inNodeCls: "mini-tree-nodeshow",









    isEditingNode: function(node) {
        return this._editingNode == node;
    },

    indexOf: function(record) {
        return this._dataSource.indexOfList(record);
    },

    _getDragText: function(dragNodes) {
        return "Nodes " + dragNodes.length;
    },
    _initEvents: function() {
        mini.TreeGrid.superclass._initEvents.call(this);

        this.on("nodedblclick", this.__OnNodeDblClick, this);
        this.on("nodeclick", this.__OnNodeClick, this);



        this.on("cellclick", function(e) {
            e.node = e.record;
            e.isLeaf = this.isLeaf(e.node);
            this.fire("nodeclick", e);
        }, this);
        this.on("cellmousedown", function(e) {
            e.node = e.record;
            e.isLeaf = this.isLeaf(e.node);
            this.fire("nodemousedown", e);
        }, this);
        this.on("celldblclick", function(e) {
            e.node = e.record;
            e.isLeaf = this.isLeaf(e.node);
            this.fire("nodedblclick", e);
        }, this);

        this.on("beforerowselect", function(e) {
            e.node = e.selected;
            e.isLeaf = this.isLeaf(e.node);
            this.fire("beforenodeselect", e);
        }, this);
        this.on("rowselect", function(e) {
            e.node = e.selected;
            e.isLeaf = this.isLeaf(e.node);
            this.fire("nodeselect", e);
        }, this);

    },
    setValue: function(value, cascade) {
        if (mini.isNull(value)) value = "";
        value = String(value);
        if (this.getValue() != value) {
            var nodes = this.getCheckedNodes();


            this.uncheckNodes(nodes, this.checkRecursive);

            this.value = value;
            if (this.showCheckBox) {
                var ids = String(value).split(",");
                this._dataSource.doCheckNodes(ids, true, cascade !== false);



            } else {
                this.selectNode(value, false);
            }
        }
    },
    getValue: function(mode) {
        if (this.showCheckBox) {
            if (mode === false) mode = 'leaf';
            return this._dataSource.getCheckedNodesId(mode);
        } else {
            return this._dataSource.getSelectedsId();
        }
    },
    getText: function() {
        var nodes = [];
        if (this.showCheckBox) {
            nodes = this.getCheckedNodes();
        } else {
            var node = this.getSelectedNode();
            if (node) nodes.push(node);
        }

        var sb = [],
            textField = this.getTextField();
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            sb.push(node[textField]);
        }

        return sb.join(',');
    },

    isGrouping: function() {
        return false;
    },
    _createSource: function() {
        this._dataSource = new mini.DataTree();
    },
    _bindSource: function() {
        mini.TreeGrid.superclass._bindSource.call(this);
        var source = this._dataSource;

        source.on("expand", this.__OnTreeExpand, this);
        source.on("collapse", this.__OnTreeCollapse, this);

        source.on("checkchanged", this.__OnCheckChanged, this);

        source.on("addnode", this.__OnSourceAddNode, this);
        source.on("removenode", this.__OnSourceRemoveNode, this);
        source.on("movenode", this.__OnSourceMoveNode, this);

        source.on("beforeloadnode", this.__OnBeforeLoadNode, this);
        source.on("loadnode", this.__OnLoadNode, this);
    },
    __OnBeforeLoadNode: function(e) {
        this.__showLoading = this.showLoading;
        this.showLoading = false;
        this.addNodeCls(e.node, "mini-tree-loading");
        this.fire("beforeloadnode", e);
    },
    __OnLoadNode: function(e) {
        this.showLoading = this.__showLoading;
        this.removeNodeCls(e.node, "mini-tree-loading");
        this.fire("loadnode", e);
    },
    _virtualUpdate: function() {
        var that = this;
        if (that._updateNodeTimer) {
            clearTimeout(that._updateNodeTimer);
            that._updateNodeTimer = null;
        }
        that._updateNodeTimer = setTimeout(function() {
            that._updateNodeTimer = null;

            that.doUpdateRows();

            that.deferLayout(50);
        }, 5);
    },









    __OnSourceAddNode: function(e) {

        var visible = this._dataSource.isVisibleNode(e.node);

        if (this.isVirtualScroll() == true) {
            this._virtualUpdate();
        } else {
            if (visible) this._doAddNodeEl(e.node);
            else {
                var parentNode = this.getParentNode(e.node);
                if (this._dataSource.isVisibleNode(parentNode)) {
                    this._doUpdateTreeNodeEl(parentNode);
                }

            }

        }
        this.fire("addnode", e);
    },
    __OnSourceRemoveNode: function(e) {
        if (this.isVirtualScroll() == true) {
            this._virtualUpdate();
        } else {
            this._doRemoveNodeEl(e.node);


            var parentNode = this.getParentNode(e.node);
            var nodes = this.getChildNodes(parentNode);
            if (nodes.length == 0) {
                this._doUpdateTreeNodeEl(parentNode);
            } else {
                var index = e.index;
                if (index > 1 && index == nodes.length) this._doUpdateTreeNodeEl(nodes[nodes.length - 1])
            }
        }

        this.fire("removenode", e);
    },




    __OnSourceMoveNode: function(e) {
        this._doMoveNodeEl(e.node);
        this.fire("movenode", e);

        var oldParentNode = e.oldParentNode;
        var parentNode = e.parentNode;
        if (oldParentNode != parentNode) {
            var nodes = this.getChildNodes(oldParentNode);
            if (nodes) {
                var last = nodes[nodes.length - 1];
                if (last) this._doUpdateTreeNodeEl(last);
            }
        }
    },
    _doAddNodeEl: function(node) {
        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();

        var parentNode = this.getParentNode(node);
        var rowIndex = this.indexOf(node);

        var updateParent = false;

        function doAdd(node, columns, viewIndex) {
            var s = this._createRowHTML(node, rowIndex, columns, viewIndex);

            var index = this.indexOfNode(node) + 1;
            var targetNode = this.getChildNodeAt(index, parentNode);
            if (targetNode) {
                var targetEl = this._getNodeEl(targetNode, viewIndex);
                jQuery(targetEl).before(s);
            } else {
                var nodesEl = this._getNodesEl(parentNode, viewIndex);
                if (nodesEl) {
                    mini.append(nodesEl.firstChild, s);
                } else {
                    updateParent = true;
                }
            }
        }

        doAdd.call(this, node, columns2, 2);
        doAdd.call(this, node, columns1, 1);

        if (updateParent) {
            this._doUpdateTreeNodeEl(parentNode);
        }
    },
    _doRemoveNodeEl: function(node) {
        this._doRemoveRowEl(node);
        var nodesEl = this._getNodesEl(node, 1);
        var nodesEl2 = this._getNodesEl(node, 2);
        if (nodesEl) nodesEl.parentNode.removeChild(nodesEl);
        if (nodesEl2) nodesEl2.parentNode.removeChild(nodesEl2);


    },
    _doMoveNodeEl: function(node) {

        if (this.isVirtualScroll() == true) {
            this._virtualUpdate();
        } else {

            this._doRemoveNodeEl(node);


            var parentNode = this.getParentNode(node);
            this._doUpdateTreeNodeEl(parentNode);
        }


    },
    _doUpdateNodeTitle: function(node) {
        this._doUpdateTreeNodeEl(node, false);
    },
    _doUpdateTreeNodeEl: function(node, hasChild) {

        hasChild = hasChild !== false;

        var rootNode = this.getRootNode();
        if (rootNode == node) {
            this.doUpdate();
            return;
        }
        if (!this.isVisibleNode(node)) return;

        var objNode = node;
        var frozenColumns = this.getFrozenColumns();
        var unfrozenColumns = this.getUnFrozenColumns();

        var lockHtml = this._createNodeHTML(node, frozenColumns, 1, null, hasChild);
        var html = this._createNodeHTML(node, unfrozenColumns, 2, null, hasChild);

        var nodeEl1 = this._getNodeEl(node, 1);
        var nodeEl2 = this._getNodeEl(node, 2);
        var nodesEl1 = this._getNodesTr(node, 1);
        var nodesEl2 = this._getNodesTr(node, 2);

        var detail1 = this._getRowDetailEl(node, 1);
        var detail2 = this._getRowDetailEl(node, 2);


        var els = mini.createElements(lockHtml);
        var node = els[0];
        var nodes = els[1];
        if (nodeEl1) {
            mini.before(nodeEl1, node);
            if (hasChild) {
                if (detail1) mini.after(detail1, nodes);
                else mini.before(nodeEl1, nodes);
            }

            mini.removeNode(nodeEl1);
            if (hasChild) {
                mini.removeNode(nodesEl1);
            }
        }

        var els = mini.createElements(html);
        var node = els[0];
        var nodes = els[1];
        if (nodeEl2) {
            mini.before(nodeEl2, node);

            if (hasChild) {
                if (detail2) mini.after(detail2, nodes);
                else mini.before(nodeEl2, nodes);
            }

            mini.removeNode(nodeEl2);
            if (hasChild) {
                mini.removeNode(nodesEl2);
            }
        }

        if (node.checked != true && !this.isLeaf(node)) {
            this._doCheckNodeEl(objNode);
        }
    },
    addNodeCls: function(node, cls) {
        this.addRowCls(node, cls);
    },
    removeNodeCls: function(node, cls) {
        this.removeRowCls(node, cls);
    },

    doUpdate: function() {

        mini.TreeGrid.superclass.doUpdate.apply(this, arguments);

    },
    setData: function(data) {
        if (!data) data = [];
        this._dataSource.setData(data);
    },
    loadList: function(list, idField, parentField) {
        idField = idField || this.getIdField();
        parentField = parentField || this.getParentField();
        var tree = mini.listToTree(list, this.getNodesField(), idField, parentField);
        this.setData(tree);
    },









    _createDrawCellEvent: function(record, column, rowIndex, columnIndex) {
        var e = mini.TreeGrid.superclass._createDrawCellEvent.call(this, record, column, rowIndex, columnIndex);
        e.node = e.record;
        e.isLeaf = this.isLeaf(e.node);
        if (this._treeColumn && this._treeColumn == column.name) {
            e.isTreeCell = true;

            e.img = record[this.imgField];
            e.iconCls = this._getNodeIcon(record);
            e.nodeCls = "";
            e.nodeStyle = "";
            e.nodeHtml = "";

            e.showTreeIcon = this.showTreeIcon;
            e.checkBoxType = this._checkBoxType;
            e.showCheckBox = this.showCheckBox;
            e.showRadioButton = this.showRadioButton;
            if (e.showCheckBox && !e.isLeaf) {
                e.showCheckBox = this.showFolderCheckBox;
            }
            if (e.showRadioButton && !e.isLeaf) {
                e.showRadioButton = this.showFolderCheckBox;
            }
            e.enabled = e.node.enabled !== false;
            e.checkable = this.getCheckable(e.node);






        }
        return e;
    },
    _OnDrawCell: function(record, column, rowIndex, columnIndex) {
        var e = mini.TreeGrid.superclass._OnDrawCell.call(this, record, column, rowIndex, columnIndex);

        if (this._treeColumn && this._treeColumn == column.name) {

            this.fire("drawnode", e);
            if (e.nodeStyle) {
                e.cellStyle = e.nodeStyle;
            }
            if (e.nodeCls) {
                e.cellCls = e.nodeCls;
            }
            if (e.nodeHtml) {
                e.cellHtml = e.nodeHtml;
            }

            this._createTreeColumn(e);
        }
        return e;
    },
    _isViewFirstNode: function(node) {
        if (this._viewNodes) {
            var pnode = this.getParentNode(node);
            var nodes = this._getViewChildNodes(pnode);
            return nodes[0] === node;
        } else {
            return this.isFirstNode(node);
        }
    },
    _isViewLastNode: function(node) {
        if (this._viewNodes) {
            var pnode = this.getParentNode(node);
            var nodes = this._getViewChildNodes(pnode);
            return nodes[nodes.length - 1] === node;
        } else {
            return this.isLastNode(node);
        }
    },
    _isInViewLastNode: function(node, level) {
        if (this._viewNodes) {
            var pnode = null;
            var ans = this.getAncestors(node);
            for (var i = 0, l = ans.length; i < l; i++) {
                var a = ans[i];
                if (this.getLevel(a) == level) {
                    pnode = a;
                }
            }
            if (!pnode || pnode == this.root) return false;
            return this._isViewLastNode(pnode);
        } else {
            return this.isInLastNode(node, level);
        }
    },
    isInLastNode: function(node, level) {
        var pnode = null;
        var ans = this.getAncestors(node);
        for (var i = 0, l = ans.length; i < l; i++) {
            var a = ans[i];
            if (this.getLevel(a) == level) {
                pnode = a;
            }
        }
        if (!pnode || pnode == this.root) return false;
        return this.isLastNode(pnode);
    },
    _createNodeTitle: function(node, sb, e) {
        var isReturn = !sb;
        if (!sb) sb = [];

        var isLeaf = this.isLeaf(node);
        var level = this.getLevel(node);

        var cls = e.nodeCls;

        if (!isLeaf) {
            cls = this.isExpandedNode(node) ? this._expandNodeCls : this._collapseNodeCls;
        }

        if (node.enabled === false) {
            cls += " mini-disabled";
        }
        if (!isLeaf) {
            cls += " mini-tree-parentNode";
        }

        var subNodes = this.getChildNodes(node);
        var hasChilds = subNodes && subNodes.length > 0;


        sb[sb.length] = '<div class="mini-tree-nodetitle ' + cls + '" >';



        var parentNode = this.getParentNode(node);
        var ii = 0;

        for (var i = ii; i <= level; i++) {
            if (i == level) continue;

            if (isLeaf) {

                if (i > level - 1) {
                    continue;
                }
            }

            var indentStyle = "";
            if (this._isInViewLastNode(node, i)) {
                indentStyle = "background:none";
            }


            sb[sb.length] = '<span class="mini-tree-indent " style="' + indentStyle + '"></span>';
        }


        var ecCls = "";
        if (this._isViewFirstNode(node) && level == 0) {
            ecCls = "mini-tree-node-ecicon-first";
        } else if (this._isViewLastNode(node)) {
            ecCls = "mini-tree-node-ecicon-last";
        }

        if (this._isViewFirstNode(node) && this._isViewLastNode(node)) {
            ecCls = "mini-tree-node-ecicon-firstAndlast";

            if (parentNode == this.root) {
                ecCls = "mini-tree-node-ecicon-firstLast";
            }
        }

        if (!isLeaf) {
            sb[sb.length] = '<a class="' + this._eciconCls + ' ' + ecCls + '" style="' + (this.showExpandButtons ? "" : "display:none") + '" ' + (mini.isChrome ? "" : 'href="javascript:void(0);"') + ' onclick="return false;" hidefocus></a>';


        } else {
            sb[sb.length] = '<span class="' + this._eciconCls + ' ' + ecCls + '" style="' + (this.showExpandButtons ? "" : "display:none") + '"></span>';
        }


        sb[sb.length] = '<span class="mini-tree-nodeshow">';
        if (e.showTreeIcon) {

            if (e.img) {
                var img = this.imgPath + e.img;
                sb[sb.length] = '<span class="mini-tree-icon mini-iconfont" style="background-image:url(' + img + ');"></span>';
            } else {
                sb[sb.length] = '<span class="' + e.iconCls + ' mini-tree-icon mini-iconfont"></span>';
            }
        }

        if (e.showRadioButton && !e.showCheckBox) {
            sb[sb.length] = '<span class="mini-tree-radio" ></span>';
        }

        if (e.showCheckBox) {
            var ckid = this._createCheckNodeId(node);
            var checked = this.isCheckedNode(node);
            var enabled = e.enabled === false ? "disabled" : "";
            if (e.enabled !== false) {
                enabled = e.checkable === false ? "disabled" : "";
            }



            sb[sb.length] = '<span id="' + ckid + '" class="' + this._checkBoxCls + ' ' + (checked ? 'mini-tree-checkbox-checked' : '') + '"></span>';
        }

        sb[sb.length] = '<span class="mini-tree-nodetext">';
        if (this._editingNode == node) {
            var editId = this._id + "$edit$" + node._id;
            var text = e.value;
            sb[sb.length] = '<input id="' + editId + '" type="text" class="mini-tree-editinput" value="' + text + '"/>';
        } else {
            sb[sb.length] = e.cellHtml;
        }

        sb[sb.length] = '</span>';
        sb[sb.length] = '</span>';

        sb[sb.length] = '</div>';


        if (isReturn) return sb.join('');
    },
    _createTreeColumn: function(e) {
        var node = e.record,
            column = e.column;

        e.headerCls += ' mini-tree-treecolumn';
        e.cellCls += ' mini-tree-treecell';
        e.cellStyle += ';padding:0;';


        var isLeaf = this.isLeaf(node);


        e.cellHtml = this._createNodeTitle(node, null, e);


        if (node.checked != true && !isLeaf) {
            var checkState = this.getCheckState(node);
            if (checkState == "indeterminate") {
                this._renderCheckState(node);
            }
        }
    },
    _createCheckNodeId: function(node) {
        return this._id + "$checkbox$" + node._id;
    },

    _renderCheckState: function(node) {
        if (!this._renderCheckStateNodes) this._renderCheckStateNodes = [];
        this._renderCheckStateNodes.push(node);
        if (this._renderCheckStateTimer) return;
        var me = this;
        this._renderCheckStateTimer = setTimeout(function() {

            me._renderCheckStateTimer = null;
            var nodes = me._renderCheckStateNodes;
            me._renderCheckStateNodes = null;
            for (var i = 0, l = nodes.length; i < l; i++) {
                me._doCheckNodeEl(nodes[i]);
            }


        }, 1);
    },

    _createNodeHTML: function(node, columns, viewIndex, sb, hasChild) {
        var isReturn = !sb;
        if (!sb) sb = [];

        var source = this._dataSource;


        var rowIndex = source.getDataView().indexOf(node);
        this._createRowHTML(node, rowIndex, columns, viewIndex, sb);


        if (hasChild !== false) {
            var cnodes = source.getChildNodes(node);
            var isVisible = this.isVisibleNode(node);
            if (cnodes && cnodes.length > 0) {
                var isExpand = this.isExpandedNode(node);
                if (isExpand == true) {
                    var style = (isExpand && isVisible) ? "" : "display:none";
                    var nodesId = this._createNodesId(node, viewIndex);
                    sb[sb.length] = '<tr class="mini-tree-nodes-tr" style="';
                    if (mini.isIE) sb[sb.length] = style;

                    sb[sb.length] = '" ><td class="mini-tree-nodes-td" colspan="';
                    sb[sb.length] = columns.length + 1;
                    sb[sb.length] = '" >';

                    sb[sb.length] = '<div class="mini-tree-nodes" id="';
                    sb[sb.length] = nodesId;
                    sb[sb.length] = '" style="';
                    sb[sb.length] = style;
                    sb[sb.length] = '">';
                    this._createNodesHTML(cnodes, columns, viewIndex, sb);
                    sb[sb.length] = '</div>';

                    sb[sb.length] = '</td></tr>';
                }
            }
        }
        if (isReturn) return sb.join('');
    },
    _createNodesHTML: function(nodes, columns, viewIndex, sb) {
        if (!nodes) return '';
        var isReturn = !sb;
        if (!sb) sb = [];

        sb.push('<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0">');
        sb.push(this._createTopRowHTML(columns, true));
        if (columns.length > 0) {
            for (var j = 0, k = nodes.length; j < k; j++) {
                var node = nodes[j];
                this._createNodeHTML(node, columns, viewIndex, sb);
            }
        }
        sb.push('</table>');
        if (isReturn) return sb.join('');
    },

    _createRowsHTML: function(columns, viewIndex) {
        if (this.isVirtualScroll()) {
            return mini.TreeGrid.superclass._createRowsHTML.apply(this, arguments);
        }

        var source = this._dataSource,
            me = this;

        var sb = [];


        var nodes = [];
        var rootNode = source.getRootNode();
        if (this._useEmptyView !== true) {
            nodes = source.getChildNodes(rootNode);
        }


        var nodesEl = viewIndex == 2 ? this._rowsViewEl.firstChild : this._rowsLockEl.firstChild;
        nodesEl.id = this._createNodesId(rootNode, viewIndex);

        this._createNodesHTML(nodes, columns, viewIndex, sb);

        return sb.join('');
    },

    _createNodesId: function(node, viewIndex) {
        var id = this._id + "$nodes" + viewIndex + "$" + node._id;
        return id;
    },
    _getNodeEl: function(node, viewIndex) {

        return this._getRowEl(node, viewIndex);
    },
    _getNodesEl: function(node, viewIndex) {

        node = this.getNode(node);
        var id = this._createNodesId(node, viewIndex);
        return document.getElementById(id);
    },
    _getNodesTr: function(node, viewIndex) {

        var el = this._getNodesEl(node, viewIndex);
        if (el) return el.parentNode.parentNode;
    },
    setCheckOnTextClick: function($) {
        this.checkOnTextClick = $
    },
    getCheckOnTextClick: function() {
        return this.checkOnTextClick
    },
    setTreeColumn: function(value) {
        this._treeColumn = value;
        this.deferUpdate();
    },
    getTreeColumn: function() {
        return this._treeColumn;
    },
    setShowTreeIcon: function(value) {
        this.showTreeIcon = value;
        this.deferUpdate();
    },
    getShowTreeIcon: function() {
        return this.showTreeIcon;
    },
    setShowCheckBox: function(value) {
        this.showCheckBox = value;
        this.deferUpdate();
    },
    getShowCheckBox: function() {
        return this.showCheckBox;
    },
    setShowRadioButton: function(value) {
        this.showRadioButton = value;
        this.deferUpdate();
    },
    getShowRadioButton: function() {
        return this.showRadioButton;
    },
    setCheckBoxType: function(value) {
        this._checkBoxType = value;
        this._doUpdateCheckState();
    },
    getCheckBoxType: function() {
        return this._checkBoxType;
    },
    setIconsField: function(value) {
        this._iconsField = value;
    },
    getIconsField: function() {
        return this._iconsField;
    },

    _getNodeIcon: function(node) {
        var icon = node[this.iconField];
        if (!icon) {
            if (this.isLeaf(node)) icon = this.leafIconCls;
            else icon = this.folderIconCls;
        }
        return icon;
    },
    _getCheckBoxEl: function(node) {
        if (this.isVisibleNode(node) == false) return null;
        var id = this._id + "$checkbox$" + node._id;
        return mini.byId(id, this.el);
    },









    useAnimation: true,
    _updateNodeTimer: null,
    _doExpandCollapseNode: function(node) {
        var that = this;
        if (that._updateNodeTimer) {
            clearTimeout(that._updateNodeTimer);
            that._updateNodeTimer = null;
        }

        var sss = new Date();
        if (this.isVirtualScroll() == true) {
            that._updateNodeTimer = setTimeout(function() {
                that._updateNodeTimer = null;

                that.doUpdateRows();

                that.deferLayout(50);
            }, 5);




            return;
        }



        function onCallback() {
            this._doUpdateTreeNodeEl(node);
            this.deferLayout(20);
        }






        if (false || mini.isIE6 || !this.useAnimation || this.isFrozen()) {
            onCallback.call(this);
        } else {
            var expanded = this.isExpandedNode(node);

            function doExpandAnim(node, viewIndex, onCallback) {
                var nodesEl = this._getNodesEl(node, viewIndex);
                if (nodesEl) {
                    var h = mini.getHeight(nodesEl);
                    nodesEl.style.overflow = "hidden";
                    nodesEl.style.height = "0px";
                    var config = {
                        height: h + "px"
                    };
                    var sf = this;
                    sf._inAniming = true;


                    var jq = jQuery(nodesEl);
                    jq.animate(
                        config,
                        250,
                        function() {
                            nodesEl.style.height = "auto";
                            sf._inAniming = false;
                            sf.doLayout();
                            mini.repaint(nodesEl);
                        }
                    );

                } else {

                }
            }

            function doCollapseAnim(node, viewIndex, onCallback) {
                var nodesEl = this._getNodesEl(node, viewIndex);
                if (nodesEl) {
                    var h = mini.getHeight(nodesEl);
                    var config = {
                        height: 0 + "px"
                    };
                    var sf = this;
                    sf._inAniming = true;
                    var jq = jQuery(nodesEl);
                    jq.animate(
                        config,
                        180,
                        function() {
                            nodesEl.style.height = "auto";
                            sf._inAniming = false;
                            if (onCallback) onCallback.call(sf);
                            sf.doLayout();
                            mini.repaint(nodesEl);

                        }
                    );
                } else {
                    if (onCallback) onCallback.call(this);
                }
            }

            var that = this;
            if (expanded) {
                onCallback.call(this);
                doExpandAnim.call(this, node, 2);
                doExpandAnim.call(this, node, 1);
            } else {
                doCollapseAnim.call(this, node, 2, onCallback);
                doCollapseAnim.call(this, node, 1);
            }
        }
    },
    __OnTreeCollapse: function(e) {
        this._doExpandCollapseNode(e.node);
    },
    __OnTreeExpand: function(e) {
        this._doExpandCollapseNode(e.node);
    },
    _doCheckNodeEl: function(node) {
        var ck = this._getCheckBoxEl(node);
        if (ck) {
            var checkModel = this.getCheckModel();
            mini.removeClass(ck, "mini-tree-checkbox-indeterminate");
	    var indeterminate = node.indeterminate && !node.checked;
            if (checkModel == "cascade" || indeterminate) {
                var checkState = this.getCheckState(node);
                if (checkState == "indeterminate") {

                    mini.addClass(ck, "mini-tree-checkbox-indeterminate");
                } else {

                    mini.removeClass(ck, "mini-tree-checkbox-indeterminate");
                }
            }

            if (node.checked) {
                mini.addClass(ck, "mini-tree-checkbox-checked");
            } else {
                mini.removeClass(ck, "mini-tree-checkbox-checked");
            }

        }

    },
    __OnCheckChanged: function(e) {
        for (var i = 0, l = e._nodes.length; i < l; i++) {
            var node = e._nodes[i];
            this._doCheckNodeEl(node);
        }

        if (this._checkChangedTimer) {
            clearTimeout(this._checkChangedTimer);
            this._checkChangedTimer = null;
        }
        var me = this;
        this._checkChangedTimer = setTimeout(function() {
            me._checkChangedTimer = null;

            me.fire("checkchanged");
        }, 1);

    },
    _tryToggleCheckNode: function(node) {
        if (node.enabled === false) return;

        var checkable = this.getCheckable(node);
        if (checkable == false) return;

        var checked = this.isCheckedNode(node);

        var e = {
            node: node,
            cancel: false,
            checked: checked,
            isLeaf: this.isLeaf(node)
        };
        this.fire("beforenodecheck", e);
        if (e.cancel) return;

        this._dataSource.doCheckNodes(node, !checked, true);







        this.fire("nodecheck", e);
    },
    _tryToggleNode: function(node) {
        var isExpanded = this.isExpandedNode(node);
        var e = {
            node: node,
            cancel: false
        };

        if (isExpanded) {
            this.fire("beforecollapse", e);
            if (e.cancel == true) return;
            this.collapseNode(node);

            e.type = "collapse";
            this.fire("collapse", e);
        } else {
            this.fire("beforeexpand", e);
            if (e.cancel == true) return;
            this.expandNode(node);

            e.type = "expand";
            this.fire("expand", e);
        }
    },
    _OnCellMouseDown: function(e) {

        if (mini.findParent(e.htmlEvent.target, this._eciconCls)) {
	} else if (mini.findParent(e.htmlEvent.target, 'mini-tree-checkbox')) {
	} else {
            this.fire("cellmousedown", e);
        }
    },
    _OnCellClick: function(e) {
        if (mini.findParent(e.htmlEvent.target, this._eciconCls)) return;

        if (mini.findParent(e.htmlEvent.target, 'mini-tree-checkbox')) {
            this._tryToggleCheckNode(e.record);
        } else {
            this.fire("cellclick", e);
        }
    },
    __OnNodeDblClick: function(e) {
    },
    __OnNodeClick: function(e) {
    },
    setNodeText: function(node, text) {
        node = this.getNode(node);
        if (!node) return;
        var obj = {};
        obj[this.getTextField()] = text;
        this.updateNode(node, obj);
    },
    setNodeIconCls: function(node, iconCls) {
        node = this.getNode(node);
        if (!node) return;
        var obj = {};
        obj[this.iconField] = iconCls;
        this.updateNode(node, obj);
    },
    setIconField: function(value) {
        this.iconField = value;
    },
    getIconField: function() {
        return this.iconField;
    },
    setAllowSelect: function(value) {
        this.setAllowRowSelect(value);
    },
    getAllowSelect: function() {
        return this.getAllowRowSelect();
    },
    setShowExpandButtons: function(value) {
        if (this.showExpandButtons != value) {
            this.showExpandButtons = value;
            this.doUpdate();
        }
    },
    getShowExpandButtons: function() {
        return this.showExpandButtons;
    },
    setShowTreeLines: function(value) {
        this.showTreeLines = value;
        if (value == true) {
            mini.addClass(this.el, 'mini-tree-treeLine');
        } else {
            mini.removeClass(this.el, 'mini-tree-treeLine');
        }
    },
    getShowTreeLines: function() {
        return this.showTreeLines;
    },
    setShowArrow: function(value) {
        this.showArrow = value;
        if (value == true) {
            mini.addClass(this.el, 'mini-tree-showArrows');
        } else {
            mini.removeClass(this.el, 'mini-tree-showArrows');
        }
    },
    getShowArrow: function() {
        return this.showArrow;
    },
    setLeafIcon: function(value) {
        this.leafIcon = value;
    },
    getLeafIcon: function() {
        return this.leafIcon;
    },
    setFolderIcon: function(value) {
        this.folderIcon = value;
    },
    getFolderIcon: function() {
        return this.folderIcon;
    },
    getExpandOnDblClick: function() {
        return this.expandOnDblClick;
    },
    setExpandOnNodeClick: function(value) {
        this.expandOnNodeClick = value;
        if (value) {
            mini.addClass(this.el, "mini-tree-nodeclick");
        } else {
            mini.removeClass(this.el, "mini-tree-nodeclick");
        }
    },
    getExpandOnNodeClick: function() {
        return this.expandOnNodeClick;
    },
    setLoadOnExpand: function(value) {
        this.loadOnExpand = value;
    },
    getLoadOnExpand: function() {
        return this.loadOnExpand;
    },
    hideNode: function(node) {
        node = this.getNode(node);
        if (!node) return;
        node.visible = false;

        this._doUpdateTreeNodeEl(node);

        var el1 = this._getNodeEl(node, 1);
        var el2 = this._getNodeEl(node, 2);
        if (el1) el1.style.display = "none";
        if (el2) el2.style.display = "none";

    },
    showNode: function(node) {

        node = this.getNode(node);
        if (!node) return;
        node.visible = true;

        this._doUpdateTreeNodeEl(node);


    },
    enableNode: function(node) {
        node = this.getNode(node);
        if (!node) return;
        node.enabled = true;

        var el1 = this._getNodeEl(node, 1);
        var el2 = this._getNodeEl(node, 2);
        if (el1) mini.removeClass(el1, "mini-disabled");
        if (el2) mini.removeClass(el2, "mini-disabled");
        var ck = this._getCheckBoxEl(node);
        if (ck) ck.disabled = false;
    },
    disableNode: function(node) {
        node = this.getNode(node);
        if (!node) return;

        node.enabled = false;
        var el1 = this._getNodeEl(node, 1);
        var el2 = this._getNodeEl(node, 2);
        if (el1) mini.addClass(el1, "mini-disabled");
        if (el2) mini.addClass(el2, "mini-disabled");

        var ck = this._getCheckBoxEl(node);
        if (ck) ck.disabled = true;
    },



    imgPath: '',
    setImgPath: function(value) {
        this.imgPath = value;
    },
    getImgPath: function() {
        return this.imgPath;
    },
    imgField: 'img',
    setImgField: function(value) {
        this.imgField = value;
    },
    getImgField: function() {
        return this.imgField;
    },




    getAttrs: function(el) {
        var attrs = mini.TreeGrid.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["value", "url", "idField", "textField", "iconField", "nodesField", "parentField", "valueField", "checkedField",
            "leafIcon", "folderIcon", "leafField",
            "ondrawnode", "onbeforenodeselect", "onnodeselect", "onnodemousedown", "onnodeclick", "onnodedblclick",
            "onbeforenodecheck", "onnodecheck",
            "onbeforeexpand", "onexpand", "onbeforecollapse", "oncollapse",
            "dragGroupName", "dropGroupName", "onendedit",
            "expandOnLoad", "ondragstart", "onbeforedrop", "ondrop", "ongivefeedback",
            "treeColumn", "onaddnode", "onremovenode", "onmovenode", "imgPath", "imgField", "hoverMode"
        ]);

        mini._ParseBool(el, attrs, ["allowSelect", "showCheckBox", "showRadioButton", "showExpandButtons", "showTreeIcon", "showTreeLines", "checkRecursive",
            "enableHotTrack", "showFolderCheckBox", "resultAsTree",
            "allowDrag", "allowDrop", "showArrow", "expandOnDblClick", "removeOnCollapse",
            "autoCheckParent", "loadOnExpand", "expandOnNodeClick", "useAnimation", "checkOnTextClick"
        ]);

        if (attrs.expandOnLoad) {
            var level = parseInt(attrs.expandOnLoad);
            if (mini.isNumber(level)) {
                attrs.expandOnLoad = level;
            } else {
                attrs.expandOnLoad = attrs.expandOnLoad == "true" ? true : false;
            }
        }

        var idField = attrs.idField || this.getIdField();
        var textField = attrs.textField || this.getTextField();
        var iconField = attrs.iconField || this.getIconField();
        var nodesField = attrs.nodesField || this.getNodesField();

        function parseNodes(nodes) {
            var data = [];

            for (var i = 0, l = nodes.length; i < l; i++) {
                var node = nodes[i];
                var cnodes = mini.getChildNodes(node);
                var nodeTitle = cnodes[0];
                var nodeChild = cnodes[1];

                if (!nodeTitle || !nodeChild) nodeTitle = node;
                var jqTitle = jQuery(nodeTitle);
                var o = {};
                var id = o[idField] = nodeTitle.getAttribute("value");

                o[iconField] = jqTitle.attr("iconCls");
                o[textField] = nodeTitle.innerHTML;
                data.add(o);



                var expanded = jqTitle.attr("expanded");
                if (expanded) {
                    o.expanded = expanded == "false" ? false : true;
                }

                var allowSelect = jqTitle.attr("allowSelect");
                if (allowSelect) {
                    o.allowSelect = allowSelect == "false" ? false : true;
                }

                if (!nodeChild) continue;
                var cs = mini.getChildNodes(nodeChild);
                var cdata = parseNodes(cs);
                if (cdata.length > 0) {
                    o[nodesField] = cdata;
                }
            }
            return data;
        }

        var data = parseNodes(mini.getChildNodes(el));
        if (data.length > 0) {
            attrs.data = data;
        }

        if (!attrs.idField && attrs.valueField) {
            attrs.idField = attrs.valueField;
        }
        return attrs;
    }
});

mini.regClass(mini.TreeGrid, "TreeGrid");



mini.Tree = function() {
    mini.Tree.superclass.constructor.apply(this, arguments);

    var columns = [{
        name: "node",
        header: "",
        field: this.getTextField(),
        width: 'auto',
        allowDrag: true,

        editor: {
            type: "textbox"
        }
    }];
    this._columnModel.setColumns(columns);
    this._column = this._columnModel.getColumn("node");

    mini.removeClass(this.el, 'mini-treegrid');
    mini.addClass(this.el, 'mini-tree-nowrap');
    this.setBorderStyle("border:0");
};
mini.extend(mini.Tree, mini.TreeGrid, {





    _userEmptyTd: (mini.isChrome || mini.isIE6 || mini.isIE7) ? false : true,

    setTextField: function(value) {
        this._dataSource.setTextField(value);
        this._columnModel.updateColumn('node', {
            field: value
        });
        this.textField = value;
    },

    uiCls: "mini-tree",

    hoverMode: 'title',

    _rowHoverCls: "mini-tree-node-hover",
    _rowSelectedCls: "mini-tree-selectedNode",
    _getRecordByEvent: function(e, inNodeShow) {

        if (this.hoverMode == 'node') inNodeShow = false;

        var row = mini.Tree.superclass._getRecordByEvent.call(this, e);
        if (inNodeShow === false) return row;
        if (row && mini.findParent(e.target, "mini-tree-nodeshow")) {
            return row;
        }
        return null;
    },

    _treeColumn: "node",


    defaultRowHeight: 22,
    _getRowHeight: function(record) {
        var h = this.defaultRowHeight;
        if (record._height) {
            h = parseInt(record._height);
            if (isNaN(parseInt(record._height))) h = rowHeight;
        }




        return h;
    },

    showHeader: false,
    showTopbar: false,
    showFooter: false,
    showColumns: false,

    showHGridLines: false,
    showVGridLines: false,

    showTreeLines: true,

    setTreeColumn: null,
    setColumns: null,
    getColumns: null,

    frozen: null,
    unFrozen: null,

    showModified: false,




    _OnCellMouseDown: function(e) {
        if (this._editInput) this._editInput.blur();
        this.fire("cellmousedown", e);
    },

    beginEdit: function(node) {
        node = this.getNode(node);
        if (!node) return;

        var column = this.getColumn(0);
        var value = mini._getMap(column.field, node);
        var e = {
            record: node,
            node: node,
            column: column,
            field: column.field,
            value: value,
            cancel: false
        };
        this.fire("cellbeginedit", e);
        if (e.cancel == true) return;

        this._editingNode = node;
        this._doUpdateNodeTitle(node);


        var that = this;

        function doEdit() {
            var editId = that._id + "$edit$" + node._id;
            that._editInput = document.getElementById(editId);

            that._editInput.focus();

            mini.selectRange(that._editInput, 0, 1000);
            mini.on(that._editInput, "keydown", that.__OnEditInputKeyDown, that);
            mini.on(that._editInput, "blur", that.__OnEditInputBlur, that);
        }
        setTimeout(function() {
            doEdit();
        }, 100);
        doEdit();
    },
    cancelEdit: function(update) {
        var node = this._editingNode;
        this._editingNode = null;
        if (node) {
            if (update !== false) this._doUpdateNodeTitle(node);
            mini.un(this._editInput, "keydown", this.__OnEditInputKeyDown, this);
            mini.un(this._editInput, "blur", this.__OnEditInputBlur, this);
        }
        this._editInput = null;

    },
    __OnEditInputKeyDown: function(e) {
        if (e.keyCode == 13) {
            var node = this._editingNode;
            var text = this._editInput.value;
            this._editingNode = null;
            this.setNodeText(node, text);
            this.cancelEdit(false);
            this.fire("endedit", {
                node: node,
                text: text
            });
        } else if (e.keyCode == 27) {
            this.cancelEdit();
        }
    },
    __OnEditInputBlur: function(e) {

        var node = this._editingNode;
        if (node) {
            var text = this._editInput.value;
            this.cancelEdit();
            this.setNodeText(node, text);
            this.fire("endedit", {
                node: node,
                text: text
            });
        }
    },


    addRowCls: function(row, cls) {
        var d1 = this._getRowEl(row, 1);
        var d2 = this._getRowEl(row, 2);
        if (d1) mini.addClass(d1, cls);
        if (d2) mini.addClass(d2, cls);


        if (d1) mini.addClass(d1.cells[1], cls);
        if (d2) mini.addClass(d2.cells[1], cls);
    },
    removeRowCls: function(row, cls) {
        var d1 = this._getRowEl(row, 1);
        var d2 = this._getRowEl(row, 2);
        if (d1) {
            mini.removeClass(d1, cls);
        }
        if (d2) {
            mini.removeClass(d2, cls);
        }


        if (d1) mini.removeClass(d1.cells[1], cls);
        if (d2) mini.removeClass(d2.cells[1], cls);
    },
    scrollIntoView: function(node) {
        node = this.getNode(node);
        if (!node) return;

        if (!this.isVisibleNode(node)) {
            this.expandPath(node);
        }
        var that = this;
        setTimeout(function() {
	    if (that.isVirtualScroll()) mini.Tree.superclass.scrollIntoView.call(that, node);
	    else {
            	var itemEl = that._getNodeEl(node, 2);
            	mini.scrollIntoView(itemEl, that._rowsViewEl, false);
	    }
        }, 10);
    }
});
mini.regClass(mini.Tree, "Tree");



mini._Tree_Expander = function(grid) {
    this.owner = grid;

    mini.on(grid.el, "click", this.__OnClick, this);
    mini.on(grid.el, "dblclick", this.__OnDblClick, this);
}
mini._Tree_Expander.prototype = {
    _canToggle: function() {
        return !this.owner._dataSource._isNodeLoading();
    },
    __OnClick: function(e) {
        var tree = this.owner;
        var node = tree._getRecordByEvent(e, false);
        if (!node || node.enabled === false) return;
        if (mini.findParent(e.target, 'mini-tree-checkbox')) return;

        var isLeaf = tree.isLeaf(node);

        if (mini.findParent(e.target, tree._eciconCls)) {
            if (this._canToggle() == false) return;
            tree._tryToggleNode(node);
        } else if (tree.expandOnNodeClick && !isLeaf && !tree._inAniming) {
            if (this._canToggle() == false) return;
            tree._tryToggleNode(node);
        }
    },
    __OnDblClick: function(e) {

        var tree = this.owner;
        var node = tree._getRecordByEvent(e, false);
        if (!node || node.enabled === false) return;

        if (tree.isEditingNode(node)) return

        var isLeaf = tree.isLeaf(node);

        if (tree._inAniming) return;

        if (mini.findParent(e.target, tree._eciconCls)) {
            return;
        }
        if (tree.expandOnNodeClick) {
            return;
        }
        if (tree.expandOnDblClick && !isLeaf) {
            if (this._canToggle() == false) return;
            e.preventDefault();
            tree._tryToggleNode(node);
        }

    }
}

mini._Tree_AsyncLoader = function(grid) {
    this.owner = grid;

    grid.on("expand", this.__OnBeforeNodeExpand, this);
}
mini._Tree_AsyncLoader.prototype = {
    __OnBeforeNodeExpand: function(e) {
        var tree = this.owner;
        var node = e.node;
        var isLeaf = tree.isLeaf(node);
        var cs = node[tree.getNodesField()];

        if (!isLeaf && (!cs || cs.length == 0)) {
            if (tree.loadOnExpand && node.asyncLoad !== false) {
                e.cancel = true;
                tree.loadNode(node);
            }
        }
    }
}




mini.locale = "zh_CN";



mini.dateInfo = {
    monthsLong: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
    monthsShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
    daysLong: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
    daysShort: ["日", "一", "二", "三", "四", "五", "六"],
    quarterLong: ['一季度', '二季度', '三季度', '四季度'],
    quarterShort: ['Q1', 'Q2', 'Q2', 'Q4'],
    halfYearLong: ['上半年', '下半年'],
    patterns: {
        "d": "yyyy-M-d",
        "D": "yyyy年M月d日",
        "f": "yyyy年M月d日 H:mm",
        "F": "yyyy年M月d日 H:mm:ss",
        "g": "yyyy-M-d H:mm",
        "G": "yyyy-M-d H:mm:ss",
        "m": "MMMd日",
        "o": "yyyy-MM-ddTHH:mm:ss.fff",
        "s": "yyyy-MM-ddTHH:mm:ss",
        "t": "H:mm",
        "T": "H:mm:ss",
        "U": "yyyy年M月d日 HH:mm:ss",
        "y": "yyyy年MM月"
    },
    tt: {
        "AM": "上午",
        "PM": "下午"
    },
    ten: {
        "Early": "上旬",
        "Mid": "中旬",
        "Late": "下旬"
    },
    today: '今天',
    clockType: 24
};
mini.cultures["zh-CN"] = {
    name: "zh-CN",
    numberFormat: {
        number: {
            pattern: ["n", "-n"],
            decimals: 2,
            decimalsSeparator: ".",
            groupSeparator: ",",
            groupSize: [3]
        },
        percent: {
            pattern: ["n%", "-n%"],
            decimals: 2,
            decimalsSeparator: ".",
            groupSeparator: ",",
            groupSize: [3],
            symbol: "%"
        },
        currency: {
            pattern: ["$n", "$-n"],
            decimals: 2,
            decimalsSeparator: ".",
            groupSeparator: ",",
            groupSize: [3],
            symbol: "¥"
        }
    }
}
mini.culture("zh-CN");
if (mini.MessageBox) {
    mini.copyTo(mini.MessageBox, {
        alertTitle: "提醒",
        confirmTitle: "确认",
        promptTitle: "输入",
        promptMessage: "请输入内容：",
        buttonText: {
            ok: "确定", //"OK",
            cancel: "取消", //"Cancel",
            yes: "是", //"Yes",
            no: "否" //"No"
        }
    });
};

if (mini.Calendar) {
    mini.copyTo(mini.Calendar.prototype, {
        firstDayOfWeek: 0,
        yesterdayText: "昨天",
        todayText: "今天",
        clearText: "清除",
        okText: "确定",
        cancelText: "取消",
        daysShort: ["日", "一", "二", "三", "四", "五", "六"],
        format: "yyyy年MM月",

        timeFormat: 'H:mm'
    });
}

for (var id in mini) {
    var clazz = mini[id];
    if (clazz && clazz.prototype && clazz.prototype.isControl) {
        clazz.prototype.requiredErrorText = "不能为空";
        clazz.prototype.loadingMsg = "Loading...";
    }

}

if (mini.VTypes) {
    mini.copyTo(mini.VTypes, {
        minDateErrorText: '不能小于日期 {0}',
        maxDateErrorText: '不能大于日期 {0}',

        uniqueErrorText: "字段不能重复",
        requiredErrorText: "不能为空",
        emailErrorText: "请输入邮件格式",
        urlErrorText: "请输入URL格式",
        floatErrorText: "请输入数字",
        intErrorText: "请输入整数",
        dateErrorText: "请输入日期格式 {0}",
        maxLengthErrorText: "不能超过 {0} 个字符",
        minLengthErrorText: "不能少于 {0} 个字符",
        maxErrorText: "数字不能大于 {0} ",
        minErrorText: "数字不能小于 {0} ",
        rangeLengthErrorText: "字符长度必须在 {0} 到 {1} 之间",
        rangeCharErrorText: "字符数必须在 {0} 到 {1} 之间",
        rangeErrorText: "数字必须在 {0} 到 {1} 之间"
    });
}

if (mini.Pager) {
    mini.copyTo(mini.Pager.prototype, {
        firstText: "首页",
        prevText: "上一页",
        nextText: "下一页",
        lastText: "尾页",
        pageInfoText: "每页 {0} 条, 共 {1} 条"
    });
}

if (mini.DataGrid) {
    mini.copyTo(mini.DataGrid.prototype, {
        emptyText: "没有返回的数据"
    });
}

if (mini.FileUpload) {
    mini.FileUpload.prototype.buttonText = "浏览..."
}
if (mini.HtmlFile) {
    mini.HtmlFile.prototype.buttonText = "浏览..."
}




mini.copyTo(mini.VTypes, {
    telErrorText: "请输入电话号码格式",
    tel: function(v, args) {
        function IsTEL(str_tel) {
            var re = /^((00|\+)?(86(?:-| )))?((\d{11})|(\d{3}[- ]{1}\d{4}[- ]{1}\d{4})|((\d{2,4}[- ]){1}(\d{7,8}|(\d{3,4}[- ]{1}\d{4}))([- ]{1}\d{1,4})?))$/;
            if (re.test(str_tel)) {
                return (true);
            } else {
                return (false);
            }
        }
        if (mini.isNull(v) || v === "") return true;
        return IsTEL(v);
    },
    telErrorText: "请输入正确的手机格式",
    mobile: function(v, args) {
        if (mini.isNull(v) || v === "") return true;
        if (/^\d{11}$/.test(v)) {
            return true;
        } else {
            return false;
        }
    },
    eqtoFieldErrorText: "字段值不相等",
    eqtoField: function(v, args) {
        var field = mini.getbyName(args[0]);
        var value = field.getValue();
        if (value == v) return true;
        return false;
    },
    neqtoFieldErrorText: "字段值不能相等",
    neqtoField: function(v, args) {
        var field = mini.getbyName(args[0]);
        var value = field.getValue();
        if (value != v) return true;
        return false;
    },
    gtthanErrorText: "数字不能小于 {0}",
    gtthan: function(v, args) {
    	if (mini.isNull(v) || v === "") return true;
        if (v > parseFloat(args[0])) return true;
        return false;
    },
    ltthanErrorText: "数字不能大于 {0}",
    ltthan: function(v, args) {
    	if (mini.isNull(v) || v === "") return true;
        if (v < parseFloat(args[0])) return true;
        return false;
    },
    wordErrorText: "请输入数字字母组合",
    word: function(v, args) {
        if (mini.isNull(v) || v === "") return true;
        if (/^[a-zA-Z0-9]+$/.test(v)) {
            return true;
        } else {
            return false;
        }
    },
    currencyErrorText: "金额不能超过{0}位小数",
    currency: function(v, args) {
        if (mini.VTypes["float"](v, args) == false) return false;
        var n = String(v);
        var index = n.indexOf('.');
        if (~index) {
            var cents = n.substr(index + 1);
            if (cents.length > args[0]) {
                return false;
            } else {
                return true;
            }
        }
        return true;
    },
    evalErrorText: "Eval Error Text",
    eval: function(v, args, e) {
        var fn = args[0];
        if (fn) {
            return window[fn] && window[fn](v, e);
        } else {
            return true;
        }
    },
    idcardErrorText: "输入有误",
    idcard: function(v) {
        var powers = ["7", "9", "10", "5", "8", "4", "2", "1", "6", "3", "7", "9", "10", "5", "8", "4", "2"];
        var parityBit = ["1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2"];
        var sex = "male";
        //校验18位的身份证号码
        function validId18(_id) {
            _id = _id + "";
            var _num = _id.substr(0, 17);
            var _parityBit = _id.substr(17);
            var _power = 0;
            for (var i = 0; i < 17; i++) {
                //校验每一位的合法性
                if (_num.charAt(i) < '0' || _num.charAt(i) > '9') {
                    return false;
                    break;
                } else {
                    //加权
                    _power += parseInt(_num.charAt(i)) * parseInt(powers[i]);
                    //设置性别
                    if (i == 16 && parseInt(_num.charAt(i)) % 2 == 0) {
                        sex = "female";
                    } else {
                        sex = "male";
                    }
                }
            }
            //取模
            var mod = parseInt(_power) % 11;
            if (parityBit[mod] == _parityBit) {
                return true;
            }
            return false;
        }
        //校验15位的身份证号码
        function validId15(_id) {
            _id = _id + "";
            for (var i = 0; i < _id.length; i++) {
                //校验每一位的合法性
                if (_id.charAt(i) < '0' || _id.charAt(i) > '9') {
                    return false;
                    break;
                }
            }
            var year = _id.substr(6, 2);
            var month = _id.substr(8, 2);
            var day = _id.substr(10, 2);
            var sexBit = _id.substr(14);
            //校验年份位
            if (year < '01' || year > '90') return false;
            //校验月份
            if (month < '01' || month > '12') return false;
            //校验日
            if (day < '01' || day > '31') return false;
            //设置性别
            if (sexBit % 2 == 0) {
                sex = "female";
            } else {
                sex = "male";
            }
            return true;
        }
        //校验身份证号码的主调用
        function validId(v) {
            var _id = v;
            if (_id == "") return;
            var _valid = false;
            if (_id.length == 15) {
                _valid = validId15(_id);
            } else if (_id.length == 18) {
                _valid = validId18(_id);
            }
            if (!_valid) {
                return false;
            } else {
                return true;
            }
        }
        if (mini.isNull(v) || v === "") return true;
        return validId(v);
    },
    postCodeErrorText: "输入有误",
    postCode: function(v) {
        if (mini.isNull(v) || v === "") return true;
        var re = /^[1-9][0-9]{5}$/
        if (re.test(v)) {
            return true;
        } else {
            return false;
        }
    }
})


mini.lock = function(msg) {
    mini.mask({
        el: document.body,
        cls: 'mini-mask-loading',
        html: msg || 'Loading...'
    });
};

mini.unlock = function() {
    mini.unmask(document.body);
};
